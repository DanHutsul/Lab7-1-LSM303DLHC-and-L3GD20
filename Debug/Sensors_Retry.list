
Sensors_Retry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800e868  0800e868  0001e868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec44  0800ec44  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec44  0800ec44  0001ec44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec4c  0800ec4c  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec4c  0800ec4c  0001ec4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec50  0800ec50  0001ec50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  0800ec54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001afc  200003c4  0800f018  000203c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec0  0800f018  00021ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b709  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f3d  00000000  00000000  0003bafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003fa40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001290  00000000  00000000  00040e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b123  00000000  00000000  00042120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014887  00000000  00000000  0005d243  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091ba5  00000000  00000000  00071aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010366f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060ac  00000000  00000000  001036ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003c4 	.word	0x200003c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e84c 	.word	0x0800e84c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003c8 	.word	0x200003c8
 80001dc:	0800e84c 	.word	0x0800e84c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f9c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8000fa0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f001 fe7b 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 fa15 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 fb5d 	bl	8001668 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fae:	f000 fa99 	bl	80014e4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000fb2:	f000 fac5 	bl	8001540 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000fb6:	f000 faf1 	bl	800159c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000fba:	f000 fb1f 	bl	80015fc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000fbe:	f009 f8c5 	bl	800a14c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  int16_t xyz[3];
  float xyz2[] = {1.0, 1.0, 1.0};
 8000fc2:	4ae7      	ldr	r2, [pc, #924]	; (8001360 <main+0x3c8>)
 8000fc4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8000fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char str_vector_gyro[100];
  char str_max_vector_accelero[100];
  char str_max_vector_gyro[100];
  float vector_accelero;
  float vector_gyro;
  BSP_ACCELERO_Init();
 8000fce:	f001 fd53 	bl	8002a78 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8000fd2:	f001 fde9 	bl	8002ba8 <BSP_GYRO_Init>

  float max_vector_accelero = 0.0;
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
  float max_vector_gyro = 0.0;
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

  while (1)
  {
    /* USER CODE END WHILE */
	BSP_ACCELERO_GetXYZ(xyz);
 8000fe6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fdb0 	bl	8002b50 <BSP_ACCELERO_GetXYZ>
	BSP_GYRO_GetXYZ(xyz2);
 8000ff0:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fe3d 	bl	8002c74 <BSP_GYRO_GetXYZ>

	vector_accelero = sqrt(xyz[0]/100*xyz[0]/100+xyz[1]/100*xyz[1]/100+xyz[2]/100*xyz[2]/100);
 8000ffa:	f9b7 3268 	ldrsh.w	r3, [r7, #616]	; 0x268
 8000ffe:	4ad9      	ldr	r2, [pc, #868]	; (8001364 <main+0x3cc>)
 8001000:	fb82 1203 	smull	r1, r2, r2, r3
 8001004:	1152      	asrs	r2, r2, #5
 8001006:	17db      	asrs	r3, r3, #31
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	b21b      	sxth	r3, r3
 800100c:	f9b7 2268 	ldrsh.w	r2, [r7, #616]	; 0x268
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	4ad3      	ldr	r2, [pc, #844]	; (8001364 <main+0x3cc>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	1152      	asrs	r2, r2, #5
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	1ad2      	subs	r2, r2, r3
 8001020:	f9b7 326a 	ldrsh.w	r3, [r7, #618]	; 0x26a
 8001024:	49cf      	ldr	r1, [pc, #828]	; (8001364 <main+0x3cc>)
 8001026:	fb81 0103 	smull	r0, r1, r1, r3
 800102a:	1149      	asrs	r1, r1, #5
 800102c:	17db      	asrs	r3, r3, #31
 800102e:	1acb      	subs	r3, r1, r3
 8001030:	b21b      	sxth	r3, r3
 8001032:	f9b7 126a 	ldrsh.w	r1, [r7, #618]	; 0x26a
 8001036:	fb01 f303 	mul.w	r3, r1, r3
 800103a:	49ca      	ldr	r1, [pc, #808]	; (8001364 <main+0x3cc>)
 800103c:	fb81 0103 	smull	r0, r1, r1, r3
 8001040:	1149      	asrs	r1, r1, #5
 8001042:	17db      	asrs	r3, r3, #31
 8001044:	1acb      	subs	r3, r1, r3
 8001046:	441a      	add	r2, r3
 8001048:	f9b7 326c 	ldrsh.w	r3, [r7, #620]	; 0x26c
 800104c:	49c5      	ldr	r1, [pc, #788]	; (8001364 <main+0x3cc>)
 800104e:	fb81 0103 	smull	r0, r1, r1, r3
 8001052:	1149      	asrs	r1, r1, #5
 8001054:	17db      	asrs	r3, r3, #31
 8001056:	1acb      	subs	r3, r1, r3
 8001058:	b21b      	sxth	r3, r3
 800105a:	f9b7 126c 	ldrsh.w	r1, [r7, #620]	; 0x26c
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	49c0      	ldr	r1, [pc, #768]	; (8001364 <main+0x3cc>)
 8001064:	fb81 0103 	smull	r0, r1, r1, r3
 8001068:	1149      	asrs	r1, r1, #5
 800106a:	17db      	asrs	r3, r3, #31
 800106c:	1acb      	subs	r3, r1, r3
 800106e:	4413      	add	r3, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa5f 	bl	8000534 <__aeabi_i2d>
 8001076:	4603      	mov	r3, r0
 8001078:	460c      	mov	r4, r1
 800107a:	ec44 3b10 	vmov	d0, r3, r4
 800107e:	f00d fad9 	bl	800e634 <sqrt>
 8001082:	ec54 3b10 	vmov	r3, r4, d0
 8001086:	4618      	mov	r0, r3
 8001088:	4621      	mov	r1, r4
 800108a:	f7ff fdb5 	bl	8000bf8 <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	vector_gyro = sqrt(xyz2[0]/1000*xyz2[0]/1000+xyz2[1]/1000*xyz2[1]/1000+xyz2[2]/1000*xyz2[2]/1000);
 8001094:	edd7 7a97 	vldr	s15, [r7, #604]	; 0x25c
 8001098:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8001368 <main+0x3d0>
 800109c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010a0:	edd7 7a97 	vldr	s15, [r7, #604]	; 0x25c
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8001368 <main+0x3d0>
 80010ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b0:	edd7 7a98 	vldr	s15, [r7, #608]	; 0x260
 80010b4:	ed9f 6aac 	vldr	s12, [pc, #688]	; 8001368 <main+0x3d0>
 80010b8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80010bc:	edd7 7a98 	vldr	s15, [r7, #608]	; 0x260
 80010c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010c4:	ed9f 6aa8 	vldr	s12, [pc, #672]	; 8001368 <main+0x3d0>
 80010c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80010cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d0:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 80010d4:	ed9f 6aa4 	vldr	s12, [pc, #656]	; 8001368 <main+0x3d0>
 80010d8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80010dc:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 80010e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010e4:	ed9f 6aa0 	vldr	s12, [pc, #640]	; 8001368 <main+0x3d0>
 80010e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80010ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f0:	ee17 0a90 	vmov	r0, s15
 80010f4:	f7ff fa30 	bl	8000558 <__aeabi_f2d>
 80010f8:	4603      	mov	r3, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	ec44 3b10 	vmov	d0, r3, r4
 8001100:	f00d fa98 	bl	800e634 <sqrt>
 8001104:	ec54 3b10 	vmov	r3, r4, d0
 8001108:	4618      	mov	r0, r3
 800110a:	4621      	mov	r1, r4
 800110c:	f7ff fd74 	bl	8000bf8 <__aeabi_d2f>
 8001110:	4603      	mov	r3, r0
 8001112:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270

	if(vector_accelero > max_vector_accelero) {
 8001116:	ed97 7a9d 	vldr	s14, [r7, #628]	; 0x274
 800111a:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800111e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd03      	ble.n	8001130 <main+0x198>
		max_vector_accelero = vector_accelero;
 8001128:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800112c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
	}
	if(vector_gyro > max_vector_gyro) {
 8001130:	ed97 7a9c 	vldr	s14, [r7, #624]	; 0x270
 8001134:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8001138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	dd03      	ble.n	800114a <main+0x1b2>
		max_vector_gyro = vector_gyro;
 8001142:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8001146:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
	}

	sprintf(xyz_accelero, "Accelerometer: %i.%02i %i.%02i %i.%02i\n", (xyz[0])/100, abs(xyz[0]-((xyz[0])/100)*100), (xyz[1])/100, abs(xyz[1]-((xyz[1])/100)*100), (xyz[2])/100, abs(xyz[2]-((xyz[2])/100)*100));
 800114a:	f9b7 3268 	ldrsh.w	r3, [r7, #616]	; 0x268
 800114e:	4a85      	ldr	r2, [pc, #532]	; (8001364 <main+0x3cc>)
 8001150:	fb82 1203 	smull	r1, r2, r2, r3
 8001154:	1152      	asrs	r2, r2, #5
 8001156:	17db      	asrs	r3, r3, #31
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	b21b      	sxth	r3, r3
 800115c:	469c      	mov	ip, r3
 800115e:	f9b7 3268 	ldrsh.w	r3, [r7, #616]	; 0x268
 8001162:	4619      	mov	r1, r3
 8001164:	f9b7 3268 	ldrsh.w	r3, [r7, #616]	; 0x268
 8001168:	4a7e      	ldr	r2, [pc, #504]	; (8001364 <main+0x3cc>)
 800116a:	fb82 0203 	smull	r0, r2, r2, r3
 800116e:	1152      	asrs	r2, r2, #5
 8001170:	17db      	asrs	r3, r3, #31
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	b21b      	sxth	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800117c:	fb03 f302 	mul.w	r3, r3, r2
 8001180:	440b      	add	r3, r1
 8001182:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8001186:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800118a:	f9b7 326a 	ldrsh.w	r3, [r7, #618]	; 0x26a
 800118e:	4a75      	ldr	r2, [pc, #468]	; (8001364 <main+0x3cc>)
 8001190:	fb82 1203 	smull	r1, r2, r2, r3
 8001194:	1152      	asrs	r2, r2, #5
 8001196:	17db      	asrs	r3, r3, #31
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	b21b      	sxth	r3, r3
 800119c:	461d      	mov	r5, r3
 800119e:	f9b7 326a 	ldrsh.w	r3, [r7, #618]	; 0x26a
 80011a2:	4619      	mov	r1, r3
 80011a4:	f9b7 326a 	ldrsh.w	r3, [r7, #618]	; 0x26a
 80011a8:	4a6e      	ldr	r2, [pc, #440]	; (8001364 <main+0x3cc>)
 80011aa:	fb82 0203 	smull	r0, r2, r2, r3
 80011ae:	1152      	asrs	r2, r2, #5
 80011b0:	17db      	asrs	r3, r3, #31
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80011bc:	fb03 f302 	mul.w	r3, r3, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011c6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011ca:	f9b7 326c 	ldrsh.w	r3, [r7, #620]	; 0x26c
 80011ce:	4965      	ldr	r1, [pc, #404]	; (8001364 <main+0x3cc>)
 80011d0:	fb81 0103 	smull	r0, r1, r1, r3
 80011d4:	1149      	asrs	r1, r1, #5
 80011d6:	17db      	asrs	r3, r3, #31
 80011d8:	1acb      	subs	r3, r1, r3
 80011da:	b21b      	sxth	r3, r3
 80011dc:	461e      	mov	r6, r3
 80011de:	f9b7 326c 	ldrsh.w	r3, [r7, #620]	; 0x26c
 80011e2:	4618      	mov	r0, r3
 80011e4:	f9b7 326c 	ldrsh.w	r3, [r7, #620]	; 0x26c
 80011e8:	495e      	ldr	r1, [pc, #376]	; (8001364 <main+0x3cc>)
 80011ea:	fb81 e103 	smull	lr, r1, r1, r3
 80011ee:	1149      	asrs	r1, r1, #5
 80011f0:	17db      	asrs	r3, r3, #31
 80011f2:	1acb      	subs	r3, r1, r3
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4619      	mov	r1, r3
 80011f8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80011fc:	fb03 f301 	mul.w	r3, r3, r1
 8001200:	4403      	add	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	bfb8      	it	lt
 8001206:	425b      	neglt	r3, r3
 8001208:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 800120c:	9303      	str	r3, [sp, #12]
 800120e:	9602      	str	r6, [sp, #8]
 8001210:	9201      	str	r2, [sp, #4]
 8001212:	9500      	str	r5, [sp, #0]
 8001214:	4623      	mov	r3, r4
 8001216:	4662      	mov	r2, ip
 8001218:	4954      	ldr	r1, [pc, #336]	; (800136c <main+0x3d4>)
 800121a:	f00a fbd9 	bl	800b9d0 <siprintf>
	sprintf(xyz_gyro, "Gyroscope: %f %f %f \n", xyz2[0]/1000, xyz2[1]/1000, xyz2[2]/1000);
 800121e:	edd7 7a97 	vldr	s15, [r7, #604]	; 0x25c
 8001222:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001368 <main+0x3d0>
 8001226:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800122a:	ee16 0a90 	vmov	r0, s13
 800122e:	f7ff f993 	bl	8000558 <__aeabi_f2d>
 8001232:	4680      	mov	r8, r0
 8001234:	4689      	mov	r9, r1
 8001236:	edd7 7a98 	vldr	s15, [r7, #608]	; 0x260
 800123a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001368 <main+0x3d0>
 800123e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001242:	ee16 0a90 	vmov	r0, s13
 8001246:	f7ff f987 	bl	8000558 <__aeabi_f2d>
 800124a:	4604      	mov	r4, r0
 800124c:	460d      	mov	r5, r1
 800124e:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 8001252:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001368 <main+0x3d0>
 8001256:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800125a:	ee16 0a90 	vmov	r0, s13
 800125e:	f7ff f97b 	bl	8000558 <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 800126a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800126e:	e9cd 4500 	strd	r4, r5, [sp]
 8001272:	4642      	mov	r2, r8
 8001274:	464b      	mov	r3, r9
 8001276:	493e      	ldr	r1, [pc, #248]	; (8001370 <main+0x3d8>)
 8001278:	f00a fbaa 	bl	800b9d0 <siprintf>
	sprintf(str_vector_accelero, "Accelerometer Vector: |%f|\n", vector_accelero);
 800127c:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8001280:	f7ff f96a 	bl	8000558 <__aeabi_f2d>
 8001284:	4603      	mov	r3, r0
 8001286:	460c      	mov	r4, r1
 8001288:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800128c:	461a      	mov	r2, r3
 800128e:	4623      	mov	r3, r4
 8001290:	4938      	ldr	r1, [pc, #224]	; (8001374 <main+0x3dc>)
 8001292:	f00a fb9d 	bl	800b9d0 <siprintf>
	sprintf(str_vector_gyro, "Gyro Vector: |%f|\n", vector_gyro);
 8001296:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 800129a:	f7ff f95d 	bl	8000558 <__aeabi_f2d>
 800129e:	4603      	mov	r3, r0
 80012a0:	460c      	mov	r4, r1
 80012a2:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 80012a6:	461a      	mov	r2, r3
 80012a8:	4623      	mov	r3, r4
 80012aa:	4933      	ldr	r1, [pc, #204]	; (8001378 <main+0x3e0>)
 80012ac:	f00a fb90 	bl	800b9d0 <siprintf>
	sprintf(str_max_vector_accelero, "Maximum Accelerometer Vector: |%f|\n\n", max_vector_accelero);
 80012b0:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 80012b4:	f7ff f950 	bl	8000558 <__aeabi_f2d>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80012c0:	461a      	mov	r2, r3
 80012c2:	4623      	mov	r3, r4
 80012c4:	492d      	ldr	r1, [pc, #180]	; (800137c <main+0x3e4>)
 80012c6:	f00a fb83 	bl	800b9d0 <siprintf>
	sprintf(str_max_vector_gyro, "Maximum Gyro Vector: |%f|\n\n", max_vector_gyro);
 80012ca:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 80012ce:	f7ff f943 	bl	8000558 <__aeabi_f2d>
 80012d2:	4603      	mov	r3, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	1d38      	adds	r0, r7, #4
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	4928      	ldr	r1, [pc, #160]	; (8001380 <main+0x3e8>)
 80012de:	f00a fb77 	bl	800b9d0 <siprintf>
	CDC_Transmit_FS((uint8_t*)xyz_accelero, (uint16_t)strlen(xyz_accelero));
 80012e2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff7a 	bl	80001e0 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f008 ffe5 	bl	800a2c8 <CDC_Transmit_FS>
	HAL_Delay(100);
 80012fe:	2064      	movs	r0, #100	; 0x64
 8001300:	f001 fd3e 	bl	8002d80 <HAL_Delay>
	CDC_Transmit_FS((uint8_t*)str_vector_accelero, (uint16_t)strlen(str_vector_accelero));
 8001304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff69 	bl	80001e0 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f008 ffd4 	bl	800a2c8 <CDC_Transmit_FS>
	HAL_Delay(100);
 8001320:	2064      	movs	r0, #100	; 0x64
 8001322:	f001 fd2d 	bl	8002d80 <HAL_Delay>
	CDC_Transmit_FS((uint8_t*)str_max_vector_accelero, (uint16_t)strlen(str_max_vector_accelero));
 8001326:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff58 	bl	80001e0 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	b29b      	uxth	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f008 ffc3 	bl	800a2c8 <CDC_Transmit_FS>
	HAL_Delay(100);
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f001 fd1c 	bl	8002d80 <HAL_Delay>
	CDC_Transmit_FS((uint8_t*)xyz_gyro, (uint16_t)strlen(xyz_gyro));
 8001348:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff47 	bl	80001e0 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	b29b      	uxth	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800135c:	4611      	mov	r1, r2
 800135e:	e011      	b.n	8001384 <main+0x3ec>
 8001360:	0800e91c 	.word	0x0800e91c
 8001364:	51eb851f 	.word	0x51eb851f
 8001368:	447a0000 	.word	0x447a0000
 800136c:	0800e868 	.word	0x0800e868
 8001370:	0800e890 	.word	0x0800e890
 8001374:	0800e8a8 	.word	0x0800e8a8
 8001378:	0800e8c4 	.word	0x0800e8c4
 800137c:	0800e8d8 	.word	0x0800e8d8
 8001380:	0800e900 	.word	0x0800e900
 8001384:	4618      	mov	r0, r3
 8001386:	f008 ff9f 	bl	800a2c8 <CDC_Transmit_FS>
	HAL_Delay(100);
 800138a:	2064      	movs	r0, #100	; 0x64
 800138c:	f001 fcf8 	bl	8002d80 <HAL_Delay>
	CDC_Transmit_FS((uint8_t*)str_vector_gyro, (uint16_t)strlen(str_vector_gyro));
 8001390:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff23 	bl	80001e0 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	b29b      	uxth	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f008 ff8e 	bl	800a2c8 <CDC_Transmit_FS>
	HAL_Delay(100);
 80013ac:	2064      	movs	r0, #100	; 0x64
 80013ae:	f001 fce7 	bl	8002d80 <HAL_Delay>
	CDC_Transmit_FS((uint8_t*)str_max_vector_gyro, (uint16_t)strlen(str_max_vector_gyro));
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7fe ff13 	bl	80001e0 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29b      	uxth	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 ff7f 	bl	800a2c8 <CDC_Transmit_FS>
	HAL_Delay(200);
 80013ca:	20c8      	movs	r0, #200	; 0xc8
 80013cc:	f001 fcd8 	bl	8002d80 <HAL_Delay>
  {
 80013d0:	e609      	b.n	8000fe6 <main+0x4e>
 80013d2:	bf00      	nop

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b09a      	sub	sp, #104	; 0x68
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f009 fbf0 	bl	800abc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <SystemClock_Config+0x108>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a32      	ldr	r2, [pc, #200]	; (80014dc <SystemClock_Config+0x108>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b30      	ldr	r3, [pc, #192]	; (80014dc <SystemClock_Config+0x108>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <SystemClock_Config+0x10c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a2c      	ldr	r2, [pc, #176]	; (80014e0 <SystemClock_Config+0x10c>)
 8001430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <SystemClock_Config+0x10c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001442:	2301      	movs	r3, #1
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144c:	2302      	movs	r3, #2
 800144e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001454:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001456:	2304      	movs	r3, #4
 8001458:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800145a:	23c0      	movs	r3, #192	; 0xc0
 800145c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800145e:	2304      	movs	r3, #4
 8001460:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001462:	2308      	movs	r3, #8
 8001464:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800146a:	4618      	mov	r0, r3
 800146c:	f004 fe50 	bl	8006110 <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001476:	f000 f9f3 	bl	8001860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147e:	2302      	movs	r3, #2
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001486:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	2103      	movs	r1, #3
 8001496:	4618      	mov	r0, r3
 8001498:	f005 f8aa 	bl	80065f0 <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80014a2:	f000 f9dd 	bl	8001860 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014a6:	2301      	movs	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80014aa:	23c8      	movs	r3, #200	; 0xc8
 80014ac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80014ae:	2305      	movs	r3, #5
 80014b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	4618      	mov	r0, r3
 80014bc:	f005 fade 	bl	8006a7c <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80014c6:	f000 f9cb 	bl	8001860 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2001      	movs	r0, #1
 80014d0:	f005 f974 	bl	80067bc <HAL_RCC_MCOConfig>
}
 80014d4:	bf00      	nop
 80014d6:	3768      	adds	r7, #104	; 0x68
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_I2C1_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <MX_I2C1_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_I2C1_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_I2C1_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_I2C1_Init+0x50>)
 8001522:	f001 ffdf 	bl	80034e4 <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 f998 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200004a4 	.word	0x200004a4
 8001538:	40005400 	.word	0x40005400
 800153c:	000186a0 	.word	0x000186a0

08001540 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2S2_Init+0x50>)
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <MX_I2S2_Init+0x54>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_I2S2_Init+0x50>)
 800154c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001550:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_I2S2_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <MX_I2S2_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_I2S2_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <MX_I2S2_Init+0x50>)
 8001566:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <MX_I2S2_Init+0x58>)
 8001568:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_I2S2_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_I2S2_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_I2S2_Init+0x50>)
 8001578:	2201      	movs	r2, #1
 800157a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_I2S2_Init+0x50>)
 800157e:	f002 ffa3 	bl	80044c8 <HAL_I2S_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001588:	f000 f96a 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000550 	.word	0x20000550
 8001594:	40003800 	.word	0x40003800
 8001598:	00017700 	.word	0x00017700

0800159c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015a2:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <MX_I2S3_Init+0x58>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <MX_I2S3_Init+0x5c>)
 80015c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_I2S3_Init+0x54>)
 80015dc:	f002 ff74 	bl	80044c8 <HAL_I2S_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80015e6:	f000 f93b 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000598 	.word	0x20000598
 80015f4:	40003c00 	.word	0x40003c00
 80015f8:	00017700 	.word	0x00017700

080015fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_SPI1_Init+0x64>)
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <MX_SPI1_Init+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_SPI1_Init+0x64>)
 8001608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800160c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_SPI1_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_SPI1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_SPI1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_SPI1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_SPI1_Init+0x64>)
 8001628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_SPI1_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_SPI1_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_SPI1_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_SPI1_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_SPI1_Init+0x64>)
 8001648:	220a      	movs	r2, #10
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_SPI1_Init+0x64>)
 800164e:	f005 fb63 	bl	8006d18 <HAL_SPI_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001658:	f000 f902 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200004f8 	.word	0x200004f8
 8001664:	40013000 	.word	0x40013000

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	4b71      	ldr	r3, [pc, #452]	; (8001848 <MX_GPIO_Init+0x1e0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a70      	ldr	r2, [pc, #448]	; (8001848 <MX_GPIO_Init+0x1e0>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b6e      	ldr	r3, [pc, #440]	; (8001848 <MX_GPIO_Init+0x1e0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	4b6a      	ldr	r3, [pc, #424]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a69      	ldr	r2, [pc, #420]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b63      	ldr	r3, [pc, #396]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a62      	ldr	r2, [pc, #392]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b60      	ldr	r3, [pc, #384]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a5b      	ldr	r2, [pc, #364]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b59      	ldr	r3, [pc, #356]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b55      	ldr	r3, [pc, #340]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a54      	ldr	r2, [pc, #336]	; (8001848 <MX_GPIO_Init+0x1e0>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b52      	ldr	r3, [pc, #328]	; (8001848 <MX_GPIO_Init+0x1e0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <MX_GPIO_Init+0x1e0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a4d      	ldr	r2, [pc, #308]	; (8001848 <MX_GPIO_Init+0x1e0>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <MX_GPIO_Init+0x1e0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2108      	movs	r1, #8
 800172a:	4848      	ldr	r0, [pc, #288]	; (800184c <MX_GPIO_Init+0x1e4>)
 800172c:	f001 fec0 	bl	80034b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2101      	movs	r1, #1
 8001734:	4846      	ldr	r0, [pc, #280]	; (8001850 <MX_GPIO_Init+0x1e8>)
 8001736:	f001 febb 	bl	80034b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800173a:	2200      	movs	r2, #0
 800173c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001740:	4844      	ldr	r0, [pc, #272]	; (8001854 <MX_GPIO_Init+0x1ec>)
 8001742:	f001 feb5 	bl	80034b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001746:	2304      	movs	r3, #4
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	483c      	ldr	r0, [pc, #240]	; (800184c <MX_GPIO_Init+0x1e4>)
 800175a:	f001 fc45 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800175e:	2308      	movs	r3, #8
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4835      	ldr	r0, [pc, #212]	; (800184c <MX_GPIO_Init+0x1e4>)
 8001776:	f001 fc37 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800177a:	2332      	movs	r3, #50	; 0x32
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <MX_GPIO_Init+0x1f0>)
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	482f      	ldr	r0, [pc, #188]	; (800184c <MX_GPIO_Init+0x1e4>)
 800178e:	f001 fc2b 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001792:	2301      	movs	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4829      	ldr	r0, [pc, #164]	; (8001850 <MX_GPIO_Init+0x1e8>)
 80017aa:	f001 fc1d 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <MX_GPIO_Init+0x1f0>)
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4826      	ldr	r0, [pc, #152]	; (800185c <MX_GPIO_Init+0x1f4>)
 80017c2:	f001 fc11 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017c6:	2304      	movs	r3, #4
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017d6:	2305      	movs	r3, #5
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	481e      	ldr	r0, [pc, #120]	; (800185c <MX_GPIO_Init+0x1f4>)
 80017e2:	f001 fc01 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80017e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80017ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4815      	ldr	r0, [pc, #84]	; (8001854 <MX_GPIO_Init+0x1ec>)
 8001800:	f001 fbf2 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	480b      	ldr	r0, [pc, #44]	; (8001850 <MX_GPIO_Init+0x1e8>)
 8001822:	f001 fbe1 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001826:	2320      	movs	r3, #32
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_GPIO_Init+0x1ec>)
 800183a:	f001 fbd5 	bl	8002fe8 <HAL_GPIO_Init>

}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	; 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40021000 	.word	0x40021000
 8001850:	40020800 	.word	0x40020800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	10120000 	.word	0x10120000
 800185c:	40020000 	.word	0x40020000

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <HAL_MspInit+0x4c>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_MspInit+0x4c>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_MspInit+0x4c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_MspInit+0x4c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ae:	2007      	movs	r0, #7
 80018b0:	f001 fb58 	bl	8002f64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_I2C_MspInit+0x84>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12c      	bne.n	800193c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_I2C_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_I2C_MspInit+0x88>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_I2C_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80018fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001904:	2312      	movs	r3, #18
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001908:	2301      	movs	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001910:	2304      	movs	r3, #4
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	480c      	ldr	r0, [pc, #48]	; (800194c <HAL_I2C_MspInit+0x8c>)
 800191c:	f001 fb64 	bl	8002fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_I2C_MspInit+0x88>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_I2C_MspInit+0x88>)
 800192a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_I2C_MspInit+0x88>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	; 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40005400 	.word	0x40005400
 8001948:	40023800 	.word	0x40023800
 800194c:	40020400 	.word	0x40020400

08001950 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_I2C_MspDeInit+0x38>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10e      	bne.n	8001980 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_I2C_MspDeInit+0x3c>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_I2C_MspDeInit+0x3c>)
 8001968:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 800196e:	2140      	movs	r1, #64	; 0x40
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <HAL_I2C_MspDeInit+0x40>)
 8001972:	f001 fcbb 	bl	80032ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8001976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_I2C_MspDeInit+0x40>)
 800197c:	f001 fcb6 	bl	80032ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40005400 	.word	0x40005400
 800198c:	40023800 	.word	0x40023800
 8001990:	40020400 	.word	0x40020400

08001994 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08e      	sub	sp, #56	; 0x38
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a59      	ldr	r2, [pc, #356]	; (8001b18 <HAL_I2S_MspInit+0x184>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d15b      	bne.n	8001a6e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
 80019ba:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a57      	ldr	r2, [pc, #348]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b55      	ldr	r3, [pc, #340]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001a1a:	2306      	movs	r3, #6
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	483e      	ldr	r0, [pc, #248]	; (8001b20 <HAL_I2S_MspInit+0x18c>)
 8001a26:	f001 fadf 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	4836      	ldr	r0, [pc, #216]	; (8001b20 <HAL_I2S_MspInit+0x18c>)
 8001a46:	f001 facf 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001a4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a5c:	2305      	movs	r3, #5
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	4619      	mov	r1, r3
 8001a66:	482f      	ldr	r0, [pc, #188]	; (8001b24 <HAL_I2S_MspInit+0x190>)
 8001a68:	f001 fabe 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a6c:	e04f      	b.n	8001b0e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <HAL_I2S_MspInit+0x194>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d14a      	bne.n	8001b0e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_I2S_MspInit+0x188>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001acc:	2310      	movs	r3, #16
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001adc:	2306      	movs	r3, #6
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4811      	ldr	r0, [pc, #68]	; (8001b2c <HAL_I2S_MspInit+0x198>)
 8001ae8:	f001 fa7e 	bl	8002fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001aec:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001afe:	2306      	movs	r3, #6
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_I2S_MspInit+0x18c>)
 8001b0a:	f001 fa6d 	bl	8002fe8 <HAL_GPIO_Init>
}
 8001b0e:	bf00      	nop
 8001b10:	3738      	adds	r7, #56	; 0x38
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40003800 	.word	0x40003800
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40003c00 	.word	0x40003c00
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_SPI_MspInit+0x84>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d12b      	bne.n	8001baa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_SPI_MspInit+0x88>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_SPI_MspInit+0x88>)
 8001b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_SPI_MspInit+0x88>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_SPI_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_SPI_MspInit+0x88>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_SPI_MspInit+0x88>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b8a:	23e0      	movs	r3, #224	; 0xe0
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_SPI_MspInit+0x8c>)
 8001ba6:	f001 fa1f 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40013000 	.word	0x40013000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_SPI_MspDeInit+0x30>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d109      	bne.n	8001be6 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_SPI_MspDeInit+0x34>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_SPI_MspDeInit+0x34>)
 8001bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8001bde:	21e0      	movs	r1, #224	; 0xe0
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_SPI_MspDeInit+0x38>)
 8001be2:	f001 fb83 	bl	80032ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40013000 	.word	0x40013000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <MemManage_Handler+0x4>

08001c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c50:	f001 f876 	bl	8002d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <OTG_FS_IRQHandler+0x10>)
 8001c5e:	f003 fa23 	bl	80050a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20001ab4 	.word	0x20001ab4

08001c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <_sbrk+0x5c>)
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <_sbrk+0x60>)
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <_sbrk+0x64>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <_sbrk+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <_sbrk+0x64>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d207      	bcs.n	8001cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c9c:	f008 ff5a 	bl	800ab54 <__errno>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	e009      	b.n	8001cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <_sbrk+0x64>)
 8001cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20020000 	.word	0x20020000
 8001ccc:	00000400 	.word	0x00000400
 8001cd0:	200003e0 	.word	0x200003e0
 8001cd4:	20001ec0 	.word	0x20001ec0

08001cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <SystemInit+0x28>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <SystemInit+0x28>)
 8001ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SystemInit+0x28>)
 8001cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf2:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d0a:	e003      	b.n	8001d14 <LoopCopyDataInit>

08001d0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d12:	3104      	adds	r1, #4

08001d14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d1c:	d3f6      	bcc.n	8001d0c <CopyDataInit>
  ldr  r2, =_sbss
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d20:	e002      	b.n	8001d28 <LoopFillZerobss>

08001d22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d24:	f842 3b04 	str.w	r3, [r2], #4

08001d28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d2c:	d3f9      	bcc.n	8001d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d2e:	f7ff ffd3 	bl	8001cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f008 ff15 	bl	800ab60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7ff f92f 	bl	8000f98 <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d40:	0800ec54 	.word	0x0800ec54
  ldr  r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d48:	200003c4 	.word	0x200003c4
  ldr  r2, =_sbss
 8001d4c:	200003c4 	.word	0x200003c4
  ldr  r3, = _ebss
 8001d50:	20001ec0 	.word	0x20001ec0

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>

08001d56 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001d64:	f000 fd54 	bl	8002810 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001d6e:	f107 030f 	add.w	r3, r7, #15
 8001d72:	2201      	movs	r2, #1
 8001d74:	2120      	movs	r1, #32
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fd94 	bl	80028a4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001d86:	f107 030f 	add.w	r3, r7, #15
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2123      	movs	r1, #35	; 0x23
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fd88 	bl	80028a4 <GYRO_IO_Write>
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001db0:	f000 fd2e 	bl	8002810 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	2201      	movs	r2, #1
 8001db8:	210f      	movs	r1, #15
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fda4 	bl	8002908 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2124      	movs	r1, #36	; 0x24
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fd96 	bl	8002908 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	2201      	movs	r2, #1
 8001dea:	2124      	movs	r1, #36	; 0x24
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fd59 	bl	80028a4 <GYRO_IO_Write>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001e0e:	f107 030f 	add.w	r3, r7, #15
 8001e12:	2201      	movs	r2, #1
 8001e14:	2120      	movs	r1, #32
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fd44 	bl	80028a4 <GYRO_IO_Write>
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	2300      	movs	r3, #0
 8001e34:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e36:	f107 030f 	add.w	r3, r7, #15
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2130      	movs	r1, #48	; 0x30
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fd62 	bl	8002908 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e44:	f107 030e 	add.w	r3, r7, #14
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2122      	movs	r1, #34	; 0x22
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fd5b 	bl	8002908 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	121b      	asrs	r3, r3, #8
 8001e62:	b25a      	sxtb	r2, r3
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	b25b      	sxtb	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	f023 0320 	bic.w	r3, r3, #32
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e86:	f107 030f 	add.w	r3, r7, #15
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2130      	movs	r1, #48	; 0x30
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fd08 	bl	80028a4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e94:	f107 030e 	add.w	r3, r7, #14
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2122      	movs	r1, #34	; 0x22
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fd01 	bl	80028a4 <GYRO_IO_Write>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001eb4:	f107 030f 	add.w	r3, r7, #15
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2122      	movs	r1, #34	; 0x22
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fd23 	bl	8002908 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e00c      	b.n	8001ef8 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d109      	bne.n	8001ef8 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	f023 0308 	bic.w	r3, r3, #8
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ef8:	f107 030f 	add.w	r3, r7, #15
 8001efc:	2201      	movs	r2, #1
 8001efe:	2122      	movs	r1, #34	; 0x22
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fccf 	bl	80028a4 <GYRO_IO_Write>
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f18:	f107 030f 	add.w	r3, r7, #15
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2122      	movs	r1, #34	; 0x22
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fcf1 	bl	8002908 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	e009      	b.n	8001f50 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d106      	bne.n	8001f50 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	f023 0308 	bic.w	r3, r3, #8
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f50:	f107 030f 	add.w	r3, r7, #15
 8001f54:	2201      	movs	r2, #1
 8001f56:	2122      	movs	r1, #34	; 0x22
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fca3 	bl	80028a4 <GYRO_IO_Write>
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f70:	f107 030f 	add.w	r3, r7, #15
 8001f74:	2201      	movs	r2, #1
 8001f76:	2121      	movs	r1, #33	; 0x21
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fcc5 	bl	8002908 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f92:	f107 030f 	add.w	r3, r7, #15
 8001f96:	2201      	movs	r2, #1
 8001f98:	2121      	movs	r1, #33	; 0x21
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fc82 	bl	80028a4 <GYRO_IO_Write>
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001fb2:	f107 030f 	add.w	r3, r7, #15
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2124      	movs	r1, #36	; 0x24
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fca4 	bl	8002908 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	f023 0310 	bic.w	r3, r3, #16
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001fd4:	f107 030f 	add.w	r3, r7, #15
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2124      	movs	r1, #36	; 0x24
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fc61 	bl	80028a4 <GYRO_IO_Write>
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002016:	f107 030f 	add.w	r3, r7, #15
 800201a:	2201      	movs	r2, #1
 800201c:	2123      	movs	r1, #35	; 0x23
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fc72 	bl	8002908 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	2206      	movs	r2, #6
 800202a:	2128      	movs	r1, #40	; 0x28
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fc6b 	bl	8002908 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d126      	bne.n	800208a <L3GD20_ReadXYZAngRate+0x9e>
  {
    for(i=0; i<3; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	e01f      	b.n	8002082 <L3GD20_ReadXYZAngRate+0x96>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	3301      	adds	r3, #1
 8002048:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800204c:	4413      	add	r3, r2
 800204e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002052:	b29b      	uxth	r3, r3
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b29a      	uxth	r2, r3
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002060:	440b      	add	r3, r1
 8002062:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4413      	add	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	b21a      	sxth	r2, r3
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002076:	440b      	add	r3, r1
 8002078:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	3301      	adds	r3, #1
 8002080:	623b      	str	r3, [r7, #32]
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2b02      	cmp	r3, #2
 8002086:	dddc      	ble.n	8002042 <L3GD20_ReadXYZAngRate+0x56>
 8002088:	e025      	b.n	80020d6 <L3GD20_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
 800208e:	e01f      	b.n	80020d0 <L3GD20_ReadXYZAngRate+0xe4>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002098:	4413      	add	r3, r2
 800209a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	3301      	adds	r3, #1
 80020aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020ae:	440b      	add	r3, r1
 80020b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020c4:	440b      	add	r3, r1
 80020c6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	3301      	adds	r3, #1
 80020ce:	623b      	str	r3, [r7, #32]
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	dddc      	ble.n	8002090 <L3GD20_ReadXYZAngRate+0xa4>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d006      	beq.n	80020ee <L3GD20_ReadXYZAngRate+0x102>
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d007      	beq.n	80020f4 <L3GD20_ReadXYZAngRate+0x108>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d108      	bne.n	80020fa <L3GD20_ReadXYZAngRate+0x10e>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <L3GD20_ReadXYZAngRate+0x154>)
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80020ec:	e005      	b.n	80020fa <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <L3GD20_ReadXYZAngRate+0x158>)
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80020f2:	e002      	b.n	80020fa <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <L3GD20_ReadXYZAngRate+0x15c>)
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80020f8:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	e017      	b.n	8002130 <L3GD20_ReadXYZAngRate+0x144>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002108:	4413      	add	r3, r2
 800210a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	3301      	adds	r3, #1
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	2b02      	cmp	r3, #2
 8002134:	dde4      	ble.n	8002100 <L3GD20_ReadXYZAngRate+0x114>
  }
}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	410c0000 	.word	0x410c0000
 8002144:	418c0000 	.word	0x418c0000
 8002148:	428c0000 	.word	0x428c0000

0800214c <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800215a:	f000 fc0f 	bl	800297c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	461a      	mov	r2, r3
 8002166:	2120      	movs	r1, #32
 8002168:	2032      	movs	r0, #50	; 0x32
 800216a:	f000 fc5f 	bl	8002a2c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	461a      	mov	r2, r3
 8002176:	2123      	movs	r1, #35	; 0x23
 8002178:	2032      	movs	r0, #50	; 0x32
 800217a:	f000 fc57 	bl	8002a2c <COMPASSACCELERO_IO_Write>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800219a:	2300      	movs	r3, #0
 800219c:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800219e:	f000 fbed 	bl	800297c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80021a2:	210f      	movs	r1, #15
 80021a4:	2032      	movs	r0, #50	; 0x32
 80021a6:	f000 fc54 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80021ae:	79fb      	ldrb	r3, [r7, #7]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80021be:	2124      	movs	r1, #36	; 0x24
 80021c0:	2032      	movs	r0, #50	; 0x32
 80021c2:	f000 fc46 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021d0:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	461a      	mov	r2, r3
 80021d6:	2124      	movs	r1, #36	; 0x24
 80021d8:	2032      	movs	r0, #50	; 0x32
 80021da:	f000 fc27 	bl	8002a2c <COMPASSACCELERO_IO_Write>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80021f0:	2121      	movs	r1, #33	; 0x21
 80021f2:	2032      	movs	r0, #50	; 0x32
 80021f4:	f000 fc2d 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 80021f8:	4603      	mov	r3, r0
 80021fa:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	4313      	orrs	r3, r2
 800220a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	461a      	mov	r2, r3
 8002210:	2121      	movs	r1, #33	; 0x21
 8002212:	2032      	movs	r0, #50	; 0x32
 8002214:	f000 fc0a 	bl	8002a2c <COMPASSACCELERO_IO_Write>
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800222a:	2121      	movs	r1, #33	; 0x21
 800222c:	2032      	movs	r0, #50	; 0x32
 800222e:	f000 fc10 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 8002232:	4603      	mov	r3, r0
 8002234:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	f023 0308 	bic.w	r3, r3, #8
 800223c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	4313      	orrs	r3, r2
 8002244:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	461a      	mov	r2, r3
 800224a:	2121      	movs	r1, #33	; 0x21
 800224c:	2032      	movs	r0, #50	; 0x32
 800224e:	f000 fbed 	bl	8002a2c <COMPASSACCELERO_IO_Write>
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b088      	sub	sp, #32
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8002262:	2300      	movs	r3, #0
 8002264:	753b      	strb	r3, [r7, #20]
 8002266:	2300      	movs	r3, #0
 8002268:	757b      	strb	r3, [r7, #21]
  int8_t buffer[6];
  uint8_t i = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800226e:	2301      	movs	r3, #1
 8002270:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8002272:	2123      	movs	r1, #35	; 0x23
 8002274:	2032      	movs	r0, #50	; 0x32
 8002276:	f000 fbec 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 800227a:	4603      	mov	r3, r0
 800227c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800227e:	2124      	movs	r1, #36	; 0x24
 8002280:	2032      	movs	r0, #50	; 0x32
 8002282:	f000 fbe6 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 8002286:	4603      	mov	r3, r0
 8002288:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800228a:	2128      	movs	r1, #40	; 0x28
 800228c:	2032      	movs	r0, #50	; 0x32
 800228e:	f000 fbe0 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 8002292:	4603      	mov	r3, r0
 8002294:	b25b      	sxtb	r3, r3
 8002296:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8002298:	2129      	movs	r1, #41	; 0x29
 800229a:	2032      	movs	r0, #50	; 0x32
 800229c:	f000 fbd9 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 80022a0:	4603      	mov	r3, r0
 80022a2:	b25b      	sxtb	r3, r3
 80022a4:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80022a6:	212a      	movs	r1, #42	; 0x2a
 80022a8:	2032      	movs	r0, #50	; 0x32
 80022aa:	f000 fbd2 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 80022ae:	4603      	mov	r3, r0
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80022b4:	212b      	movs	r1, #43	; 0x2b
 80022b6:	2032      	movs	r0, #50	; 0x32
 80022b8:	f000 fbcb 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 80022bc:	4603      	mov	r3, r0
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	2032      	movs	r0, #50	; 0x32
 80022c6:	f000 fbc4 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 80022ca:	4603      	mov	r3, r0
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80022d0:	212d      	movs	r1, #45	; 0x2d
 80022d2:	2032      	movs	r0, #50	; 0x32
 80022d4:	f000 fbbd 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 80022d8:	4603      	mov	r3, r0
 80022da:	b25b      	sxtb	r3, r3
 80022dc:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80022de:	7d3b      	ldrb	r3, [r7, #20]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d126      	bne.n	8002336 <LSM303DLHC_AccReadXYZ+0xdc>
  {
    for(i=0; i<3; i++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	77fb      	strb	r3, [r7, #31]
 80022ec:	e01f      	b.n	800232e <LSM303DLHC_AccReadXYZ+0xd4>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80022ee:	7ffb      	ldrb	r3, [r7, #31]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	3301      	adds	r3, #1
 80022f4:	f107 0220 	add.w	r2, r7, #32
 80022f8:	4413      	add	r3, r2
 80022fa:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	b29a      	uxth	r2, r3
 8002304:	7ffb      	ldrb	r3, [r7, #31]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	f107 0120 	add.w	r1, r7, #32
 800230c:	440b      	add	r3, r1
 800230e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002312:	b29b      	uxth	r3, r3
 8002314:	4413      	add	r3, r2
 8002316:	b29a      	uxth	r2, r3
 8002318:	7ffb      	ldrb	r3, [r7, #31]
 800231a:	b212      	sxth	r2, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	f107 0120 	add.w	r1, r7, #32
 8002322:	440b      	add	r3, r1
 8002324:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8002328:	7ffb      	ldrb	r3, [r7, #31]
 800232a:	3301      	adds	r3, #1
 800232c:	77fb      	strb	r3, [r7, #31]
 800232e:	7ffb      	ldrb	r3, [r7, #31]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d9dc      	bls.n	80022ee <LSM303DLHC_AccReadXYZ+0x94>
 8002334:	e025      	b.n	8002382 <LSM303DLHC_AccReadXYZ+0x128>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8002336:	2300      	movs	r3, #0
 8002338:	77fb      	strb	r3, [r7, #31]
 800233a:	e01f      	b.n	800237c <LSM303DLHC_AccReadXYZ+0x122>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800233c:	7ffb      	ldrb	r3, [r7, #31]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	f107 0220 	add.w	r2, r7, #32
 8002344:	4413      	add	r3, r2
 8002346:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800234a:	b29b      	uxth	r3, r3
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	b29a      	uxth	r2, r3
 8002350:	7ffb      	ldrb	r3, [r7, #31]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	3301      	adds	r3, #1
 8002356:	f107 0120 	add.w	r1, r7, #32
 800235a:	440b      	add	r3, r1
 800235c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002360:	b29b      	uxth	r3, r3
 8002362:	4413      	add	r3, r2
 8002364:	b29a      	uxth	r2, r3
 8002366:	7ffb      	ldrb	r3, [r7, #31]
 8002368:	b212      	sxth	r2, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	f107 0120 	add.w	r1, r7, #32
 8002370:	440b      	add	r3, r1
 8002372:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8002376:	7ffb      	ldrb	r3, [r7, #31]
 8002378:	3301      	adds	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
 800237c:	7ffb      	ldrb	r3, [r7, #31]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d9dc      	bls.n	800233c <LSM303DLHC_AccReadXYZ+0xe2>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8002382:	7d3b      	ldrb	r3, [r7, #20]
 8002384:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002388:	2b10      	cmp	r3, #16
 800238a:	d00c      	beq.n	80023a6 <LSM303DLHC_AccReadXYZ+0x14c>
 800238c:	2b10      	cmp	r3, #16
 800238e:	dc02      	bgt.n	8002396 <LSM303DLHC_AccReadXYZ+0x13c>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <LSM303DLHC_AccReadXYZ+0x146>
 8002394:	e010      	b.n	80023b8 <LSM303DLHC_AccReadXYZ+0x15e>
 8002396:	2b20      	cmp	r3, #32
 8002398:	d008      	beq.n	80023ac <LSM303DLHC_AccReadXYZ+0x152>
 800239a:	2b30      	cmp	r3, #48	; 0x30
 800239c:	d009      	beq.n	80023b2 <LSM303DLHC_AccReadXYZ+0x158>
 800239e:	e00b      	b.n	80023b8 <LSM303DLHC_AccReadXYZ+0x15e>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80023a0:	2301      	movs	r3, #1
 80023a2:	77bb      	strb	r3, [r7, #30]
    break;
 80023a4:	e008      	b.n	80023b8 <LSM303DLHC_AccReadXYZ+0x15e>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80023a6:	2302      	movs	r3, #2
 80023a8:	77bb      	strb	r3, [r7, #30]
    break;
 80023aa:	e005      	b.n	80023b8 <LSM303DLHC_AccReadXYZ+0x15e>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80023ac:	2304      	movs	r3, #4
 80023ae:	77bb      	strb	r3, [r7, #30]
    break;
 80023b0:	e002      	b.n	80023b8 <LSM303DLHC_AccReadXYZ+0x15e>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80023b2:	230c      	movs	r3, #12
 80023b4:	77bb      	strb	r3, [r7, #30]
    break;
 80023b6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	77fb      	strb	r3, [r7, #31]
 80023bc:	e018      	b.n	80023f0 <LSM303DLHC_AccReadXYZ+0x196>
  {
    pData[i]=(pnRawData[i] * sensitivity)/16;
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	f107 0220 	add.w	r2, r7, #32
 80023c6:	4413      	add	r3, r2
 80023c8:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80023cc:	461a      	mov	r2, r3
 80023ce:	7fbb      	ldrb	r3, [r7, #30]
 80023d0:	fb03 f302 	mul.w	r3, r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da00      	bge.n	80023da <LSM303DLHC_AccReadXYZ+0x180>
 80023d8:	330f      	adds	r3, #15
 80023da:	111b      	asrs	r3, r3, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	7ffb      	ldrb	r3, [r7, #31]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	b20a      	sxth	r2, r1
 80023e8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
 80023ec:	3301      	adds	r3, #1
 80023ee:	77fb      	strb	r3, [r7, #31]
 80023f0:	7ffb      	ldrb	r3, [r7, #31]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d9e3      	bls.n	80023be <LSM303DLHC_AccReadXYZ+0x164>
  }
}
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800240c:	2121      	movs	r1, #33	; 0x21
 800240e:	2032      	movs	r0, #50	; 0x32
 8002410:	f000 fb1f 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	f023 0304 	bic.w	r3, r3, #4
 800241e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	4313      	orrs	r3, r2
 8002426:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	461a      	mov	r2, r3
 800242c:	2121      	movs	r1, #33	; 0x21
 800242e:	2032      	movs	r0, #50	; 0x32
 8002430:	f000 fafc 	bl	8002a2c <COMPASSACCELERO_IO_Write>
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800244a:	2122      	movs	r1, #34	; 0x22
 800244c:	2032      	movs	r0, #50	; 0x32
 800244e:	f000 fb00 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 8002452:	4603      	mov	r3, r0
 8002454:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	4313      	orrs	r3, r2
 800245c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	461a      	mov	r2, r3
 8002462:	2122      	movs	r1, #34	; 0x22
 8002464:	2032      	movs	r0, #50	; 0x32
 8002466:	f000 fae1 	bl	8002a2c <COMPASSACCELERO_IO_Write>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8002480:	2138      	movs	r1, #56	; 0x38
 8002482:	2032      	movs	r0, #50	; 0x32
 8002484:	f000 fae5 	bl	8002a52 <COMPASSACCELERO_IO_Read>
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	4313      	orrs	r3, r2
 8002492:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	461a      	mov	r2, r3
 8002498:	2138      	movs	r1, #56	; 0x38
 800249a:	2032      	movs	r0, #50	; 0x32
 800249c:	f000 fac6 	bl	8002a2c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80024a0:	230a      	movs	r3, #10
 80024a2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	461a      	mov	r2, r3
 80024a8:	213a      	movs	r1, #58	; 0x3a
 80024aa:	2032      	movs	r0, #50	; 0x32
 80024ac:	f000 fabe 	bl	8002a2c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80024b0:	2305      	movs	r3, #5
 80024b2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	461a      	mov	r2, r3
 80024b8:	213b      	movs	r1, #59	; 0x3b
 80024ba:	2032      	movs	r0, #50	; 0x32
 80024bc:	f000 fab6 	bl	8002a2c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	461a      	mov	r2, r3
 80024c4:	213c      	movs	r1, #60	; 0x3c
 80024c6:	2032      	movs	r0, #50	; 0x32
 80024c8:	f000 fab0 	bl	8002a2c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80024cc:	2332      	movs	r3, #50	; 0x32
 80024ce:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	461a      	mov	r2, r3
 80024d4:	213d      	movs	r1, #61	; 0x3d
 80024d6:	2032      	movs	r0, #50	; 0x32
 80024d8:	f000 faa8 	bl	8002a2c <COMPASSACCELERO_IO_Write>
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80024e8:	f000 fa70 	bl	80029cc <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80024ec:	2080      	movs	r0, #128	; 0x80
 80024ee:	f7ff ffa5 	bl	800243c <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80024f2:	2004      	movs	r0, #4
 80024f4:	f7ff ff83 	bl	80023fe <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80024f8:	2010      	movs	r0, #16
 80024fa:	f7ff ffba 	bl	8002472 <LSM303DLHC_AccClickITEnable>
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <I2Cx_Init>:
  * @brief  I2Cx Bus initialization.
  * @param  None
  * @retval None
  */
static void I2Cx_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002508:	4814      	ldr	r0, [pc, #80]	; (800255c <I2Cx_Init+0x58>)
 800250a:	f001 fc73 	bl	8003df4 <HAL_I2C_GetState>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d121      	bne.n	8002558 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <I2Cx_Init+0x58>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <I2Cx_Init+0x5c>)
 8002518:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <I2Cx_Init+0x58>)
 800251c:	2243      	movs	r2, #67	; 0x43
 800251e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <I2Cx_Init+0x58>)
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <I2Cx_Init+0x60>)
 8002524:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <I2Cx_Init+0x58>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <I2Cx_Init+0x58>)
 800252e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002532:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <I2Cx_Init+0x58>)
 8002536:	2200      	movs	r2, #0
 8002538:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <I2Cx_Init+0x58>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <I2Cx_Init+0x58>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <I2Cx_Init+0x58>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <I2Cx_Init+0x58>)
 800254e:	f000 f86b 	bl	8002628 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002552:	4802      	ldr	r0, [pc, #8]	; (800255c <I2Cx_Init+0x58>)
 8002554:	f000 ffc6 	bl	80034e4 <HAL_I2C_Init>
  }
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200003e4 	.word	0x200003e4
 8002560:	40005400 	.word	0x40005400
 8002564:	000186a0 	.word	0x000186a0

08002568 <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af04      	add	r7, sp, #16
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
 8002572:	460b      	mov	r3, r1
 8002574:	717b      	strb	r3, [r7, #5]
 8002576:	4613      	mov	r3, r2
 8002578:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800257e:	797b      	ldrb	r3, [r7, #5]
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <I2Cx_WriteData+0x48>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	88f9      	ldrh	r1, [r7, #6]
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	2301      	movs	r3, #1
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2301      	movs	r3, #1
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <I2Cx_WriteData+0x4c>)
 8002596:	f001 f90d 	bl	80037b4 <HAL_I2C_Mem_Write>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80025a4:	f000 f834 	bl	8002610 <I2Cx_Error>
  }
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	2000006c 	.word	0x2000006c
 80025b4:	200003e4 	.word	0x200003e4

080025b8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af04      	add	r7, sp, #16
 80025be:	4603      	mov	r3, r0
 80025c0:	460a      	mov	r2, r1
 80025c2:	80fb      	strh	r3, [r7, #6]
 80025c4:	4613      	mov	r3, r2
 80025c6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80025d0:	797b      	ldrb	r3, [r7, #5]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <I2Cx_ReadData+0x50>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	88f9      	ldrh	r1, [r7, #6]
 80025da:	9302      	str	r3, [sp, #8]
 80025dc:	2301      	movs	r3, #1
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	f107 030e 	add.w	r3, r7, #14
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2301      	movs	r3, #1
 80025e8:	4808      	ldr	r0, [pc, #32]	; (800260c <I2Cx_ReadData+0x54>)
 80025ea:	f001 f9dd 	bl	80039a8 <HAL_I2C_Mem_Read>
 80025ee:	4603      	mov	r3, r0
 80025f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80025f8:	f000 f80a 	bl	8002610 <I2Cx_Error>
  }
  return value;
 80025fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000006c 	.word	0x2000006c
 800260c:	200003e4 	.word	0x200003e4

08002610 <I2Cx_Error>:
  * @brief  I2Cx error treatment function.
  * @param  None
  * @retval None
  */
static void I2Cx_Error(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <I2Cx_Error+0x14>)
 8002616:	f001 f89d 	bl	8003754 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800261a:	f7ff ff73 	bl	8002504 <I2Cx_Init>
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200003e4 	.word	0x200003e4

08002628 <I2Cx_MspInit>:
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	4b25      	ldr	r3, [pc, #148]	; (80026cc <I2Cx_MspInit+0xa4>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	4a24      	ldr	r2, [pc, #144]	; (80026cc <I2Cx_MspInit+0xa4>)
 800263a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800263e:	6413      	str	r3, [r2, #64]	; 0x40
 8002640:	4b22      	ldr	r3, [pc, #136]	; (80026cc <I2Cx_MspInit+0xa4>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <I2Cx_MspInit+0xa4>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <I2Cx_MspInit+0xa4>)
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	6313      	str	r3, [r2, #48]	; 0x30
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <I2Cx_MspInit+0xa4>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8002668:	f44f 7310 	mov.w	r3, #576	; 0x240
 800266c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800266e:	2312      	movs	r3, #18
 8002670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002676:	2302      	movs	r3, #2
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800267a:	2304      	movs	r3, #4
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4812      	ldr	r0, [pc, #72]	; (80026d0 <I2Cx_MspInit+0xa8>)
 8002686:	f000 fcaf 	bl	8002fe8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <I2Cx_MspInit+0xa4>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <I2Cx_MspInit+0xa4>)
 8002690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002694:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <I2Cx_MspInit+0xa4>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <I2Cx_MspInit+0xa4>)
 800269c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026a0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	201f      	movs	r0, #31
 80026a8:	f000 fc67 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80026ac:	201f      	movs	r0, #31
 80026ae:	f000 fc80 	bl	8002fb2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2020      	movs	r0, #32
 80026b8:	f000 fc5f 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80026bc:	2020      	movs	r0, #32
 80026be:	f000 fc78 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020400 	.word	0x40020400

080026d4 <SPIx_Init>:
  * @brief  SPIx Bus initialization.
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80026d8:	4819      	ldr	r0, [pc, #100]	; (8002740 <SPIx_Init+0x6c>)
 80026da:	f004 fd4b 	bl	8007174 <HAL_SPI_GetState>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d12b      	bne.n	800273c <SPIx_Init+0x68>
  {
    /* SPI Configuration */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <SPIx_Init+0x6c>)
 80026e6:	4a17      	ldr	r2, [pc, #92]	; (8002744 <SPIx_Init+0x70>)
 80026e8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       L3GD20 SPI interface max baudrate is 10MHz for write/read
       PCLK2 frequency is set to 90 MHz 
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <SPIx_Init+0x6c>)
 80026ec:	2210      	movs	r2, #16
 80026ee:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <SPIx_Init+0x6c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <SPIx_Init+0x6c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <SPIx_Init+0x6c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <SPIx_Init+0x6c>)
 8002704:	2200      	movs	r2, #0
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <SPIx_Init+0x6c>)
 800270a:	2207      	movs	r2, #7
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <SPIx_Init+0x6c>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <SPIx_Init+0x6c>)
 8002716:	2200      	movs	r2, #0
 8002718:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <SPIx_Init+0x6c>)
 800271c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002720:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <SPIx_Init+0x6c>)
 8002724:	2200      	movs	r2, #0
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SPIx_Init+0x6c>)
 800272a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800272e:	605a      	str	r2, [r3, #4]
    
    SPIx_MspInit(&SpiHandle);
 8002730:	4803      	ldr	r0, [pc, #12]	; (8002740 <SPIx_Init+0x6c>)
 8002732:	f000 f835 	bl	80027a0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002736:	4802      	ldr	r0, [pc, #8]	; (8002740 <SPIx_Init+0x6c>)
 8002738:	f004 faee 	bl	8006d18 <HAL_SPI_Init>
  }
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000438 	.word	0x20000438
 8002744:	40013000 	.word	0x40013000

08002748 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af02      	add	r7, sp, #8
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <SPIx_WriteRead+0x38>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f107 020f 	add.w	r2, r7, #15
 800275e:	1df9      	adds	r1, r7, #7
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2301      	movs	r3, #1
 8002764:	4807      	ldr	r0, [pc, #28]	; (8002784 <SPIx_WriteRead+0x3c>)
 8002766:	f004 fb63 	bl	8006e30 <HAL_SPI_TransmitReceive>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002770:	f000 f80a 	bl	8002788 <SPIx_Error>
  }
  
  return receivedbyte;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000070 	.word	0x20000070
 8002784:	20000438 	.word	0x20000438

08002788 <SPIx_Error>:
  * @brief  SPIx error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error (void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800278c:	4803      	ldr	r0, [pc, #12]	; (800279c <SPIx_Error+0x14>)
 800278e:	f004 fb27 	bl	8006de0 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 8002792:	f7ff ff9f 	bl	80026d4 <SPIx_Init>
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000438 	.word	0x20000438

080027a0 <SPIx_MspInit>:
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;
  
  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <SPIx_MspInit+0x68>)
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	4a15      	ldr	r2, [pc, #84]	; (8002808 <SPIx_MspInit+0x68>)
 80027b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027b6:	6453      	str	r3, [r2, #68]	; 0x44
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <SPIx_MspInit+0x68>)
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
  
  /* Enable SPIx GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <SPIx_MspInit+0x68>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <SPIx_MspInit+0x68>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6313      	str	r3, [r2, #48]	; 0x30
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <SPIx_MspInit+0x68>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80027e0:	23e0      	movs	r3, #224	; 0xe0
 80027e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80027ec:	2301      	movs	r3, #1
 80027ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80027f0:	2305      	movs	r3, #5
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4804      	ldr	r0, [pc, #16]	; (800280c <SPIx_MspInit+0x6c>)
 80027fc:	f000 fbf4 	bl	8002fe8 <HAL_GPIO_Init>
}
 8002800:	bf00      	nop
 8002802:	3728      	adds	r7, #40	; 0x28
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000

08002810 <GYRO_IO_Init>:
  * @brief  Configures the GYRO SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <GYRO_IO_Init+0x8c>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a1f      	ldr	r2, [pc, #124]	; (800289c <GYRO_IO_Init+0x8c>)
 8002820:	f043 0310 	orr.w	r3, r3, #16
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <GYRO_IO_Init+0x8c>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002832:	2308      	movs	r3, #8
 8002834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002836:	2301      	movs	r3, #1
 8002838:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	4619      	mov	r1, r3
 8002848:	4815      	ldr	r0, [pc, #84]	; (80028a0 <GYRO_IO_Init+0x90>)
 800284a:	f000 fbcd 	bl	8002fe8 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800284e:	2201      	movs	r2, #1
 8002850:	2108      	movs	r1, #8
 8002852:	4813      	ldr	r0, [pc, #76]	; (80028a0 <GYRO_IO_Init+0x90>)
 8002854:	f000 fe2c 	bl	80034b0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <GYRO_IO_Init+0x8c>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	4a0e      	ldr	r2, [pc, #56]	; (800289c <GYRO_IO_Init+0x8c>)
 8002862:	f043 0310 	orr.w	r3, r3, #16
 8002866:	6313      	str	r3, [r2, #48]	; 0x30
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <GYRO_IO_Init+0x8c>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002874:	2303      	movs	r3, #3
 8002876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800287c:	2302      	movs	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	4619      	mov	r1, r3
 800288a:	4805      	ldr	r0, [pc, #20]	; (80028a0 <GYRO_IO_Init+0x90>)
 800288c:	f000 fbac 	bl	8002fe8 <HAL_GPIO_Init>
  
  SPIx_Init();
 8002890:	f7ff ff20 	bl	80026d4 <SPIx_Init>
}
 8002894:	bf00      	nop
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	40021000 	.word	0x40021000

080028a4 <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
 80028b0:	4613      	mov	r3, r2
 80028b2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80028b4:	883b      	ldrh	r3, [r7, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d903      	bls.n	80028c2 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80028c2:	2200      	movs	r2, #0
 80028c4:	2108      	movs	r1, #8
 80028c6:	480f      	ldr	r0, [pc, #60]	; (8002904 <GYRO_IO_Write+0x60>)
 80028c8:	f000 fdf2 	bl	80034b0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff3a 	bl	8002748 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80028d4:	e00a      	b.n	80028ec <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff ff34 	bl	8002748 <SPIx_WriteRead>
    NumByteToWrite--;
 80028e0:	883b      	ldrh	r3, [r7, #0]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3301      	adds	r3, #1
 80028ea:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80028ec:	883b      	ldrh	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f1      	bne.n	80028d6 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80028f2:	2201      	movs	r2, #1
 80028f4:	2108      	movs	r1, #8
 80028f6:	4803      	ldr	r0, [pc, #12]	; (8002904 <GYRO_IO_Write+0x60>)
 80028f8:	f000 fdda 	bl	80034b0 <HAL_GPIO_WritePin>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000

08002908 <GYRO_IO_Read>:
  * @param  ReadAddr: GYRO's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the GYRO.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
 8002914:	4613      	mov	r3, r2
 8002916:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002918:	883b      	ldrh	r3, [r7, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d904      	bls.n	8002928 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002924:	70fb      	strb	r3, [r7, #3]
 8002926:	e003      	b.n	8002930 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800292e:	70fb      	strb	r3, [r7, #3]
  }
  
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002930:	2200      	movs	r2, #0
 8002932:	2108      	movs	r1, #8
 8002934:	4810      	ldr	r0, [pc, #64]	; (8002978 <GYRO_IO_Read+0x70>)
 8002936:	f000 fdbb 	bl	80034b0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff03 	bl	8002748 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002942:	e00c      	b.n	800295e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYRO (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002944:	2000      	movs	r0, #0
 8002946:	f7ff feff 	bl	8002748 <SPIx_WriteRead>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002952:	883b      	ldrh	r3, [r7, #0]
 8002954:	3b01      	subs	r3, #1
 8002956:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3301      	adds	r3, #1
 800295c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800295e:	883b      	ldrh	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ef      	bne.n	8002944 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002964:	2201      	movs	r2, #1
 8002966:	2108      	movs	r1, #8
 8002968:	4803      	ldr	r0, [pc, #12]	; (8002978 <GYRO_IO_Read+0x70>)
 800296a:	f000 fda1 	bl	80034b0 <HAL_GPIO_WritePin>
}  
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <COMPASSACCELERO_IO_Init>:
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <COMPASSACCELERO_IO_Init+0x48>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <COMPASSACCELERO_IO_Init+0x48>)
 800298c:	f043 0310 	orr.w	r3, r3, #16
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <COMPASSACCELERO_IO_Init+0x48>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800299e:	2304      	movs	r3, #4
 80029a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80029aa:	2302      	movs	r3, #2
 80029ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4805      	ldr	r0, [pc, #20]	; (80029c8 <COMPASSACCELERO_IO_Init+0x4c>)
 80029b4:	f000 fb18 	bl	8002fe8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80029b8:	f7ff fda4 	bl	8002504 <I2Cx_Init>
}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40021000 	.word	0x40021000

080029cc <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80029dc:	f043 0310 	orr.w	r3, r3, #16
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80029ee:	2330      	movs	r3, #48	; 0x30
 80029f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80029f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80029f6:	2302      	movs	r3, #2
 80029f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4809      	ldr	r0, [pc, #36]	; (8002a28 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8002a04:	f000 faf0 	bl	8002fe8 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the highest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	200a      	movs	r0, #10
 8002a0e:	f000 fab4 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002a12:	200a      	movs	r0, #10
 8002a14:	f000 facd 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	10110000 	.word	0x10110000
 8002a28:	40021000 	.word	0x40021000

08002a2c <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
  * @retval None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
 8002a36:	460b      	mov	r3, r1
 8002a38:	717b      	strb	r3, [r7, #5]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8002a3e:	793a      	ldrb	r2, [r7, #4]
 8002a40:	7979      	ldrb	r1, [r7, #5]
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fd8f 	bl	8002568 <I2Cx_WriteData>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	460a      	mov	r2, r1
 8002a5c:	80fb      	strh	r3, [r7, #6]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002a62:	797a      	ldrb	r2, [r7, #5]
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fda5 	bl	80025b8 <I2Cx_ReadData>
 8002a6e:	4603      	mov	r3, r0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <BSP_ACCELERO_Init>:
  * @brief  Set Accelerometer Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002a82:	2300      	movs	r3, #0
 8002a84:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure = {0,0,0,0};
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	809a      	strh	r2, [r3, #4]
  
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8002a8e:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <BSP_ACCELERO_Init+0xd0>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4798      	blx	r3
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b33      	cmp	r3, #51	; 0x33
 8002a98:	d14f      	bne.n	8002b3a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the Accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <BSP_ACCELERO_Init+0xd4>)
 8002a9c:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <BSP_ACCELERO_Init+0xd0>)
 8002a9e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Accelerometer structure */
    LSM303DLHC_InitStructure.Power_Mode = LSM303DLHC_NORMAL_MODE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	733b      	strb	r3, [r7, #12]
    LSM303DLHC_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002aa4:	2340      	movs	r3, #64	; 0x40
 8002aa6:	737b      	strb	r3, [r7, #13]
    LSM303DLHC_InitStructure.Axes_Enable = LSM303DLHC_AXES_ENABLE;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	73bb      	strb	r3, [r7, #14]
    LSM303DLHC_InitStructure.AccFull_Scale = LSM303DLHC_FULLSCALE_2G;
 8002aac:	2300      	movs	r3, #0
 8002aae:	74bb      	strb	r3, [r7, #18]
    LSM303DLHC_InitStructure.BlockData_Update = LSM303DLHC_BlockUpdate_Continous;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	743b      	strb	r3, [r7, #16]
    LSM303DLHC_InitStructure.Endianness = LSM303DLHC_BLE_LSB;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	747b      	strb	r3, [r7, #17]
    LSM303DLHC_InitStructure.High_Resolution = LSM303DLHC_HR_ENABLE;
 8002ab8:	2308      	movs	r3, #8
 8002aba:	73fb      	strb	r3, [r7, #15]
    
    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 8002abc:	7b3a      	ldrb	r2, [r7, #12]
 8002abe:	7b7b      	ldrb	r3, [r7, #13]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b2da      	uxtb	r2, r3
                       LSM303DLHC_InitStructure.Axes_Enable);
 8002ac4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	8abb      	ldrh	r3, [r7, #20]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	82bb      	strh	r3, [r7, #20]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 8002ad2:	7c3a      	ldrb	r2, [r7, #16]
 8002ad4:	7c7b      	ldrb	r3, [r7, #17]
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	7cbb      	ldrb	r3, [r7, #18]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	021b      	lsls	r3, r3, #8
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 8002ae8:	b21a      	sxth	r2, r3
 8002aea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	b21b      	sxth	r3, r3
 8002af2:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the Accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <BSP_ACCELERO_Init+0xd4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	8aba      	ldrh	r2, [r7, #20]
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
    
    /* Fill the Accelerometer LPF structure */
    LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection =LSM303DLHC_HPM_NORMAL_MODE;
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	713b      	strb	r3, [r7, #4]
    LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002b04:	2310      	movs	r3, #16
 8002b06:	717b      	strb	r3, [r7, #5]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI1 = LSM303DLHC_HPF_AOI1_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	71bb      	strb	r3, [r7, #6]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI2 = LSM303DLHC_HPF_AOI2_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	71fb      	strb	r3, [r7, #7]
    
    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002b10:	793a      	ldrb	r2, [r7, #4]
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
 8002b12:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002b14:	4313      	orrs	r3, r2
 8002b16:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
 8002b18:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002b20:	4313      	orrs	r3, r2
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	82bb      	strh	r3, [r7, #20]

    /* Configure the Accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <BSP_ACCELERO_Init+0xd4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	8aba      	ldrh	r2, [r7, #20]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	4610      	mov	r0, r2
 8002b32:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	75fb      	strb	r3, [r7, #23]
 8002b38:	e001      	b.n	8002b3e <BSP_ACCELERO_Init+0xc6>
  }
  else
  {
    ret = ACCELERO_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000038 	.word	0x20000038
 8002b4c:	20000490 	.word	0x20000490

08002b50 <BSP_ACCELERO_GetXYZ>:
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	81fb      	strh	r3, [r7, #14]
  
  if(AccelerometerDrv->GetXYZ!= NULL)
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <BSP_ACCELERO_GetXYZ+0x50>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d018      	beq.n	8002b98 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <BSP_ACCELERO_GetXYZ+0x50>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <BSP_ACCELERO_GetXYZ+0x50>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <BSP_ACCELERO_GetXYZ+0x54>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10e      	bne.n	8002b98 <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	801a      	strh	r2, [r3, #0]
      
      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8002b8a:	89fb      	ldrh	r3, [r7, #14]
 8002b8c:	425b      	negs	r3, r3
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3302      	adds	r3, #2
 8002b94:	b212      	sxth	r2, r2
 8002b96:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000490 	.word	0x20000490
 8002ba4:	20000038 	.word	0x20000038

08002ba8 <BSP_GYRO_Init>:
  * @brief  Set Gyroscope Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0,0};
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	703b      	strb	r3, [r7, #0]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	707b      	strb	r3, [r7, #1]
 
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002bbe:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <BSP_GYRO_Init+0xc4>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4798      	blx	r3
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2bd3      	cmp	r3, #211	; 0xd3
 8002bc8:	d005      	beq.n	8002bd6 <BSP_GYRO_Init+0x2e>
 8002bca:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <BSP_GYRO_Init+0xc4>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4798      	blx	r3
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2bd5      	cmp	r3, #213	; 0xd5
 8002bd4:	d145      	bne.n	8002c62 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the Gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <BSP_GYRO_Init+0xc8>)
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <BSP_GYRO_Init+0xc4>)
 8002bda:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Gyroscope structure */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8002bdc:	2308      	movs	r3, #8
 8002bde:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8002be0:	2300      	movs	r3, #0
 8002be2:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8002be4:	2307      	movs	r3, #7
 8002be6:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8002be8:	2330      	movs	r3, #48	; 0x30
 8002bea:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002bec:	2300      	movs	r3, #0
 8002bee:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 8002bf4:	2310      	movs	r3, #16
 8002bf6:	72bb      	strb	r3, [r7, #10]
  
    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002bf8:	793a      	ldrb	r2, [r7, #4]
 8002bfa:	797b      	ldrb	r3, [r7, #5]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002c00:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002c06:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	81bb      	strh	r3, [r7, #12]
  
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002c0e:	7a3a      	ldrb	r2, [r7, #8]
 8002c10:	7a7b      	ldrb	r3, [r7, #9]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8002c16:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	89bb      	ldrh	r3, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	81bb      	strh	r3, [r7, #12]

    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->Init(ctrl);
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <BSP_GYRO_Init+0xc8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	89ba      	ldrh	r2, [r7, #12]
 8002c30:	4610      	mov	r0, r2
 8002c32:	4798      	blx	r3
  
    L3GD20_FilterStructure.HighPassFilter_Mode_Selection =L3GD20_HPM_NORMAL_MODE_RES;
 8002c34:	2300      	movs	r3, #0
 8002c36:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	707b      	strb	r3, [r7, #1]
  
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8002c3c:	783a      	ldrb	r2, [r7, #0]
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));    
 8002c3e:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	81bb      	strh	r3, [r7, #12]
  
    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <BSP_GYRO_Init+0xc8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	89ba      	ldrh	r2, [r7, #12]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4610      	mov	r0, r2
 8002c52:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <BSP_GYRO_Init+0xc8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	2010      	movs	r0, #16
 8002c5c:	4798      	blx	r3
  
    ret = GYRO_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000004 	.word	0x20000004
 8002c70:	20000494 	.word	0x20000494

08002c74 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <BSP_GYRO_GetXYZ+0x24>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002c86:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <BSP_GYRO_GetXYZ+0x24>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
  }
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000494 	.word	0x20000494

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <HAL_Init+0x40>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_Init+0x40>)
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_Init+0x40>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f000 f94d 	bl	8002f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f000 f808 	bl	8002ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd0:	f7fe fdce 	bl	8001870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00

08002ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_InitTick+0x54>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_InitTick+0x58>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f965 	bl	8002fce <HAL_SYSTICK_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00e      	b.n	8002d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d80a      	bhi.n	8002d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f000 f92d 	bl	8002f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d20:	4a06      	ldr	r2, [pc, #24]	; (8002d3c <HAL_InitTick+0x5c>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000078 	.word	0x20000078
 8002d3c:	20000074 	.word	0x20000074

08002d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_IncTick+0x20>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_IncTick+0x24>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <HAL_IncTick+0x24>)
 8002d52:	6013      	str	r3, [r2, #0]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000078 	.word	0x20000078
 8002d64:	200005e0 	.word	0x200005e0

08002d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_GetTick+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	200005e0 	.word	0x200005e0

08002d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff ffee 	bl	8002d68 <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d005      	beq.n	8002da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_Delay+0x40>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002da6:	bf00      	nop
 8002da8:	f7ff ffde 	bl	8002d68 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d8f7      	bhi.n	8002da8 <HAL_Delay+0x28>
  {
  }
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000078 	.word	0x20000078

08002dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	60d3      	str	r3, [r2, #12]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <__NVIC_GetPriorityGrouping+0x18>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 0307 	and.w	r3, r3, #7
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	db0b      	blt.n	8002e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4907      	ldr	r1, [pc, #28]	; (8002e60 <__NVIC_EnableIRQ+0x38>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db0a      	blt.n	8002e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <__NVIC_SetPriority+0x4c>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	440b      	add	r3, r1
 8002e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e8c:	e00a      	b.n	8002ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4908      	ldr	r1, [pc, #32]	; (8002eb4 <__NVIC_SetPriority+0x50>)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	761a      	strb	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f1c3 0307 	rsb	r3, r3, #7
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf28      	it	cs
 8002ed6:	2304      	movcs	r3, #4
 8002ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d902      	bls.n	8002ee8 <NVIC_EncodePriority+0x30>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3b03      	subs	r3, #3
 8002ee6:	e000      	b.n	8002eea <NVIC_EncodePriority+0x32>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f00:	f04f 31ff 	mov.w	r1, #4294967295
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43d9      	mvns	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	4313      	orrs	r3, r2
         );
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3724      	adds	r7, #36	; 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f30:	d301      	bcc.n	8002f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00f      	b.n	8002f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <SysTick_Config+0x40>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3e:	210f      	movs	r1, #15
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	f7ff ff8e 	bl	8002e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <SysTick_Config+0x40>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <SysTick_Config+0x40>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010

08002f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff29 	bl	8002dc4 <__NVIC_SetPriorityGrouping>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f8c:	f7ff ff3e 	bl	8002e0c <__NVIC_GetPriorityGrouping>
 8002f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	6978      	ldr	r0, [r7, #20]
 8002f98:	f7ff ff8e 	bl	8002eb8 <NVIC_EncodePriority>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff5d 	bl	8002e64 <__NVIC_SetPriority>
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	4603      	mov	r3, r0
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff31 	bl	8002e28 <__NVIC_EnableIRQ>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffa2 	bl	8002f20 <SysTick_Config>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e159      	b.n	80032b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	f040 8148 	bne.w	80032b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d00b      	beq.n	8003042 <HAL_GPIO_Init+0x5a>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d007      	beq.n	8003042 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003036:	2b11      	cmp	r3, #17
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b12      	cmp	r3, #18
 8003040:	d130      	bne.n	80030a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003078:	2201      	movs	r2, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 0201 	and.w	r2, r3, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0xfc>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b12      	cmp	r3, #18
 80030e2:	d123      	bne.n	800312c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	08da      	lsrs	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3208      	adds	r2, #8
 80030ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	220f      	movs	r2, #15
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	08da      	lsrs	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	69b9      	ldr	r1, [r7, #24]
 8003128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a2 	beq.w	80032b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	4b56      	ldr	r3, [pc, #344]	; (80032cc <HAL_GPIO_Init+0x2e4>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4a55      	ldr	r2, [pc, #340]	; (80032cc <HAL_GPIO_Init+0x2e4>)
 8003178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317c:	6453      	str	r3, [r2, #68]	; 0x44
 800317e:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_GPIO_Init+0x2e4>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318a:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_GPIO_Init+0x2e8>)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	3302      	adds	r3, #2
 8003192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a48      	ldr	r2, [pc, #288]	; (80032d4 <HAL_GPIO_Init+0x2ec>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d019      	beq.n	80031ea <HAL_GPIO_Init+0x202>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a47      	ldr	r2, [pc, #284]	; (80032d8 <HAL_GPIO_Init+0x2f0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_GPIO_Init+0x1fe>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a46      	ldr	r2, [pc, #280]	; (80032dc <HAL_GPIO_Init+0x2f4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00d      	beq.n	80031e2 <HAL_GPIO_Init+0x1fa>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a45      	ldr	r2, [pc, #276]	; (80032e0 <HAL_GPIO_Init+0x2f8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <HAL_GPIO_Init+0x1f6>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a44      	ldr	r2, [pc, #272]	; (80032e4 <HAL_GPIO_Init+0x2fc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_GPIO_Init+0x1f2>
 80031d6:	2304      	movs	r3, #4
 80031d8:	e008      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031da:	2307      	movs	r3, #7
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031de:	2303      	movs	r3, #3
 80031e0:	e004      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_GPIO_Init+0x204>
 80031ea:	2300      	movs	r3, #0
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	f002 0203 	and.w	r2, r2, #3
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4093      	lsls	r3, r2
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031fc:	4934      	ldr	r1, [pc, #208]	; (80032d0 <HAL_GPIO_Init+0x2e8>)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <HAL_GPIO_Init+0x300>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800322e:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <HAL_GPIO_Init+0x300>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003234:	4b2c      	ldr	r3, [pc, #176]	; (80032e8 <HAL_GPIO_Init+0x300>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003258:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <HAL_GPIO_Init+0x300>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800325e:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_GPIO_Init+0x300>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003282:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <HAL_GPIO_Init+0x300>)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003288:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_GPIO_Init+0x300>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032ac:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <HAL_GPIO_Init+0x300>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3301      	adds	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2b0f      	cmp	r3, #15
 80032bc:	f67f aea2 	bls.w	8003004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	3724      	adds	r7, #36	; 0x24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40013800 	.word	0x40013800
 80032d4:	40020000 	.word	0x40020000
 80032d8:	40020400 	.word	0x40020400
 80032dc:	40020800 	.word	0x40020800
 80032e0:	40020c00 	.word	0x40020c00
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40013c00 	.word	0x40013c00

080032ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e0bb      	b.n	8003480 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003308:	2201      	movs	r2, #1
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	429a      	cmp	r2, r3
 8003320:	f040 80ab 	bne.w	800347a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003324:	4a5b      	ldr	r2, [pc, #364]	; (8003494 <HAL_GPIO_DeInit+0x1a8>)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	3302      	adds	r3, #2
 800332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003330:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	220f      	movs	r2, #15
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	4013      	ands	r3, r2
 8003344:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a53      	ldr	r2, [pc, #332]	; (8003498 <HAL_GPIO_DeInit+0x1ac>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d019      	beq.n	8003382 <HAL_GPIO_DeInit+0x96>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_GPIO_DeInit+0x1b0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_GPIO_DeInit+0x92>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a51      	ldr	r2, [pc, #324]	; (80034a0 <HAL_GPIO_DeInit+0x1b4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00d      	beq.n	800337a <HAL_GPIO_DeInit+0x8e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a50      	ldr	r2, [pc, #320]	; (80034a4 <HAL_GPIO_DeInit+0x1b8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <HAL_GPIO_DeInit+0x8a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4f      	ldr	r2, [pc, #316]	; (80034a8 <HAL_GPIO_DeInit+0x1bc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_GPIO_DeInit+0x86>
 800336e:	2304      	movs	r3, #4
 8003370:	e008      	b.n	8003384 <HAL_GPIO_DeInit+0x98>
 8003372:	2307      	movs	r3, #7
 8003374:	e006      	b.n	8003384 <HAL_GPIO_DeInit+0x98>
 8003376:	2303      	movs	r3, #3
 8003378:	e004      	b.n	8003384 <HAL_GPIO_DeInit+0x98>
 800337a:	2302      	movs	r3, #2
 800337c:	e002      	b.n	8003384 <HAL_GPIO_DeInit+0x98>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_GPIO_DeInit+0x98>
 8003382:	2300      	movs	r3, #0
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	f002 0203 	and.w	r2, r2, #3
 800338a:	0092      	lsls	r2, r2, #2
 800338c:	4093      	lsls	r3, r2
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	429a      	cmp	r2, r3
 8003392:	d132      	bne.n	80033fa <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003394:	4b45      	ldr	r3, [pc, #276]	; (80034ac <HAL_GPIO_DeInit+0x1c0>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43db      	mvns	r3, r3
 800339c:	4943      	ldr	r1, [pc, #268]	; (80034ac <HAL_GPIO_DeInit+0x1c0>)
 800339e:	4013      	ands	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80033a2:	4b42      	ldr	r3, [pc, #264]	; (80034ac <HAL_GPIO_DeInit+0x1c0>)
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	4940      	ldr	r1, [pc, #256]	; (80034ac <HAL_GPIO_DeInit+0x1c0>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80033b0:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <HAL_GPIO_DeInit+0x1c0>)
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	493c      	ldr	r1, [pc, #240]	; (80034ac <HAL_GPIO_DeInit+0x1c0>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80033be:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_GPIO_DeInit+0x1c0>)
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	4939      	ldr	r1, [pc, #228]	; (80034ac <HAL_GPIO_DeInit+0x1c0>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	220f      	movs	r2, #15
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80033dc:	4a2d      	ldr	r2, [pc, #180]	; (8003494 <HAL_GPIO_DeInit+0x1a8>)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	43da      	mvns	r2, r3
 80033ec:	4829      	ldr	r0, [pc, #164]	; (8003494 <HAL_GPIO_DeInit+0x1a8>)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	400a      	ands	r2, r1
 80033f4:	3302      	adds	r3, #2
 80033f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2103      	movs	r1, #3
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	401a      	ands	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	220f      	movs	r2, #15
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	08d2      	lsrs	r2, r2, #3
 8003430:	4019      	ands	r1, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2103      	movs	r1, #3
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	401a      	ands	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	2101      	movs	r1, #1
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	401a      	ands	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2103      	movs	r1, #3
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	401a      	ands	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3301      	adds	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b0f      	cmp	r3, #15
 8003484:	f67f af40 	bls.w	8003308 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40013800 	.word	0x40013800
 8003498:	40020000 	.word	0x40020000
 800349c:	40020400 	.word	0x40020400
 80034a0:	40020800 	.word	0x40020800
 80034a4:	40020c00 	.word	0x40020c00
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40013c00 	.word	0x40013c00

080034b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
 80034bc:	4613      	mov	r3, r2
 80034be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c0:	787b      	ldrb	r3, [r7, #1]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034cc:	e003      	b.n	80034d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	041a      	lsls	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	619a      	str	r2, [r3, #24]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e11f      	b.n	8003736 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fe f9d8 	bl	80018c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	; 0x24
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003548:	f003 fa84 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 800354c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a7b      	ldr	r2, [pc, #492]	; (8003740 <HAL_I2C_Init+0x25c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d807      	bhi.n	8003568 <HAL_I2C_Init+0x84>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a7a      	ldr	r2, [pc, #488]	; (8003744 <HAL_I2C_Init+0x260>)
 800355c:	4293      	cmp	r3, r2
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e006      	b.n	8003576 <HAL_I2C_Init+0x92>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a77      	ldr	r2, [pc, #476]	; (8003748 <HAL_I2C_Init+0x264>)
 800356c:	4293      	cmp	r3, r2
 800356e:	bf94      	ite	ls
 8003570:	2301      	movls	r3, #1
 8003572:	2300      	movhi	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0db      	b.n	8003736 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a72      	ldr	r2, [pc, #456]	; (800374c <HAL_I2C_Init+0x268>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0c9b      	lsrs	r3, r3, #18
 8003588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a64      	ldr	r2, [pc, #400]	; (8003740 <HAL_I2C_Init+0x25c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d802      	bhi.n	80035b8 <HAL_I2C_Init+0xd4>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3301      	adds	r3, #1
 80035b6:	e009      	b.n	80035cc <HAL_I2C_Init+0xe8>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	4a63      	ldr	r2, [pc, #396]	; (8003750 <HAL_I2C_Init+0x26c>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	3301      	adds	r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4956      	ldr	r1, [pc, #344]	; (8003740 <HAL_I2C_Init+0x25c>)
 80035e8:	428b      	cmp	r3, r1
 80035ea:	d80d      	bhi.n	8003608 <HAL_I2C_Init+0x124>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1e59      	subs	r1, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	2b04      	cmp	r3, #4
 8003602:	bf38      	it	cc
 8003604:	2304      	movcc	r3, #4
 8003606:	e04f      	b.n	80036a8 <HAL_I2C_Init+0x1c4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d111      	bne.n	8003634 <HAL_I2C_Init+0x150>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1e58      	subs	r0, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	440b      	add	r3, r1
 800361e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e012      	b.n	800365a <HAL_I2C_Init+0x176>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1e58      	subs	r0, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	0099      	lsls	r1, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	fbb0 f3f3 	udiv	r3, r0, r3
 800364a:	3301      	adds	r3, #1
 800364c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Init+0x17e>
 800365e:	2301      	movs	r3, #1
 8003660:	e022      	b.n	80036a8 <HAL_I2C_Init+0x1c4>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10e      	bne.n	8003688 <HAL_I2C_Init+0x1a4>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1e58      	subs	r0, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	440b      	add	r3, r1
 8003678:	fbb0 f3f3 	udiv	r3, r0, r3
 800367c:	3301      	adds	r3, #1
 800367e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003686:	e00f      	b.n	80036a8 <HAL_I2C_Init+0x1c4>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1e58      	subs	r0, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	0099      	lsls	r1, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	fbb0 f3f3 	udiv	r3, r0, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	6809      	ldr	r1, [r1, #0]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6911      	ldr	r1, [r2, #16]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	4311      	orrs	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	000186a0 	.word	0x000186a0
 8003744:	001e847f 	.word	0x001e847f
 8003748:	003d08ff 	.word	0x003d08ff
 800374c:	431bde83 	.word	0x431bde83
 8003750:	10624dd3 	.word	0x10624dd3

08003754 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e021      	b.n	80037aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe f8e6 	bl	8001950 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	817b      	strh	r3, [r7, #10]
 80037c6:	460b      	mov	r3, r1
 80037c8:	813b      	strh	r3, [r7, #8]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ce:	f7ff facb 	bl	8002d68 <HAL_GetTick>
 80037d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b20      	cmp	r3, #32
 80037de:	f040 80d9 	bne.w	8003994 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	2319      	movs	r3, #25
 80037e8:	2201      	movs	r2, #1
 80037ea:	496d      	ldr	r1, [pc, #436]	; (80039a0 <HAL_I2C_Mem_Write+0x1ec>)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fc8d 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
 80037fa:	e0cc      	b.n	8003996 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_I2C_Mem_Write+0x56>
 8003806:	2302      	movs	r3, #2
 8003808:	e0c5      	b.n	8003996 <HAL_I2C_Mem_Write+0x1e2>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b01      	cmp	r3, #1
 800381e:	d007      	beq.n	8003830 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2221      	movs	r2, #33	; 0x21
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a4d      	ldr	r2, [pc, #308]	; (80039a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003872:	88f8      	ldrh	r0, [r7, #6]
 8003874:	893a      	ldrh	r2, [r7, #8]
 8003876:	8979      	ldrh	r1, [r7, #10]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	4603      	mov	r3, r0
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fac4 	bl	8003e10 <I2C_RequestMemoryWrite>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d052      	beq.n	8003934 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e081      	b.n	8003996 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fd0e 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d107      	bne.n	80038ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06b      	b.n	8003996 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d11b      	bne.n	8003934 <HAL_I2C_Mem_Write+0x180>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d017      	beq.n	8003934 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1aa      	bne.n	8003892 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fcfa 	bl	800433a <I2C_WaitOnBTFFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	2b04      	cmp	r3, #4
 8003952:	d107      	bne.n	8003964 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e016      	b.n	8003996 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	00100002 	.word	0x00100002
 80039a4:	ffff0000 	.word	0xffff0000

080039a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	; 0x30
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	4608      	mov	r0, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	461a      	mov	r2, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	817b      	strh	r3, [r7, #10]
 80039ba:	460b      	mov	r3, r1
 80039bc:	813b      	strh	r3, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039c2:	f7ff f9d1 	bl	8002d68 <HAL_GetTick>
 80039c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	f040 8208 	bne.w	8003de6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2319      	movs	r3, #25
 80039dc:	2201      	movs	r2, #1
 80039de:	497b      	ldr	r1, [pc, #492]	; (8003bcc <HAL_I2C_Mem_Read+0x224>)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fb93 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
 80039ee:	e1fb      	b.n	8003de8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_I2C_Mem_Read+0x56>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e1f4      	b.n	8003de8 <HAL_I2C_Mem_Read+0x440>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d007      	beq.n	8003a24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2222      	movs	r2, #34	; 0x22
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2240      	movs	r2, #64	; 0x40
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a5b      	ldr	r2, [pc, #364]	; (8003bd0 <HAL_I2C_Mem_Read+0x228>)
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a66:	88f8      	ldrh	r0, [r7, #6]
 8003a68:	893a      	ldrh	r2, [r7, #8]
 8003a6a:	8979      	ldrh	r1, [r7, #10]
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	4603      	mov	r3, r0
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fa60 	bl	8003f3c <I2C_RequestMemoryRead>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e1b0      	b.n	8003de8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d113      	bne.n	8003ab6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	623b      	str	r3, [r7, #32]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	623b      	str	r3, [r7, #32]
 8003aa2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e184      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d11b      	bne.n	8003af6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e164      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d11b      	bne.n	8003b36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	e144      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b4c:	e138      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	f200 80f1 	bhi.w	8003d3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d123      	bne.n	8003ba8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fc29 	bl	80043bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e139      	b.n	8003de8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ba6:	e10b      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d14e      	bne.n	8003c4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4906      	ldr	r1, [pc, #24]	; (8003bd4 <HAL_I2C_Mem_Read+0x22c>)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 faa6 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e10e      	b.n	8003de8 <HAL_I2C_Mem_Read+0x440>
 8003bca:	bf00      	nop
 8003bcc:	00100002 	.word	0x00100002
 8003bd0:	ffff0000 	.word	0xffff0000
 8003bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c4c:	e0b8      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	2200      	movs	r2, #0
 8003c56:	4966      	ldr	r1, [pc, #408]	; (8003df0 <HAL_I2C_Mem_Read+0x448>)
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fa57 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0bf      	b.n	8003de8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	494f      	ldr	r1, [pc, #316]	; (8003df0 <HAL_I2C_Mem_Read+0x448>)
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fa29 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e091      	b.n	8003de8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d38:	e042      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fb3c 	bl	80043bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e04c      	b.n	8003de8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d118      	bne.n	8003dc0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f47f aec2 	bne.w	8003b4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e000      	b.n	8003de8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3728      	adds	r7, #40	; 0x28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	00010004 	.word	0x00010004

08003df4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	460b      	mov	r3, r1
 8003e24:	813b      	strh	r3, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f960 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e60:	d103      	bne.n	8003e6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e05f      	b.n	8003f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	492d      	ldr	r1, [pc, #180]	; (8003f38 <I2C_RequestMemoryWrite+0x128>)
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f998 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e04c      	b.n	8003f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eac:	6a39      	ldr	r1, [r7, #32]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fa02 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00d      	beq.n	8003ed6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d107      	bne.n	8003ed2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e02b      	b.n	8003f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003edc:	893b      	ldrh	r3, [r7, #8]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]
 8003ee6:	e021      	b.n	8003f2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee8:	893b      	ldrh	r3, [r7, #8]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef8:	6a39      	ldr	r1, [r7, #32]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f9dc 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d107      	bne.n	8003f1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e005      	b.n	8003f2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f22:	893b      	ldrh	r3, [r7, #8]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	00010002 	.word	0x00010002

08003f3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	817b      	strh	r3, [r7, #10]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	813b      	strh	r3, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f8c2 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9c:	d103      	bne.n	8003fa6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e0aa      	b.n	8004100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003faa:	897b      	ldrh	r3, [r7, #10]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	4952      	ldr	r1, [pc, #328]	; (8004108 <I2C_RequestMemoryRead+0x1cc>)
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f8fa 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e097      	b.n	8004100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe8:	6a39      	ldr	r1, [r7, #32]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f964 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00d      	beq.n	8004012 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d107      	bne.n	800400e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e076      	b.n	8004100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d105      	bne.n	8004024 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004018:	893b      	ldrh	r3, [r7, #8]
 800401a:	b2da      	uxtb	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	611a      	str	r2, [r3, #16]
 8004022:	e021      	b.n	8004068 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004024:	893b      	ldrh	r3, [r7, #8]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	b29b      	uxth	r3, r3
 800402a:	b2da      	uxtb	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004034:	6a39      	ldr	r1, [r7, #32]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f93e 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2b04      	cmp	r3, #4
 8004048:	d107      	bne.n	800405a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004058:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e050      	b.n	8004100 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800405e:	893b      	ldrh	r3, [r7, #8]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	6a39      	ldr	r1, [r7, #32]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f923 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	2b04      	cmp	r3, #4
 800407e:	d107      	bne.n	8004090 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e035      	b.n	8004100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f82b 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ca:	d103      	bne.n	80040d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e013      	b.n	8004100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040d8:	897b      	ldrh	r3, [r7, #10]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	6a3a      	ldr	r2, [r7, #32]
 80040ec:	4906      	ldr	r1, [pc, #24]	; (8004108 <I2C_RequestMemoryRead+0x1cc>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f863 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	00010002 	.word	0x00010002

0800410c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800411c:	e025      	b.n	800416a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d021      	beq.n	800416a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fe fe1f 	bl	8002d68 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d116      	bne.n	800416a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e023      	b.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10d      	bne.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	e00c      	b.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	43da      	mvns	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4013      	ands	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d0b6      	beq.n	800411e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041c8:	e051      	b.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d8:	d123      	bne.n	8004222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e046      	b.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d021      	beq.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fe fd9d 	bl	8002d68 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d116      	bne.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e020      	b.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10c      	bne.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e00b      	b.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	43da      	mvns	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d18d      	bne.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c4:	e02d      	b.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f8ce 	bl	8004468 <I2C_IsAcknowledgeFailed>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e02d      	b.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d021      	beq.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042de:	f7fe fd43 	bl	8002d68 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d116      	bne.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f043 0220 	orr.w	r2, r3, #32
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e007      	b.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b80      	cmp	r3, #128	; 0x80
 800432e:	d1ca      	bne.n	80042c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004346:	e02d      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f88d 	bl	8004468 <I2C_IsAcknowledgeFailed>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e02d      	b.n	80043b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d021      	beq.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004360:	f7fe fd02 	bl	8002d68 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d116      	bne.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e007      	b.n	80043b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d1ca      	bne.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043c8:	e042      	b.n	8004450 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d119      	bne.n	800440c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0210 	mvn.w	r2, #16
 80043e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e029      	b.n	8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440c:	f7fe fcac 	bl	8002d68 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	429a      	cmp	r2, r3
 800441a:	d302      	bcc.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d116      	bne.n	8004450 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e007      	b.n	8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445a:	2b40      	cmp	r3, #64	; 0x40
 800445c:	d1b5      	bne.n	80043ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447e:	d11b      	bne.n	80044b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	f043 0204 	orr.w	r2, r3, #4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e128      	b.n	800472c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a90      	ldr	r2, [pc, #576]	; (8004734 <HAL_I2S_Init+0x26c>)
 80044f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fd fa4d 	bl	8001994 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004510:	f023 030f 	bic.w	r3, r3, #15
 8004514:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2202      	movs	r2, #2
 800451c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d060      	beq.n	80045e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800452e:	2310      	movs	r3, #16
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e001      	b.n	8004538 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004534:	2320      	movs	r3, #32
 8004536:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b20      	cmp	r3, #32
 800453e:	d802      	bhi.n	8004546 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004546:	2001      	movs	r0, #1
 8004548:	f002 fb88 	bl	8006c5c <HAL_RCCEx_GetPeriphCLKFreq>
 800454c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004556:	d125      	bne.n	80045a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d010      	beq.n	8004582 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	fbb2 f2f3 	udiv	r2, r2, r3
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	3305      	adds	r3, #5
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e01f      	b.n	80045c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	fbb2 f2f3 	udiv	r2, r2, r3
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	461a      	mov	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	3305      	adds	r3, #5
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	e00e      	b.n	80045c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	3305      	adds	r3, #5
 80045c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4a5c      	ldr	r2, [pc, #368]	; (8004738 <HAL_I2S_Init+0x270>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e003      	b.n	80045f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80045e8:	2302      	movs	r3, #2
 80045ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d902      	bls.n	80045fc <HAL_I2S_Init+0x134>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2bff      	cmp	r3, #255	; 0xff
 80045fa:	d907      	bls.n	800460c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004600:	f043 0210 	orr.w	r2, r3, #16
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e08f      	b.n	800472c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	ea42 0103 	orr.w	r1, r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	430a      	orrs	r2, r1
 800461e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800462a:	f023 030f 	bic.w	r3, r3, #15
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6851      	ldr	r1, [r2, #4]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6892      	ldr	r2, [r2, #8]
 8004636:	4311      	orrs	r1, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68d2      	ldr	r2, [r2, #12]
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6992      	ldr	r2, [r2, #24]
 8004642:	430a      	orrs	r2, r1
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800464e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d161      	bne.n	800471c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a38      	ldr	r2, [pc, #224]	; (800473c <HAL_I2S_Init+0x274>)
 800465c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a37      	ldr	r2, [pc, #220]	; (8004740 <HAL_I2S_Init+0x278>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_I2S_Init+0x1a4>
 8004668:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_I2S_Init+0x27c>)
 800466a:	e001      	b.n	8004670 <HAL_I2S_Init+0x1a8>
 800466c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	4932      	ldr	r1, [pc, #200]	; (8004740 <HAL_I2S_Init+0x278>)
 8004678:	428a      	cmp	r2, r1
 800467a:	d101      	bne.n	8004680 <HAL_I2S_Init+0x1b8>
 800467c:	4a31      	ldr	r2, [pc, #196]	; (8004744 <HAL_I2S_Init+0x27c>)
 800467e:	e001      	b.n	8004684 <HAL_I2S_Init+0x1bc>
 8004680:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004684:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004688:	f023 030f 	bic.w	r3, r3, #15
 800468c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <HAL_I2S_Init+0x278>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d101      	bne.n	800469c <HAL_I2S_Init+0x1d4>
 8004698:	4b2a      	ldr	r3, [pc, #168]	; (8004744 <HAL_I2S_Init+0x27c>)
 800469a:	e001      	b.n	80046a0 <HAL_I2S_Init+0x1d8>
 800469c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a0:	2202      	movs	r2, #2
 80046a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a25      	ldr	r2, [pc, #148]	; (8004740 <HAL_I2S_Init+0x278>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <HAL_I2S_Init+0x1ea>
 80046ae:	4b25      	ldr	r3, [pc, #148]	; (8004744 <HAL_I2S_Init+0x27c>)
 80046b0:	e001      	b.n	80046b6 <HAL_I2S_Init+0x1ee>
 80046b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c2:	d003      	beq.n	80046cc <HAL_I2S_Init+0x204>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80046cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	e001      	b.n	80046d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	b299      	uxth	r1, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80046ee:	4303      	orrs	r3, r0
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	430b      	orrs	r3, r1
 80046f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80046f6:	4313      	orrs	r3, r2
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	897b      	ldrh	r3, [r7, #10]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004704:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <HAL_I2S_Init+0x278>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d101      	bne.n	8004714 <HAL_I2S_Init+0x24c>
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <HAL_I2S_Init+0x27c>)
 8004712:	e001      	b.n	8004718 <HAL_I2S_Init+0x250>
 8004714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004718:	897a      	ldrh	r2, [r7, #10]
 800471a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	0800483f 	.word	0x0800483f
 8004738:	cccccccd 	.word	0xcccccccd
 800473c:	08004955 	.word	0x08004955
 8004740:	40003800 	.word	0x40003800
 8004744:	40003400 	.word	0x40003400

08004748 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	881a      	ldrh	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	1c9a      	adds	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10e      	bne.n	80047d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ffb8 	bl	8004748 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	b292      	uxth	r2, r2
 80047f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	1c9a      	adds	r2, r3, #2
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10e      	bne.n	8004836 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004826:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ff93 	bl	800475c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b04      	cmp	r3, #4
 8004858:	d13a      	bne.n	80048d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	d109      	bne.n	8004878 <I2S_IRQHandler+0x3a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b40      	cmp	r3, #64	; 0x40
 8004870:	d102      	bne.n	8004878 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ffb4 	bl	80047e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d126      	bne.n	80048d0 <I2S_IRQHandler+0x92>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d11f      	bne.n	80048d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800489e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	f043 0202 	orr.w	r2, r3, #2
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff ff50 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d136      	bne.n	800494a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d109      	bne.n	80048fa <I2S_IRQHandler+0xbc>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d102      	bne.n	80048fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff45 	bl	8004784 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d122      	bne.n	800494a <I2S_IRQHandler+0x10c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d11b      	bne.n	800494a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004920:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	f043 0204 	orr.w	r2, r3, #4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ff13 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4aa2      	ldr	r2, [pc, #648]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800496e:	4ba2      	ldr	r3, [pc, #648]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004970:	e001      	b.n	8004976 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a9b      	ldr	r2, [pc, #620]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d101      	bne.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800498c:	4b9a      	ldr	r3, [pc, #616]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800498e:	e001      	b.n	8004994 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a0:	d004      	beq.n	80049ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f040 8099 	bne.w	8004ade <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d107      	bne.n	80049c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f925 	bl	8004c10 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f9c8 	bl	8004d70 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d13a      	bne.n	8004a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d035      	beq.n	8004a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a7e      	ldr	r2, [pc, #504]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80049fe:	4b7e      	ldr	r3, [pc, #504]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a00:	e001      	b.n	8004a06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4979      	ldr	r1, [pc, #484]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a0e:	428b      	cmp	r3, r1
 8004a10:	d101      	bne.n	8004a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a12:	4b79      	ldr	r3, [pc, #484]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a14:	e001      	b.n	8004a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f043 0202 	orr.w	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff fe88 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	f040 80be 	bne.w	8004be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80b8 	beq.w	8004be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a59      	ldr	r2, [pc, #356]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a92:	4b59      	ldr	r3, [pc, #356]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a94:	e001      	b.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4954      	ldr	r1, [pc, #336]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004aa2:	428b      	cmp	r3, r1
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004aa6:	4b54      	ldr	r3, [pc, #336]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004aa8:	e001      	b.n	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004aaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ab2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f043 0204 	orr.w	r2, r3, #4
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fe4a 	bl	8004770 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004adc:	e084      	b.n	8004be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d107      	bne.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8be 	bl	8004c74 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d107      	bne.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8fd 	bl	8004d0c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d12f      	bne.n	8004b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d02a      	beq.n	8004b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b34:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2e      	ldr	r2, [pc, #184]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d101      	bne.n	8004b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004b40:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b42:	e001      	b.n	8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4929      	ldr	r1, [pc, #164]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b50:	428b      	cmp	r3, r1
 8004b52:	d101      	bne.n	8004b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004b54:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b56:	e001      	b.n	8004b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	f043 0202 	orr.w	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fdfa 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d131      	bne.n	8004bea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02c      	beq.n	8004bea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b9a:	4b17      	ldr	r3, [pc, #92]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b9c:	e001      	b.n	8004ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4912      	ldr	r1, [pc, #72]	; (8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004baa:	428b      	cmp	r3, r1
 8004bac:	d101      	bne.n	8004bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bb0:	e001      	b.n	8004bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bca:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd8:	f043 0204 	orr.w	r2, r3, #4
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fdc5 	bl	8004770 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004be6:	e000      	b.n	8004bea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004be8:	bf00      	nop
}
 8004bea:	bf00      	nop
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40003800 	.word	0x40003800
 8004bf8:	40003400 	.word	0x40003400

08004bfc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	1c99      	adds	r1, r3, #2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6251      	str	r1, [r2, #36]	; 0x24
 8004c22:	881a      	ldrh	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d113      	bne.n	8004c6a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d106      	bne.n	8004c6a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ffc9 	bl	8004bfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	1c99      	adds	r1, r3, #2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6251      	str	r1, [r2, #36]	; 0x24
 8004c86:	8819      	ldrh	r1, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	; (8004d04 <I2SEx_TxISR_I2SExt+0x90>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <I2SEx_TxISR_I2SExt+0x22>
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <I2SEx_TxISR_I2SExt+0x94>)
 8004c94:	e001      	b.n	8004c9a <I2SEx_TxISR_I2SExt+0x26>
 8004c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d121      	bne.n	8004cfa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <I2SEx_TxISR_I2SExt+0x90>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <I2SEx_TxISR_I2SExt+0x50>
 8004cc0:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <I2SEx_TxISR_I2SExt+0x94>)
 8004cc2:	e001      	b.n	8004cc8 <I2SEx_TxISR_I2SExt+0x54>
 8004cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	490d      	ldr	r1, [pc, #52]	; (8004d04 <I2SEx_TxISR_I2SExt+0x90>)
 8004cd0:	428b      	cmp	r3, r1
 8004cd2:	d101      	bne.n	8004cd8 <I2SEx_TxISR_I2SExt+0x64>
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <I2SEx_TxISR_I2SExt+0x94>)
 8004cd6:	e001      	b.n	8004cdc <I2SEx_TxISR_I2SExt+0x68>
 8004cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ce0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff81 	bl	8004bfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40003800 	.word	0x40003800
 8004d08:	40003400 	.word	0x40003400

08004d0c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68d8      	ldr	r0, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	1c99      	adds	r1, r3, #2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d24:	b282      	uxth	r2, r0
 8004d26:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d113      	bne.n	8004d68 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d4e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff ff4a 	bl	8004bfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <I2SEx_RxISR_I2SExt+0x90>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d101      	bne.n	8004d86 <I2SEx_RxISR_I2SExt+0x16>
 8004d82:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <I2SEx_RxISR_I2SExt+0x94>)
 8004d84:	e001      	b.n	8004d8a <I2SEx_RxISR_I2SExt+0x1a>
 8004d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d8a:	68d8      	ldr	r0, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	1c99      	adds	r1, r3, #2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d96:	b282      	uxth	r2, r0
 8004d98:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d121      	bne.n	8004df6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <I2SEx_RxISR_I2SExt+0x90>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <I2SEx_RxISR_I2SExt+0x50>
 8004dbc:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <I2SEx_RxISR_I2SExt+0x94>)
 8004dbe:	e001      	b.n	8004dc4 <I2SEx_RxISR_I2SExt+0x54>
 8004dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	490d      	ldr	r1, [pc, #52]	; (8004e00 <I2SEx_RxISR_I2SExt+0x90>)
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	d101      	bne.n	8004dd4 <I2SEx_RxISR_I2SExt+0x64>
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <I2SEx_RxISR_I2SExt+0x94>)
 8004dd2:	e001      	b.n	8004dd8 <I2SEx_RxISR_I2SExt+0x68>
 8004dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ddc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ff03 	bl	8004bfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40003800 	.word	0x40003800
 8004e04:	40003400 	.word	0x40003400

08004e08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0a:	b08f      	sub	sp, #60	; 0x3c
 8004e0c:	af0a      	add	r7, sp, #40	; 0x28
 8004e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e10f      	b.n	800503a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f005 fb8d 	bl	800a554 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f002 fb5a 	bl	8007512 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	687e      	ldr	r6, [r7, #4]
 8004e66:	466d      	mov	r5, sp
 8004e68:	f106 0410 	add.w	r4, r6, #16
 8004e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e78:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e7c:	1d33      	adds	r3, r6, #4
 8004e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e80:	6838      	ldr	r0, [r7, #0]
 8004e82:	f002 fa31 	bl	80072e8 <USB_CoreInit>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0d0      	b.n	800503a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f002 fb48 	bl	8007534 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73fb      	strb	r3, [r7, #15]
 8004ea8:	e04a      	b.n	8004f40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004eaa:	7bfa      	ldrb	r2, [r7, #15]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	333d      	adds	r3, #61	; 0x3d
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ebe:	7bfa      	ldrb	r2, [r7, #15]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	333c      	adds	r3, #60	; 0x3c
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ed2:	7bfa      	ldrb	r2, [r7, #15]
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	b298      	uxth	r0, r3
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3342      	adds	r3, #66	; 0x42
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	333f      	adds	r3, #63	; 0x3f
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004efe:	7bfa      	ldrb	r2, [r7, #15]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3344      	adds	r3, #68	; 0x44
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f12:	7bfa      	ldrb	r2, [r7, #15]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	3348      	adds	r3, #72	; 0x48
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3350      	adds	r3, #80	; 0x50
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	7bfa      	ldrb	r2, [r7, #15]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3af      	bcc.n	8004eaa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
 8004f4e:	e044      	b.n	8004fda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f50:	7bfa      	ldrb	r2, [r7, #15]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f66:	7bfa      	ldrb	r2, [r7, #15]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f7c:	7bfa      	ldrb	r2, [r7, #15]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f92:	7bfa      	ldrb	r2, [r7, #15]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fa8:	7bfa      	ldrb	r2, [r7, #15]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
 8004fda:	7bfa      	ldrb	r2, [r7, #15]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d3b5      	bcc.n	8004f50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	687e      	ldr	r6, [r7, #4]
 8004fec:	466d      	mov	r5, sp
 8004fee:	f106 0410 	add.w	r4, r6, #16
 8004ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ffa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ffe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005002:	1d33      	adds	r3, r6, #4
 8005004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005006:	6838      	ldr	r0, [r7, #0]
 8005008:	f002 fabe 	bl	8007588 <USB_DevInit>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e00d      	b.n	800503a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f003 fb06 	bl	8008644 <USB_DevDisconnect>

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005042 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_PCD_Start+0x1c>
 800505a:	2302      	movs	r3, #2
 800505c:	e020      	b.n	80050a0 <HAL_PCD_Start+0x5e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	2b01      	cmp	r3, #1
 800506c:	d109      	bne.n	8005082 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005072:	2b01      	cmp	r3, #1
 8005074:	d005      	beq.n	8005082 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f002 fa32 	bl	80074f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f003 fab6 	bl	8008602 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b08d      	sub	sp, #52	; 0x34
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f003 fb74 	bl	80087ac <USB_GetMode>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f040 839d 	bne.w	8005806 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f003 fad8 	bl	8008686 <USB_ReadInterrupts>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8393 	beq.w	8005804 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f003 facf 	bl	8008686 <USB_ReadInterrupts>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d107      	bne.n	8005102 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f002 0202 	and.w	r2, r2, #2
 8005100:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f003 fabd 	bl	8008686 <USB_ReadInterrupts>
 800510c:	4603      	mov	r3, r0
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b10      	cmp	r3, #16
 8005114:	d161      	bne.n	80051da <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699a      	ldr	r2, [r3, #24]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0210 	bic.w	r2, r2, #16
 8005124:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f003 020f 	and.w	r2, r3, #15
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	3304      	adds	r3, #4
 8005144:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	0c5b      	lsrs	r3, r3, #17
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	2b02      	cmp	r3, #2
 8005150:	d124      	bne.n	800519c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d035      	beq.n	80051ca <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800516c:	b29b      	uxth	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	6a38      	ldr	r0, [r7, #32]
 8005172:	f003 f923 	bl	80083bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005182:	441a      	add	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005194:	441a      	add	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	619a      	str	r2, [r3, #24]
 800519a:	e016      	b.n	80051ca <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	0c5b      	lsrs	r3, r3, #17
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	2b06      	cmp	r3, #6
 80051a6:	d110      	bne.n	80051ca <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051ae:	2208      	movs	r2, #8
 80051b0:	4619      	mov	r1, r3
 80051b2:	6a38      	ldr	r0, [r7, #32]
 80051b4:	f003 f902 	bl	80083bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051c4:	441a      	add	r2, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0210 	orr.w	r2, r2, #16
 80051d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f003 fa51 	bl	8008686 <USB_ReadInterrupts>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051ee:	d16e      	bne.n	80052ce <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f003 fa57 	bl	80086ac <USB_ReadDevAllOutEpInterrupt>
 80051fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005200:	e062      	b.n	80052c8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d057      	beq.n	80052bc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f003 fa7c 	bl	8008714 <USB_ReadDevOutEPInterrupt>
 800521c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00c      	beq.n	8005242 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	461a      	mov	r2, r3
 8005236:	2301      	movs	r3, #1
 8005238:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800523a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fdb1 	bl	8005da4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00c      	beq.n	8005266 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	461a      	mov	r2, r3
 800525a:	2308      	movs	r3, #8
 800525c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800525e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 feab 	bl	8005fbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	461a      	mov	r2, r3
 800527e:	2310      	movs	r3, #16
 8005280:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	461a      	mov	r2, r3
 800529a:	2320      	movs	r3, #32
 800529c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	461a      	mov	r2, r3
 80052b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	3301      	adds	r3, #1
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d199      	bne.n	8005202 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f003 f9d7 	bl	8008686 <USB_ReadInterrupts>
 80052d8:	4603      	mov	r3, r0
 80052da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052e2:	f040 80c0 	bne.w	8005466 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f003 f9f8 	bl	80086e0 <USB_ReadDevAllInEpInterrupt>
 80052f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80052f6:	e0b2      	b.n	800545e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 80a7 	beq.w	8005452 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f003 fa1e 	bl	8008750 <USB_ReadDevInEPInterrupt>
 8005314:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d057      	beq.n	80053d0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	2201      	movs	r2, #1
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	43db      	mvns	r3, r3
 800533a:	69f9      	ldr	r1, [r7, #28]
 800533c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005340:	4013      	ands	r3, r2
 8005342:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	461a      	mov	r2, r3
 8005352:	2301      	movs	r3, #1
 8005354:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d132      	bne.n	80053c4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3348      	adds	r3, #72	; 0x48
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	4613      	mov	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4403      	add	r3, r0
 800537e:	3344      	adds	r3, #68	; 0x44
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4419      	add	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4403      	add	r3, r0
 8005392:	3348      	adds	r3, #72	; 0x48
 8005394:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	2b00      	cmp	r3, #0
 800539a:	d113      	bne.n	80053c4 <HAL_PCD_IRQHandler+0x31c>
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	3350      	adds	r3, #80	; 0x50
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d108      	bne.n	80053c4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053bc:	461a      	mov	r2, r3
 80053be:	2101      	movs	r1, #1
 80053c0:	f003 fa26 	bl	8008810 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f005 f951 	bl	800a672 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e6:	461a      	mov	r2, r3
 80053e8:	2308      	movs	r3, #8
 80053ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d008      	beq.n	8005408 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	461a      	mov	r2, r3
 8005404:	2310      	movs	r3, #16
 8005406:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	461a      	mov	r2, r3
 8005420:	2340      	movs	r3, #64	; 0x40
 8005422:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	461a      	mov	r2, r3
 800543c:	2302      	movs	r3, #2
 800543e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800544a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fc1b 	bl	8005c88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	3301      	adds	r3, #1
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	f47f af49 	bne.w	80052f8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f003 f90b 	bl	8008686 <USB_ReadInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800547a:	d122      	bne.n	80054c2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005496:	2b01      	cmp	r3, #1
 8005498:	d108      	bne.n	80054ac <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054a2:	2100      	movs	r1, #0
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fe27 	bl	80060f8 <HAL_PCDEx_LPM_Callback>
 80054aa:	e002      	b.n	80054b2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f005 f94d 	bl	800a74c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80054c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f003 f8dd 	bl	8008686 <USB_ReadInterrupts>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d6:	d112      	bne.n	80054fe <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d102      	bne.n	80054ee <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f005 f909 	bl	800a700 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80054fc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f003 f8bf 	bl	8008686 <USB_ReadInterrupts>
 8005508:	4603      	mov	r3, r0
 800550a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005512:	f040 80c7 	bne.w	80056a4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2110      	movs	r1, #16
 8005530:	4618      	mov	r0, r3
 8005532:	f002 f98d 	bl	8007850 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005536:	2300      	movs	r3, #0
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800553a:	e056      	b.n	80055ea <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	461a      	mov	r2, r3
 800554a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800554e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800556e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800558e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	461a      	mov	r2, r3
 800559e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	3301      	adds	r3, #1
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d3a3      	bcc.n	800553c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005602:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005606:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d016      	beq.n	800563e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005620:	f043 030b 	orr.w	r3, r3, #11
 8005624:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005636:	f043 030b 	orr.w	r3, r3, #11
 800563a:	6453      	str	r3, [r2, #68]	; 0x44
 800563c:	e015      	b.n	800566a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005650:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005654:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005664:	f043 030b 	orr.w	r3, r3, #11
 8005668:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005678:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800567c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800568e:	461a      	mov	r2, r3
 8005690:	f003 f8be 	bl	8008810 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80056a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f002 ffec 	bl	8008686 <USB_ReadInterrupts>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b8:	d124      	bne.n	8005704 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f003 f882 	bl	80087c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f002 f922 	bl	8007912 <USB_GetDevSpeed>
 80056ce:	4603      	mov	r3, r0
 80056d0:	461a      	mov	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681c      	ldr	r4, [r3, #0]
 80056da:	f001 f9af 	bl	8006a3c <HAL_RCC_GetHCLKFreq>
 80056de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	4620      	mov	r0, r4
 80056ea:	f001 fe5f 	bl	80073ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f004 ffe7 	bl	800a6c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005702:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f002 ffbc 	bl	8008686 <USB_ReadInterrupts>
 800570e:	4603      	mov	r3, r0
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b08      	cmp	r3, #8
 8005716:	d10a      	bne.n	800572e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f004 ffc4 	bl	800a6a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f002 0208 	and.w	r2, r2, #8
 800572c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f002 ffa7 	bl	8008686 <USB_ReadInterrupts>
 8005738:	4603      	mov	r3, r0
 800573a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800573e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005742:	d10f      	bne.n	8005764 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	b2db      	uxtb	r3, r3
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f005 f81c 	bl	800a78c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f002 ff8c 	bl	8008686 <USB_ReadInterrupts>
 800576e:	4603      	mov	r3, r0
 8005770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005778:	d10f      	bne.n	800579a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	b2db      	uxtb	r3, r3
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f004 ffef 	bl	800a768 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f002 ff71 	bl	8008686 <USB_ReadInterrupts>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d10a      	bne.n	80057c6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f004 fffd 	bl	800a7b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f002 ff5b 	bl	8008686 <USB_ReadInterrupts>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d115      	bne.n	8005806 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f004 ffed 	bl	800a7cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6859      	ldr	r1, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	e000      	b.n	8005806 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005804:	bf00      	nop
    }
  }
}
 8005806:	3734      	adds	r7, #52	; 0x34
 8005808:	46bd      	mov	sp, r7
 800580a:	bd90      	pop	{r4, r7, pc}

0800580c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_PCD_SetAddress+0x1a>
 8005822:	2302      	movs	r3, #2
 8005824:	e013      	b.n	800584e <HAL_PCD_SetAddress+0x42>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	4611      	mov	r1, r2
 800583e:	4618      	mov	r0, r3
 8005840:	f002 feb9 	bl	80085b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	4608      	mov	r0, r1
 8005860:	4611      	mov	r1, r2
 8005862:	461a      	mov	r2, r3
 8005864:	4603      	mov	r3, r0
 8005866:	70fb      	strb	r3, [r7, #3]
 8005868:	460b      	mov	r3, r1
 800586a:	803b      	strh	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005878:	2b00      	cmp	r3, #0
 800587a:	da0f      	bge.n	800589c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	f003 020f 	and.w	r2, r3, #15
 8005882:	4613      	mov	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	3338      	adds	r3, #56	; 0x38
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4413      	add	r3, r2
 8005890:	3304      	adds	r3, #4
 8005892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	705a      	strb	r2, [r3, #1]
 800589a:	e00f      	b.n	80058bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	f003 020f 	and.w	r2, r3, #15
 80058a2:	4613      	mov	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	3304      	adds	r3, #4
 80058b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80058c8:	883a      	ldrh	r2, [r7, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	78ba      	ldrb	r2, [r7, #2]
 80058d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d004      	beq.n	80058e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058e6:	78bb      	ldrb	r3, [r7, #2]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d102      	bne.n	80058f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_PCD_EP_Open+0xaa>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e00e      	b.n	800591e <HAL_PCD_EP_Open+0xc8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68f9      	ldr	r1, [r7, #12]
 800590e:	4618      	mov	r0, r3
 8005910:	f002 f824 	bl	800795c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800591c:	7afb      	ldrb	r3, [r7, #11]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005936:	2b00      	cmp	r3, #0
 8005938:	da0f      	bge.n	800595a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	f003 020f 	and.w	r2, r3, #15
 8005940:	4613      	mov	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	3338      	adds	r3, #56	; 0x38
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	3304      	adds	r3, #4
 8005950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	705a      	strb	r2, [r3, #1]
 8005958:	e00f      	b.n	800597a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	4613      	mov	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4413      	add	r3, r2
 8005970:	3304      	adds	r3, #4
 8005972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	b2da      	uxtb	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_PCD_EP_Close+0x6e>
 8005990:	2302      	movs	r3, #2
 8005992:	e00e      	b.n	80059b2 <HAL_PCD_EP_Close+0x8c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68f9      	ldr	r1, [r7, #12]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f002 f862 	bl	8007a6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b086      	sub	sp, #24
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	460b      	mov	r3, r1
 80059c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	f003 020f 	and.w	r2, r3, #15
 80059d0:	4613      	mov	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	3304      	adds	r3, #4
 80059e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2200      	movs	r2, #0
 80059f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2200      	movs	r2, #0
 80059fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059fc:	7afb      	ldrb	r3, [r7, #11]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d102      	bne.n	8005a16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a16:	7afb      	ldrb	r3, [r7, #11]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6979      	ldr	r1, [r7, #20]
 8005a2e:	f002 fb3d 	bl	80080ac <USB_EP0StartXfer>
 8005a32:	e008      	b.n	8005a46 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6979      	ldr	r1, [r7, #20]
 8005a42:	f002 f8ef 	bl	8007c24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	f003 020f 	and.w	r2, r3, #15
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a90:	7afb      	ldrb	r3, [r7, #11]
 8005a92:	f003 020f 	and.w	r2, r3, #15
 8005a96:	4613      	mov	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	3338      	adds	r3, #56	; 0x38
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2201      	movs	r2, #1
 8005abe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ac0:	7afb      	ldrb	r3, [r7, #11]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	f002 fadb 	bl	80080ac <USB_EP0StartXfer>
 8005af6:	e008      	b.n	8005b0a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	6979      	ldr	r1, [r7, #20]
 8005b06:	f002 f88d 	bl	8007c24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	f003 020f 	and.w	r2, r3, #15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d901      	bls.n	8005b32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e050      	b.n	8005bd4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da0f      	bge.n	8005b5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	f003 020f 	and.w	r2, r3, #15
 8005b40:	4613      	mov	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	3338      	adds	r3, #56	; 0x38
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3304      	adds	r3, #4
 8005b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	705a      	strb	r2, [r3, #1]
 8005b58:	e00d      	b.n	8005b76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b5a:	78fa      	ldrb	r2, [r7, #3]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_PCD_EP_SetStall+0x82>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e01e      	b.n	8005bd4 <HAL_PCD_EP_SetStall+0xc0>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f002 fc32 	bl	800840e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	b2d9      	uxtb	r1, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f002 fe23 	bl	8008810 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	f003 020f 	and.w	r2, r3, #15
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d901      	bls.n	8005bfa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e042      	b.n	8005c80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da0f      	bge.n	8005c22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	f003 020f 	and.w	r2, r3, #15
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	3338      	adds	r3, #56	; 0x38
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	3304      	adds	r3, #4
 8005c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	705a      	strb	r2, [r3, #1]
 8005c20:	e00f      	b.n	8005c42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	f003 020f 	and.w	r2, r3, #15
 8005c28:	4613      	mov	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	3304      	adds	r3, #4
 8005c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_PCD_EP_ClrStall+0x86>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e00e      	b.n	8005c80 <HAL_PCD_EP_ClrStall+0xa4>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f002 fc3a 	bl	80084ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	; 0x28
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	3338      	adds	r3, #56	; 0x38
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	3304      	adds	r3, #4
 8005cae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d901      	bls.n	8005cc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e06c      	b.n	8005d9a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d902      	bls.n	8005cdc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3303      	adds	r3, #3
 8005ce0:	089b      	lsrs	r3, r3, #2
 8005ce2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ce4:	e02b      	b.n	8005d3e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d902      	bls.n	8005d02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	3303      	adds	r3, #3
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68d9      	ldr	r1, [r3, #12]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4603      	mov	r3, r0
 8005d20:	6978      	ldr	r0, [r7, #20]
 8005d22:	f002 fb16 	bl	8008352 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	441a      	add	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	441a      	add	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d809      	bhi.n	8005d68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d203      	bcs.n	8005d68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1be      	bne.n	8005ce6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d811      	bhi.n	8005d98 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	6939      	ldr	r1, [r7, #16]
 8005d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d94:	4013      	ands	r3, r2
 8005d96:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	333c      	adds	r3, #60	; 0x3c
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	f040 80a0 	bne.w	8005f1c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d015      	beq.n	8005e12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4a72      	ldr	r2, [pc, #456]	; (8005fb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	f240 80dd 	bls.w	8005faa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80d7 	beq.w	8005faa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0e:	6093      	str	r3, [r2, #8]
 8005e10:	e0cb      	b.n	8005faa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d009      	beq.n	8005e30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2320      	movs	r3, #32
 8005e2c:	6093      	str	r3, [r2, #8]
 8005e2e:	e0bc      	b.n	8005faa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f040 80b7 	bne.w	8005faa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a5d      	ldr	r2, [pc, #372]	; (8005fb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d90f      	bls.n	8005e64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e60:	6093      	str	r3, [r2, #8]
 8005e62:	e0a2      	b.n	8005faa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	0159      	lsls	r1, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	440b      	add	r3, r1
 8005e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005e8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4403      	add	r3, r0
 8005e9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005e9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005eb2:	6819      	ldr	r1, [r3, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4403      	add	r3, r0
 8005ec2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4419      	add	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4403      	add	r3, r0
 8005ed8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005edc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d114      	bne.n	8005f0e <PCD_EP_OutXfrComplete_int+0x16a>
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d108      	bne.n	8005f0e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f06:	461a      	mov	r2, r3
 8005f08:	2101      	movs	r1, #1
 8005f0a:	f002 fc81 	bl	8008810 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f004 fb91 	bl	800a63c <HAL_PCD_DataOutStageCallback>
 8005f1a:	e046      	b.n	8005faa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a26      	ldr	r2, [pc, #152]	; (8005fb8 <PCD_EP_OutXfrComplete_int+0x214>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d124      	bne.n	8005f6e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f40:	6093      	str	r3, [r2, #8]
 8005f42:	e032      	b.n	8005faa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f004 fb68 	bl	800a63c <HAL_PCD_DataOutStageCallback>
 8005f6c:	e01d      	b.n	8005faa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d114      	bne.n	8005f9e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	440b      	add	r3, r1
 8005f82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d108      	bne.n	8005f9e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f96:	461a      	mov	r2, r3
 8005f98:	2100      	movs	r1, #0
 8005f9a:	f002 fc39 	bl	8008810 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f004 fb49 	bl	800a63c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	4f54300a 	.word	0x4f54300a
 8005fb8:	4f54310a 	.word	0x4f54310a

08005fbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	333c      	adds	r3, #60	; 0x3c
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4a15      	ldr	r2, [pc, #84]	; (8006044 <PCD_EP_OutSetupPacket_int+0x88>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d90e      	bls.n	8006010 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	461a      	mov	r2, r3
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f004 fb01 	bl	800a618 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a0a      	ldr	r2, [pc, #40]	; (8006044 <PCD_EP_OutSetupPacket_int+0x88>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d90c      	bls.n	8006038 <PCD_EP_OutSetupPacket_int+0x7c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d108      	bne.n	8006038 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006030:	461a      	mov	r2, r3
 8006032:	2101      	movs	r1, #1
 8006034:	f002 fbec 	bl	8008810 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	4f54300a 	.word	0x4f54300a

08006048 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
 8006054:	4613      	mov	r3, r2
 8006056:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d107      	bne.n	8006076 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006066:	883b      	ldrh	r3, [r7, #0]
 8006068:	0419      	lsls	r1, r3, #16
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	430a      	orrs	r2, r1
 8006072:	629a      	str	r2, [r3, #40]	; 0x28
 8006074:	e028      	b.n	80060c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4413      	add	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006084:	2300      	movs	r3, #0
 8006086:	73fb      	strb	r3, [r7, #15]
 8006088:	e00d      	b.n	80060a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	3340      	adds	r3, #64	; 0x40
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	0c1b      	lsrs	r3, r3, #16
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	4413      	add	r3, r2
 800609e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	3301      	adds	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d3ec      	bcc.n	800608a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80060b0:	883b      	ldrh	r3, [r7, #0]
 80060b2:	0418      	lsls	r0, r3, #16
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6819      	ldr	r1, [r3, #0]
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	4302      	orrs	r2, r0
 80060c0:	3340      	adds	r3, #64	; 0x40
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	887a      	ldrh	r2, [r7, #2]
 80060e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e25b      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d075      	beq.n	800621a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800612e:	4ba3      	ldr	r3, [pc, #652]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 030c 	and.w	r3, r3, #12
 8006136:	2b04      	cmp	r3, #4
 8006138:	d00c      	beq.n	8006154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800613a:	4ba0      	ldr	r3, [pc, #640]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006142:	2b08      	cmp	r3, #8
 8006144:	d112      	bne.n	800616c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006146:	4b9d      	ldr	r3, [pc, #628]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006152:	d10b      	bne.n	800616c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006154:	4b99      	ldr	r3, [pc, #612]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d05b      	beq.n	8006218 <HAL_RCC_OscConfig+0x108>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d157      	bne.n	8006218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e236      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006174:	d106      	bne.n	8006184 <HAL_RCC_OscConfig+0x74>
 8006176:	4b91      	ldr	r3, [pc, #580]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a90      	ldr	r2, [pc, #576]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 800617c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	e01d      	b.n	80061c0 <HAL_RCC_OscConfig+0xb0>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800618c:	d10c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x98>
 800618e:	4b8b      	ldr	r3, [pc, #556]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a8a      	ldr	r2, [pc, #552]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	4b88      	ldr	r3, [pc, #544]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a87      	ldr	r2, [pc, #540]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80061a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e00b      	b.n	80061c0 <HAL_RCC_OscConfig+0xb0>
 80061a8:	4b84      	ldr	r3, [pc, #528]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a83      	ldr	r2, [pc, #524]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80061ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	4b81      	ldr	r3, [pc, #516]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a80      	ldr	r2, [pc, #512]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80061ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d013      	beq.n	80061f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c8:	f7fc fdce 	bl	8002d68 <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061d0:	f7fc fdca 	bl	8002d68 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b64      	cmp	r3, #100	; 0x64
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e1fb      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061e2:	4b76      	ldr	r3, [pc, #472]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0f0      	beq.n	80061d0 <HAL_RCC_OscConfig+0xc0>
 80061ee:	e014      	b.n	800621a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f0:	f7fc fdba 	bl	8002d68 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061f8:	f7fc fdb6 	bl	8002d68 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b64      	cmp	r3, #100	; 0x64
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e1e7      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800620a:	4b6c      	ldr	r3, [pc, #432]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1f0      	bne.n	80061f8 <HAL_RCC_OscConfig+0xe8>
 8006216:	e000      	b.n	800621a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d063      	beq.n	80062ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006226:	4b65      	ldr	r3, [pc, #404]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 030c 	and.w	r3, r3, #12
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006232:	4b62      	ldr	r3, [pc, #392]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800623a:	2b08      	cmp	r3, #8
 800623c:	d11c      	bne.n	8006278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800623e:	4b5f      	ldr	r3, [pc, #380]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d116      	bne.n	8006278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624a:	4b5c      	ldr	r3, [pc, #368]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <HAL_RCC_OscConfig+0x152>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d001      	beq.n	8006262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e1bb      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006262:	4b56      	ldr	r3, [pc, #344]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	4952      	ldr	r1, [pc, #328]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006272:	4313      	orrs	r3, r2
 8006274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006276:	e03a      	b.n	80062ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d020      	beq.n	80062c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006280:	4b4f      	ldr	r3, [pc, #316]	; (80063c0 <HAL_RCC_OscConfig+0x2b0>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006286:	f7fc fd6f 	bl	8002d68 <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800628c:	e008      	b.n	80062a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800628e:	f7fc fd6b 	bl	8002d68 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e19c      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a0:	4b46      	ldr	r3, [pc, #280]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0f0      	beq.n	800628e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ac:	4b43      	ldr	r3, [pc, #268]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4940      	ldr	r1, [pc, #256]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	600b      	str	r3, [r1, #0]
 80062c0:	e015      	b.n	80062ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062c2:	4b3f      	ldr	r3, [pc, #252]	; (80063c0 <HAL_RCC_OscConfig+0x2b0>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7fc fd4e 	bl	8002d68 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062d0:	f7fc fd4a 	bl	8002d68 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e17b      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062e2:	4b36      	ldr	r3, [pc, #216]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1f0      	bne.n	80062d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d030      	beq.n	800635c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006302:	4b30      	ldr	r3, [pc, #192]	; (80063c4 <HAL_RCC_OscConfig+0x2b4>)
 8006304:	2201      	movs	r2, #1
 8006306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006308:	f7fc fd2e 	bl	8002d68 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006310:	f7fc fd2a 	bl	8002d68 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e15b      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006322:	4b26      	ldr	r3, [pc, #152]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0x200>
 800632e:	e015      	b.n	800635c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006330:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <HAL_RCC_OscConfig+0x2b4>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006336:	f7fc fd17 	bl	8002d68 <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800633e:	f7fc fd13 	bl	8002d68 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e144      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006350:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80a0 	beq.w	80064aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800636e:	4b13      	ldr	r3, [pc, #76]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10f      	bne.n	800639a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	4a0e      	ldr	r2, [pc, #56]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 8006384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006388:	6413      	str	r3, [r2, #64]	; 0x40
 800638a:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <HAL_RCC_OscConfig+0x2ac>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800639a:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <HAL_RCC_OscConfig+0x2b8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d121      	bne.n	80063ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <HAL_RCC_OscConfig+0x2b8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a07      	ldr	r2, [pc, #28]	; (80063c8 <HAL_RCC_OscConfig+0x2b8>)
 80063ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063b2:	f7fc fcd9 	bl	8002d68 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063b8:	e011      	b.n	80063de <HAL_RCC_OscConfig+0x2ce>
 80063ba:	bf00      	nop
 80063bc:	40023800 	.word	0x40023800
 80063c0:	42470000 	.word	0x42470000
 80063c4:	42470e80 	.word	0x42470e80
 80063c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063cc:	f7fc fccc 	bl	8002d68 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e0fd      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063de:	4b81      	ldr	r3, [pc, #516]	; (80065e4 <HAL_RCC_OscConfig+0x4d4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d106      	bne.n	8006400 <HAL_RCC_OscConfig+0x2f0>
 80063f2:	4b7d      	ldr	r3, [pc, #500]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 80063f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f6:	4a7c      	ldr	r2, [pc, #496]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	6713      	str	r3, [r2, #112]	; 0x70
 80063fe:	e01c      	b.n	800643a <HAL_RCC_OscConfig+0x32a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b05      	cmp	r3, #5
 8006406:	d10c      	bne.n	8006422 <HAL_RCC_OscConfig+0x312>
 8006408:	4b77      	ldr	r3, [pc, #476]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 800640a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640c:	4a76      	ldr	r2, [pc, #472]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 800640e:	f043 0304 	orr.w	r3, r3, #4
 8006412:	6713      	str	r3, [r2, #112]	; 0x70
 8006414:	4b74      	ldr	r3, [pc, #464]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 8006416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006418:	4a73      	ldr	r2, [pc, #460]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	6713      	str	r3, [r2, #112]	; 0x70
 8006420:	e00b      	b.n	800643a <HAL_RCC_OscConfig+0x32a>
 8006422:	4b71      	ldr	r3, [pc, #452]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	4a70      	ldr	r2, [pc, #448]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 8006428:	f023 0301 	bic.w	r3, r3, #1
 800642c:	6713      	str	r3, [r2, #112]	; 0x70
 800642e:	4b6e      	ldr	r3, [pc, #440]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	4a6d      	ldr	r2, [pc, #436]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d015      	beq.n	800646e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006442:	f7fc fc91 	bl	8002d68 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006448:	e00a      	b.n	8006460 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800644a:	f7fc fc8d 	bl	8002d68 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	f241 3288 	movw	r2, #5000	; 0x1388
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e0bc      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006460:	4b61      	ldr	r3, [pc, #388]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0ee      	beq.n	800644a <HAL_RCC_OscConfig+0x33a>
 800646c:	e014      	b.n	8006498 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800646e:	f7fc fc7b 	bl	8002d68 <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006474:	e00a      	b.n	800648c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006476:	f7fc fc77 	bl	8002d68 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	f241 3288 	movw	r2, #5000	; 0x1388
 8006484:	4293      	cmp	r3, r2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e0a6      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800648c:	4b56      	ldr	r3, [pc, #344]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1ee      	bne.n	8006476 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006498:	7dfb      	ldrb	r3, [r7, #23]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d105      	bne.n	80064aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800649e:	4b52      	ldr	r3, [pc, #328]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	4a51      	ldr	r2, [pc, #324]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 80064a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8092 	beq.w	80065d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064b4:	4b4c      	ldr	r3, [pc, #304]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d05c      	beq.n	800657a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d141      	bne.n	800654c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c8:	4b48      	ldr	r3, [pc, #288]	; (80065ec <HAL_RCC_OscConfig+0x4dc>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ce:	f7fc fc4b 	bl	8002d68 <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d6:	f7fc fc47 	bl	8002d68 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e078      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e8:	4b3f      	ldr	r3, [pc, #252]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1f0      	bne.n	80064d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	019b      	lsls	r3, r3, #6
 8006504:	431a      	orrs	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	3b01      	subs	r3, #1
 800650e:	041b      	lsls	r3, r3, #16
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	061b      	lsls	r3, r3, #24
 8006518:	4933      	ldr	r1, [pc, #204]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 800651a:	4313      	orrs	r3, r2
 800651c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800651e:	4b33      	ldr	r3, [pc, #204]	; (80065ec <HAL_RCC_OscConfig+0x4dc>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006524:	f7fc fc20 	bl	8002d68 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652c:	f7fc fc1c 	bl	8002d68 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e04d      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653e:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0x41c>
 800654a:	e045      	b.n	80065d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654c:	4b27      	ldr	r3, [pc, #156]	; (80065ec <HAL_RCC_OscConfig+0x4dc>)
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006552:	f7fc fc09 	bl	8002d68 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800655a:	f7fc fc05 	bl	8002d68 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e036      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800656c:	4b1e      	ldr	r3, [pc, #120]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1f0      	bne.n	800655a <HAL_RCC_OscConfig+0x44a>
 8006578:	e02e      	b.n	80065d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e029      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <HAL_RCC_OscConfig+0x4d8>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	429a      	cmp	r2, r3
 8006598:	d11c      	bne.n	80065d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d115      	bne.n	80065d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065ae:	4013      	ands	r3, r2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10d      	bne.n	80065d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d106      	bne.n	80065d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d001      	beq.n	80065d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	40007000 	.word	0x40007000
 80065e8:	40023800 	.word	0x40023800
 80065ec:	42470060 	.word	0x42470060

080065f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0cc      	b.n	800679e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006604:	4b68      	ldr	r3, [pc, #416]	; (80067a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d90c      	bls.n	800662c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006612:	4b65      	ldr	r3, [pc, #404]	; (80067a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800661a:	4b63      	ldr	r3, [pc, #396]	; (80067a8 <HAL_RCC_ClockConfig+0x1b8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d001      	beq.n	800662c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e0b8      	b.n	800679e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d020      	beq.n	800667a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006644:	4b59      	ldr	r3, [pc, #356]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	4a58      	ldr	r2, [pc, #352]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800664e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800665c:	4b53      	ldr	r3, [pc, #332]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	4a52      	ldr	r2, [pc, #328]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006668:	4b50      	ldr	r3, [pc, #320]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	494d      	ldr	r1, [pc, #308]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 8006676:	4313      	orrs	r3, r2
 8006678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d044      	beq.n	8006710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d107      	bne.n	800669e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800668e:	4b47      	ldr	r3, [pc, #284]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d119      	bne.n	80066ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e07f      	b.n	800679e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d003      	beq.n	80066ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d107      	bne.n	80066be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ae:	4b3f      	ldr	r3, [pc, #252]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e06f      	b.n	800679e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066be:	4b3b      	ldr	r3, [pc, #236]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e067      	b.n	800679e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066ce:	4b37      	ldr	r3, [pc, #220]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f023 0203 	bic.w	r2, r3, #3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	4934      	ldr	r1, [pc, #208]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066e0:	f7fc fb42 	bl	8002d68 <HAL_GetTick>
 80066e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e6:	e00a      	b.n	80066fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066e8:	f7fc fb3e 	bl	8002d68 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e04f      	b.n	800679e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066fe:	4b2b      	ldr	r3, [pc, #172]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 020c 	and.w	r2, r3, #12
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	429a      	cmp	r2, r3
 800670e:	d1eb      	bne.n	80066e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006710:	4b25      	ldr	r3, [pc, #148]	; (80067a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d20c      	bcs.n	8006738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671e:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006726:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d001      	beq.n	8006738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e032      	b.n	800679e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d008      	beq.n	8006756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006744:	4b19      	ldr	r3, [pc, #100]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4916      	ldr	r1, [pc, #88]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	4313      	orrs	r3, r2
 8006754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006762:	4b12      	ldr	r3, [pc, #72]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	490e      	ldr	r1, [pc, #56]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	4313      	orrs	r3, r2
 8006774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006776:	f000 f889 	bl	800688c <HAL_RCC_GetSysClockFreq>
 800677a:	4601      	mov	r1, r0
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	091b      	lsrs	r3, r3, #4
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006788:	5cd3      	ldrb	r3, [r2, r3]
 800678a:	fa21 f303 	lsr.w	r3, r1, r3
 800678e:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006792:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7fc faa2 	bl	8002ce0 <HAL_InitTick>

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	40023c00 	.word	0x40023c00
 80067ac:	40023800 	.word	0x40023800
 80067b0:	0800e970 	.word	0x0800e970
 80067b4:	20000000 	.word	0x20000000
 80067b8:	20000074 	.word	0x20000074

080067bc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08c      	sub	sp, #48	; 0x30
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d129      	bne.n	8006822 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80067ce:	2300      	movs	r3, #0
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	4a2a      	ldr	r2, [pc, #168]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	6313      	str	r3, [r2, #48]	; 0x30
 80067de:	4b28      	ldr	r3, [pc, #160]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80067ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f0:	2302      	movs	r3, #2
 80067f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067f4:	2303      	movs	r3, #3
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f8:	2300      	movs	r3, #0
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80067fc:	2300      	movs	r3, #0
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006800:	f107 031c 	add.w	r3, r7, #28
 8006804:	4619      	mov	r1, r3
 8006806:	481f      	ldr	r0, [pc, #124]	; (8006884 <HAL_RCC_MCOConfig+0xc8>)
 8006808:	f7fc fbee 	bl	8002fe8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800680c:	4b1c      	ldr	r3, [pc, #112]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	430b      	orrs	r3, r1
 800681a:	4919      	ldr	r1, [pc, #100]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 800681c:	4313      	orrs	r3, r2
 800681e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006820:	e029      	b.n	8006876 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	4b16      	ldr	r3, [pc, #88]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 800682c:	f043 0304 	orr.w	r3, r3, #4
 8006830:	6313      	str	r3, [r2, #48]	; 0x30
 8006832:	4b13      	ldr	r3, [pc, #76]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800683e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006844:	2302      	movs	r3, #2
 8006846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006848:	2303      	movs	r3, #3
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800684c:	2300      	movs	r3, #0
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006850:	2300      	movs	r3, #0
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006854:	f107 031c 	add.w	r3, r7, #28
 8006858:	4619      	mov	r1, r3
 800685a:	480b      	ldr	r0, [pc, #44]	; (8006888 <HAL_RCC_MCOConfig+0xcc>)
 800685c:	f7fc fbc4 	bl	8002fe8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	00d9      	lsls	r1, r3, #3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	430b      	orrs	r3, r1
 8006870:	4903      	ldr	r1, [pc, #12]	; (8006880 <HAL_RCC_MCOConfig+0xc4>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
}
 8006876:	bf00      	nop
 8006878:	3730      	adds	r7, #48	; 0x30
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40023800 	.word	0x40023800
 8006884:	40020000 	.word	0x40020000
 8006888:	40020800 	.word	0x40020800

0800688c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800688c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	2300      	movs	r3, #0
 800689c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068a2:	4b63      	ldr	r3, [pc, #396]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 030c 	and.w	r3, r3, #12
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d007      	beq.n	80068be <HAL_RCC_GetSysClockFreq+0x32>
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d008      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0x38>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f040 80b4 	bne.w	8006a20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b8:	4b5e      	ldr	r3, [pc, #376]	; (8006a34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80068ba:	60bb      	str	r3, [r7, #8]
       break;
 80068bc:	e0b3      	b.n	8006a26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068be:	4b5e      	ldr	r3, [pc, #376]	; (8006a38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80068c0:	60bb      	str	r3, [r7, #8]
      break;
 80068c2:	e0b0      	b.n	8006a26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068c4:	4b5a      	ldr	r3, [pc, #360]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ce:	4b58      	ldr	r3, [pc, #352]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d04a      	beq.n	8006970 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068da:	4b55      	ldr	r3, [pc, #340]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	099b      	lsrs	r3, r3, #6
 80068e0:	f04f 0400 	mov.w	r4, #0
 80068e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	ea03 0501 	and.w	r5, r3, r1
 80068f0:	ea04 0602 	and.w	r6, r4, r2
 80068f4:	4629      	mov	r1, r5
 80068f6:	4632      	mov	r2, r6
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	f04f 0400 	mov.w	r4, #0
 8006900:	0154      	lsls	r4, r2, #5
 8006902:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006906:	014b      	lsls	r3, r1, #5
 8006908:	4619      	mov	r1, r3
 800690a:	4622      	mov	r2, r4
 800690c:	1b49      	subs	r1, r1, r5
 800690e:	eb62 0206 	sbc.w	r2, r2, r6
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	f04f 0400 	mov.w	r4, #0
 800691a:	0194      	lsls	r4, r2, #6
 800691c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006920:	018b      	lsls	r3, r1, #6
 8006922:	1a5b      	subs	r3, r3, r1
 8006924:	eb64 0402 	sbc.w	r4, r4, r2
 8006928:	f04f 0100 	mov.w	r1, #0
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	00e2      	lsls	r2, r4, #3
 8006932:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006936:	00d9      	lsls	r1, r3, #3
 8006938:	460b      	mov	r3, r1
 800693a:	4614      	mov	r4, r2
 800693c:	195b      	adds	r3, r3, r5
 800693e:	eb44 0406 	adc.w	r4, r4, r6
 8006942:	f04f 0100 	mov.w	r1, #0
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	0262      	lsls	r2, r4, #9
 800694c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006950:	0259      	lsls	r1, r3, #9
 8006952:	460b      	mov	r3, r1
 8006954:	4614      	mov	r4, r2
 8006956:	4618      	mov	r0, r3
 8006958:	4621      	mov	r1, r4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f04f 0400 	mov.w	r4, #0
 8006960:	461a      	mov	r2, r3
 8006962:	4623      	mov	r3, r4
 8006964:	f7fa f998 	bl	8000c98 <__aeabi_uldivmod>
 8006968:	4603      	mov	r3, r0
 800696a:	460c      	mov	r4, r1
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	e049      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006970:	4b2f      	ldr	r3, [pc, #188]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	099b      	lsrs	r3, r3, #6
 8006976:	f04f 0400 	mov.w	r4, #0
 800697a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	ea03 0501 	and.w	r5, r3, r1
 8006986:	ea04 0602 	and.w	r6, r4, r2
 800698a:	4629      	mov	r1, r5
 800698c:	4632      	mov	r2, r6
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	f04f 0400 	mov.w	r4, #0
 8006996:	0154      	lsls	r4, r2, #5
 8006998:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800699c:	014b      	lsls	r3, r1, #5
 800699e:	4619      	mov	r1, r3
 80069a0:	4622      	mov	r2, r4
 80069a2:	1b49      	subs	r1, r1, r5
 80069a4:	eb62 0206 	sbc.w	r2, r2, r6
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	f04f 0400 	mov.w	r4, #0
 80069b0:	0194      	lsls	r4, r2, #6
 80069b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80069b6:	018b      	lsls	r3, r1, #6
 80069b8:	1a5b      	subs	r3, r3, r1
 80069ba:	eb64 0402 	sbc.w	r4, r4, r2
 80069be:	f04f 0100 	mov.w	r1, #0
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	00e2      	lsls	r2, r4, #3
 80069c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069cc:	00d9      	lsls	r1, r3, #3
 80069ce:	460b      	mov	r3, r1
 80069d0:	4614      	mov	r4, r2
 80069d2:	195b      	adds	r3, r3, r5
 80069d4:	eb44 0406 	adc.w	r4, r4, r6
 80069d8:	f04f 0100 	mov.w	r1, #0
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	02a2      	lsls	r2, r4, #10
 80069e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80069e6:	0299      	lsls	r1, r3, #10
 80069e8:	460b      	mov	r3, r1
 80069ea:	4614      	mov	r4, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	4621      	mov	r1, r4
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f04f 0400 	mov.w	r4, #0
 80069f6:	461a      	mov	r2, r3
 80069f8:	4623      	mov	r3, r4
 80069fa:	f7fa f94d 	bl	8000c98 <__aeabi_uldivmod>
 80069fe:	4603      	mov	r3, r0
 8006a00:	460c      	mov	r4, r1
 8006a02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a04:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	0c1b      	lsrs	r3, r3, #16
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	3301      	adds	r3, #1
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1c:	60bb      	str	r3, [r7, #8]
      break;
 8006a1e:	e002      	b.n	8006a26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006a22:	60bb      	str	r3, [r7, #8]
      break;
 8006a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a26:	68bb      	ldr	r3, [r7, #8]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a30:	40023800 	.word	0x40023800
 8006a34:	00f42400 	.word	0x00f42400
 8006a38:	007a1200 	.word	0x007a1200

08006a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a42:	681b      	ldr	r3, [r3, #0]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	20000000 	.word	0x20000000

08006a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a58:	f7ff fff0 	bl	8006a3c <HAL_RCC_GetHCLKFreq>
 8006a5c:	4601      	mov	r1, r0
 8006a5e:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	0a9b      	lsrs	r3, r3, #10
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	4a03      	ldr	r2, [pc, #12]	; (8006a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a6a:	5cd3      	ldrb	r3, [r2, r3]
 8006a6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40023800 	.word	0x40023800
 8006a78:	0800e980 	.word	0x0800e980

08006a7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d038      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aa4:	4b68      	ldr	r3, [pc, #416]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aaa:	f7fc f95d 	bl	8002d68 <HAL_GetTick>
 8006aae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ab2:	f7fc f959 	bl	8002d68 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e0bd      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ac4:	4b61      	ldr	r3, [pc, #388]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f0      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	019b      	lsls	r3, r3, #6
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	071b      	lsls	r3, r3, #28
 8006ae2:	495a      	ldr	r1, [pc, #360]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006aea:	4b57      	ldr	r3, [pc, #348]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006af0:	f7fc f93a 	bl	8002d68 <HAL_GetTick>
 8006af4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006af6:	e008      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006af8:	f7fc f936 	bl	8002d68 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e09a      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b0a:	4b50      	ldr	r3, [pc, #320]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f0      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8083 	beq.w	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	4b48      	ldr	r3, [pc, #288]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	4a47      	ldr	r2, [pc, #284]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b32:	6413      	str	r3, [r2, #64]	; 0x40
 8006b34:	4b45      	ldr	r3, [pc, #276]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b40:	4b43      	ldr	r3, [pc, #268]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a42      	ldr	r2, [pc, #264]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b4a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b4c:	f7fc f90c 	bl	8002d68 <HAL_GetTick>
 8006b50:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b54:	f7fc f908 	bl	8002d68 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e06c      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b66:	4b3a      	ldr	r3, [pc, #232]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b72:	4b36      	ldr	r3, [pc, #216]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d02f      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d028      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b90:	4b2e      	ldr	r3, [pc, #184]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b98:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b9a:	4b2e      	ldr	r3, [pc, #184]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ba0:	4b2c      	ldr	r3, [pc, #176]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ba6:	4a29      	ldr	r2, [pc, #164]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bac:	4b27      	ldr	r3, [pc, #156]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d114      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bb8:	f7fc f8d6 	bl	8002d68 <HAL_GetTick>
 8006bbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bbe:	e00a      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bc0:	f7fc f8d2 	bl	8002d68 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e034      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0ee      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bee:	d10d      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006bf0:	4b16      	ldr	r3, [pc, #88]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c04:	4911      	ldr	r1, [pc, #68]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
 8006c0a:	e005      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006c0c:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4a0e      	ldr	r2, [pc, #56]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c16:	6093      	str	r3, [r2, #8]
 8006c18:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c24:	4909      	ldr	r1, [pc, #36]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7d1a      	ldrb	r2, [r3, #20]
 8006c3a:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c3c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	42470068 	.word	0x42470068
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40007000 	.word	0x40007000
 8006c54:	42470e40 	.word	0x42470e40
 8006c58:	424711e0 	.word	0x424711e0

08006c5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d13f      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006c7a:	4b23      	ldr	r3, [pc, #140]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c82:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d131      	bne.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c8e:	4b1f      	ldr	r3, [pc, #124]	; (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c90:	617b      	str	r3, [r7, #20]
          break;
 8006c92:	e031      	b.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c94:	4b1c      	ldr	r3, [pc, #112]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ca0:	d109      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006ca2:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cac:	4a18      	ldr	r2, [pc, #96]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006cb6:	4b14      	ldr	r3, [pc, #80]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cc0:	4a14      	ldr	r2, [pc, #80]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006cc8:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cce:	099b      	lsrs	r3, r3, #6
 8006cd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	fb02 f303 	mul.w	r3, r2, r3
 8006cda:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce2:	0f1b      	lsrs	r3, r3, #28
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cee:	617b      	str	r3, [r7, #20]
          break;
 8006cf0:	e002      	b.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]
          break;
 8006cf6:	bf00      	nop
        }
      }
      break;
 8006cf8:	bf00      	nop
    }
  }
  return frequency;
 8006cfa:	697b      	ldr	r3, [r7, #20]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	00bb8000 	.word	0x00bb8000
 8006d10:	007a1200 	.word	0x007a1200
 8006d14:	00f42400 	.word	0x00f42400

08006d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e056      	b.n	8006dd8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d106      	bne.n	8006d4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7fa fef3 	bl	8001b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	ea42 0103 	orr.w	r1, r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	0c1b      	lsrs	r3, r3, #16
 8006da8:	f003 0104 	and.w	r1, r3, #4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69da      	ldr	r2, [r3, #28]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e01a      	b.n	8006e28 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2202      	movs	r2, #2
 8006df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e08:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fa fed8 	bl	8001bc0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08c      	sub	sp, #48	; 0x30
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_SPI_TransmitReceive+0x26>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e18a      	b.n	800716c <HAL_SPI_TransmitReceive+0x33c>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e5e:	f7fb ff83 	bl	8002d68 <HAL_GetTick>
 8006e62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e74:	887b      	ldrh	r3, [r7, #2]
 8006e76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d00f      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x70>
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e86:	d107      	bne.n	8006e98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d103      	bne.n	8006e98 <HAL_SPI_TransmitReceive+0x68>
 8006e90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d003      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e9e:	e15b      	b.n	8007158 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <HAL_SPI_TransmitReceive+0x82>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_SPI_TransmitReceive+0x82>
 8006eac:	887b      	ldrh	r3, [r7, #2]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006eb8:	e14e      	b.n	8007158 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d003      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2205      	movs	r2, #5
 8006eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	887a      	ldrh	r2, [r7, #2]
 8006ede:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	887a      	ldrh	r2, [r7, #2]
 8006ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	887a      	ldrh	r2, [r7, #2]
 8006ef0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	887a      	ldrh	r2, [r7, #2]
 8006ef6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d007      	beq.n	8006f22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2a:	d178      	bne.n	800701e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_SPI_TransmitReceive+0x10a>
 8006f34:	8b7b      	ldrh	r3, [r7, #26]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d166      	bne.n	8007008 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	881a      	ldrh	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	1c9a      	adds	r2, r3, #2
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f5e:	e053      	b.n	8007008 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d11b      	bne.n	8006fa6 <HAL_SPI_TransmitReceive+0x176>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d016      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0x176>
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d113      	bne.n	8006fa6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	881a      	ldrh	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	1c9a      	adds	r2, r3, #2
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d119      	bne.n	8006fe8 <HAL_SPI_TransmitReceive+0x1b8>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d014      	beq.n	8006fe8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	1c9a      	adds	r2, r3, #2
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fe8:	f7fb febe 	bl	8002d68 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d807      	bhi.n	8007008 <HAL_SPI_TransmitReceive+0x1d8>
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d003      	beq.n	8007008 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007006:	e0a7      	b.n	8007158 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1a6      	bne.n	8006f60 <HAL_SPI_TransmitReceive+0x130>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1a1      	bne.n	8006f60 <HAL_SPI_TransmitReceive+0x130>
 800701c:	e07c      	b.n	8007118 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <HAL_SPI_TransmitReceive+0x1fc>
 8007026:	8b7b      	ldrh	r3, [r7, #26]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d16b      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007052:	e057      	b.n	8007104 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b02      	cmp	r3, #2
 8007060:	d11c      	bne.n	800709c <HAL_SPI_TransmitReceive+0x26c>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d017      	beq.n	800709c <HAL_SPI_TransmitReceive+0x26c>
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	2b01      	cmp	r3, #1
 8007070:	d114      	bne.n	800709c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d119      	bne.n	80070de <HAL_SPI_TransmitReceive+0x2ae>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d014      	beq.n	80070de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070da:	2301      	movs	r3, #1
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070de:	f7fb fe43 	bl	8002d68 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d803      	bhi.n	80070f6 <HAL_SPI_TransmitReceive+0x2c6>
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d102      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x2cc>
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007102:	e029      	b.n	8007158 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1a2      	bne.n	8007054 <HAL_SPI_TransmitReceive+0x224>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d19d      	bne.n	8007054 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f8a1 	bl	8007264 <SPI_EndRxTxTransaction>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d006      	beq.n	8007136 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007134:	e010      	b.n	8007158 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10b      	bne.n	8007156 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	e000      	b.n	8007158 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007156:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800716c:	4618      	mov	r0, r3
 800716e:	3730      	adds	r7, #48	; 0x30
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007182:	b2db      	uxtb	r3, r3
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	4613      	mov	r3, r2
 800719e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071a0:	e04c      	b.n	800723c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d048      	beq.n	800723c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80071aa:	f7fb fddd 	bl	8002d68 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d902      	bls.n	80071c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d13d      	bne.n	800723c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d8:	d111      	bne.n	80071fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e2:	d004      	beq.n	80071ee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ec:	d107      	bne.n	80071fe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007206:	d10f      	bne.n	8007228 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007226:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e00f      	b.n	800725c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4013      	ands	r3, r2
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	bf0c      	ite	eq
 800724c:	2301      	moveq	r3, #1
 800724e:	2300      	movne	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	429a      	cmp	r2, r3
 8007258:	d1a3      	bne.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <SPI_EndRxTxTransaction+0x7c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <SPI_EndRxTxTransaction+0x80>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	0d5b      	lsrs	r3, r3, #21
 800727c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007280:	fb02 f303 	mul.w	r3, r2, r3
 8007284:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728e:	d112      	bne.n	80072b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	2180      	movs	r1, #128	; 0x80
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff ff78 	bl	8007190 <SPI_WaitFlagStateUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d016      	beq.n	80072d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072aa:	f043 0220 	orr.w	r2, r3, #32
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e00f      	b.n	80072d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3b01      	subs	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	2b80      	cmp	r3, #128	; 0x80
 80072ce:	d0f2      	beq.n	80072b6 <SPI_EndRxTxTransaction+0x52>
 80072d0:	e000      	b.n	80072d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80072d2:	bf00      	nop
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000000 	.word	0x20000000
 80072e4:	165e9f81 	.word	0x165e9f81

080072e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072e8:	b084      	sub	sp, #16
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	f107 001c 	add.w	r0, r7, #28
 80072f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d122      	bne.n	8007346 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732a:	2b01      	cmp	r3, #1
 800732c:	d105      	bne.n	800733a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fac6 	bl	80088cc <USB_CoreReset>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
 8007344:	e01a      	b.n	800737c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 faba 	bl	80088cc <USB_CoreReset>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800735c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
 800736e:	e005      	b.n	800737c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	2b01      	cmp	r3, #1
 8007380:	d10b      	bne.n	800739a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f043 0206 	orr.w	r2, r3, #6
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f043 0220 	orr.w	r2, r3, #32
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073a6:	b004      	add	sp, #16
 80073a8:	4770      	bx	lr
	...

080073ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d165      	bne.n	800748c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4a41      	ldr	r2, [pc, #260]	; (80074c8 <USB_SetTurnaroundTime+0x11c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d906      	bls.n	80073d6 <USB_SetTurnaroundTime+0x2a>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4a40      	ldr	r2, [pc, #256]	; (80074cc <USB_SetTurnaroundTime+0x120>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d802      	bhi.n	80073d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80073d0:	230f      	movs	r3, #15
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e062      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4a3c      	ldr	r2, [pc, #240]	; (80074cc <USB_SetTurnaroundTime+0x120>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d906      	bls.n	80073ec <USB_SetTurnaroundTime+0x40>
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	4a3b      	ldr	r2, [pc, #236]	; (80074d0 <USB_SetTurnaroundTime+0x124>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d802      	bhi.n	80073ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80073e6:	230e      	movs	r3, #14
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	e057      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4a38      	ldr	r2, [pc, #224]	; (80074d0 <USB_SetTurnaroundTime+0x124>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d906      	bls.n	8007402 <USB_SetTurnaroundTime+0x56>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4a37      	ldr	r2, [pc, #220]	; (80074d4 <USB_SetTurnaroundTime+0x128>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d802      	bhi.n	8007402 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80073fc:	230d      	movs	r3, #13
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e04c      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	4a33      	ldr	r2, [pc, #204]	; (80074d4 <USB_SetTurnaroundTime+0x128>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d906      	bls.n	8007418 <USB_SetTurnaroundTime+0x6c>
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	4a32      	ldr	r2, [pc, #200]	; (80074d8 <USB_SetTurnaroundTime+0x12c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d802      	bhi.n	8007418 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007412:	230c      	movs	r3, #12
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	e041      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4a2f      	ldr	r2, [pc, #188]	; (80074d8 <USB_SetTurnaroundTime+0x12c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d906      	bls.n	800742e <USB_SetTurnaroundTime+0x82>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4a2e      	ldr	r2, [pc, #184]	; (80074dc <USB_SetTurnaroundTime+0x130>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d802      	bhi.n	800742e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007428:	230b      	movs	r3, #11
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	e036      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4a2a      	ldr	r2, [pc, #168]	; (80074dc <USB_SetTurnaroundTime+0x130>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d906      	bls.n	8007444 <USB_SetTurnaroundTime+0x98>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	4a29      	ldr	r2, [pc, #164]	; (80074e0 <USB_SetTurnaroundTime+0x134>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d802      	bhi.n	8007444 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800743e:	230a      	movs	r3, #10
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	e02b      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4a26      	ldr	r2, [pc, #152]	; (80074e0 <USB_SetTurnaroundTime+0x134>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d906      	bls.n	800745a <USB_SetTurnaroundTime+0xae>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4a25      	ldr	r2, [pc, #148]	; (80074e4 <USB_SetTurnaroundTime+0x138>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d802      	bhi.n	800745a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007454:	2309      	movs	r3, #9
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	e020      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	4a21      	ldr	r2, [pc, #132]	; (80074e4 <USB_SetTurnaroundTime+0x138>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d906      	bls.n	8007470 <USB_SetTurnaroundTime+0xc4>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	4a20      	ldr	r2, [pc, #128]	; (80074e8 <USB_SetTurnaroundTime+0x13c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d802      	bhi.n	8007470 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800746a:	2308      	movs	r3, #8
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	e015      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4a1d      	ldr	r2, [pc, #116]	; (80074e8 <USB_SetTurnaroundTime+0x13c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d906      	bls.n	8007486 <USB_SetTurnaroundTime+0xda>
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	4a1c      	ldr	r2, [pc, #112]	; (80074ec <USB_SetTurnaroundTime+0x140>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d802      	bhi.n	8007486 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007480:	2307      	movs	r3, #7
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e00a      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007486:	2306      	movs	r3, #6
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	e007      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007492:	2309      	movs	r3, #9
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e001      	b.n	800749c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007498:	2309      	movs	r3, #9
 800749a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	029b      	lsls	r3, r3, #10
 80074b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80074b4:	431a      	orrs	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	00d8acbf 	.word	0x00d8acbf
 80074cc:	00e4e1bf 	.word	0x00e4e1bf
 80074d0:	00f423ff 	.word	0x00f423ff
 80074d4:	0106737f 	.word	0x0106737f
 80074d8:	011a499f 	.word	0x011a499f
 80074dc:	01312cff 	.word	0x01312cff
 80074e0:	014ca43f 	.word	0x014ca43f
 80074e4:	016e35ff 	.word	0x016e35ff
 80074e8:	01a6ab1f 	.word	0x01a6ab1f
 80074ec:	01e847ff 	.word	0x01e847ff

080074f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f043 0201 	orr.w	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f023 0201 	bic.w	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d106      	bne.n	8007560 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60da      	str	r2, [r3, #12]
 800755e:	e00b      	b.n	8007578 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60da      	str	r2, [r3, #12]
 8007572:	e001      	b.n	8007578 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e003      	b.n	8007580 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007578:	2032      	movs	r0, #50	; 0x32
 800757a:	f7fb fc01 	bl	8002d80 <HAL_Delay>

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007588:	b084      	sub	sp, #16
 800758a:	b580      	push	{r7, lr}
 800758c:	b086      	sub	sp, #24
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	e009      	b.n	80075bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	3340      	adds	r3, #64	; 0x40
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	2200      	movs	r2, #0
 80075b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3301      	adds	r3, #1
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b0e      	cmp	r3, #14
 80075c0:	d9f2      	bls.n	80075a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80075c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11c      	bne.n	8007602 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075d6:	f043 0302 	orr.w	r3, r3, #2
 80075da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
 8007600:	e00b      	b.n	800761a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007620:	461a      	mov	r2, r3
 8007622:	2300      	movs	r3, #0
 8007624:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762c:	4619      	mov	r1, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007634:	461a      	mov	r2, r3
 8007636:	680b      	ldr	r3, [r1, #0]
 8007638:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10c      	bne.n	800765a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d104      	bne.n	8007650 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007646:	2100      	movs	r1, #0
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f949 	bl	80078e0 <USB_SetDevSpeed>
 800764e:	e008      	b.n	8007662 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007650:	2101      	movs	r1, #1
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f944 	bl	80078e0 <USB_SetDevSpeed>
 8007658:	e003      	b.n	8007662 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800765a:	2103      	movs	r1, #3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f93f 	bl	80078e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007662:	2110      	movs	r1, #16
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f8f3 	bl	8007850 <USB_FlushTxFifo>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f911 	bl	800789c <USB_FlushRxFifo>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768a:	461a      	mov	r2, r3
 800768c:	2300      	movs	r3, #0
 800768e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007696:	461a      	mov	r2, r3
 8007698:	2300      	movs	r3, #0
 800769a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a2:	461a      	mov	r2, r3
 80076a4:	2300      	movs	r3, #0
 80076a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	e043      	b.n	8007736 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c4:	d118      	bne.n	80076f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d8:	461a      	mov	r2, r3
 80076da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	e013      	b.n	800770a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ee:	461a      	mov	r2, r3
 80076f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e008      	b.n	800770a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	461a      	mov	r2, r3
 8007706:	2300      	movs	r3, #0
 8007708:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007716:	461a      	mov	r2, r3
 8007718:	2300      	movs	r3, #0
 800771a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007728:	461a      	mov	r2, r3
 800772a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800772e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	3301      	adds	r3, #1
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	429a      	cmp	r2, r3
 800773c:	d3b7      	bcc.n	80076ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800773e:	2300      	movs	r3, #0
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	e043      	b.n	80077cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775a:	d118      	bne.n	800778e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776e:	461a      	mov	r2, r3
 8007770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	e013      	b.n	80077a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	461a      	mov	r2, r3
 8007786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	e008      	b.n	80077a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779a:	461a      	mov	r2, r3
 800779c:	2300      	movs	r3, #0
 800779e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ac:	461a      	mov	r2, r3
 80077ae:	2300      	movs	r3, #0
 80077b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	461a      	mov	r2, r3
 80077c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	3301      	adds	r3, #1
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d3b7      	bcc.n	8007744 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80077f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d105      	bne.n	8007808 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f043 0210 	orr.w	r2, r3, #16
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	4b0f      	ldr	r3, [pc, #60]	; (800784c <USB_DevInit+0x2c4>)
 800780e:	4313      	orrs	r3, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	f043 0208 	orr.w	r2, r3, #8
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d107      	bne.n	800783c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007834:	f043 0304 	orr.w	r3, r3, #4
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007848:	b004      	add	sp, #16
 800784a:	4770      	bx	lr
 800784c:	803c3800 	.word	0x803c3800

08007850 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	019b      	lsls	r3, r3, #6
 8007862:	f043 0220 	orr.w	r2, r3, #32
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3301      	adds	r3, #1
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4a09      	ldr	r2, [pc, #36]	; (8007898 <USB_FlushTxFifo+0x48>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d901      	bls.n	800787c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e006      	b.n	800788a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b20      	cmp	r3, #32
 8007886:	d0f0      	beq.n	800786a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	00030d40 	.word	0x00030d40

0800789c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2210      	movs	r2, #16
 80078ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3301      	adds	r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <USB_FlushRxFifo+0x40>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d901      	bls.n	80078c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e006      	b.n	80078ce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d0f0      	beq.n	80078ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	00030d40 	.word	0x00030d40

080078e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	68f9      	ldr	r1, [r7, #12]
 80078fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007900:	4313      	orrs	r3, r2
 8007902:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007912:	b480      	push	{r7}
 8007914:	b087      	sub	sp, #28
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0306 	and.w	r3, r3, #6
 800792a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007932:	2300      	movs	r3, #0
 8007934:	75fb      	strb	r3, [r7, #23]
 8007936:	e00a      	b.n	800794e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d002      	beq.n	8007944 <USB_GetDevSpeed+0x32>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b06      	cmp	r3, #6
 8007942:	d102      	bne.n	800794a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007944:	2302      	movs	r3, #2
 8007946:	75fb      	strb	r3, [r7, #23]
 8007948:	e001      	b.n	800794e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800794a:	230f      	movs	r3, #15
 800794c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800794e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007950:	4618      	mov	r0, r3
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d13a      	bne.n	80079ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797e:	69da      	ldr	r2, [r3, #28]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	2101      	movs	r1, #1
 800798a:	fa01 f303 	lsl.w	r3, r1, r3
 800798e:	b29b      	uxth	r3, r3
 8007990:	68f9      	ldr	r1, [r7, #12]
 8007992:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007996:	4313      	orrs	r3, r2
 8007998:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d155      	bne.n	8007a5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	78db      	ldrb	r3, [r3, #3]
 80079ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	059b      	lsls	r3, r3, #22
 80079d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079d4:	4313      	orrs	r3, r2
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	0151      	lsls	r1, r2, #5
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	440a      	add	r2, r1
 80079de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	e036      	b.n	8007a5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f4:	69da      	ldr	r2, [r3, #28]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	2101      	movs	r1, #1
 8007a00:	fa01 f303 	lsl.w	r3, r1, r3
 8007a04:	041b      	lsls	r3, r3, #16
 8007a06:	68f9      	ldr	r1, [r7, #12]
 8007a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d11a      	bne.n	8007a5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	78db      	ldrb	r3, [r3, #3]
 8007a40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a42:	430b      	orrs	r3, r1
 8007a44:	4313      	orrs	r3, r2
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
	...

08007a6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d161      	bne.n	8007b4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a9e:	d11f      	bne.n	8007ae0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	0151      	lsls	r1, r2, #5
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	440a      	add	r2, r1
 8007ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007abe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ade:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	2101      	movs	r1, #1
 8007af2:	fa01 f303 	lsl.w	r3, r1, r3
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	43db      	mvns	r3, r3
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b00:	4013      	ands	r3, r2
 8007b02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	f003 030f 	and.w	r3, r3, #15
 8007b14:	2101      	movs	r1, #1
 8007b16:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b24:	4013      	ands	r3, r2
 8007b26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	0159      	lsls	r1, r3, #5
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	440b      	add	r3, r1
 8007b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b42:	4619      	mov	r1, r3
 8007b44:	4b35      	ldr	r3, [pc, #212]	; (8007c1c <USB_DeactivateEndpoint+0x1b0>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	600b      	str	r3, [r1, #0]
 8007b4a:	e060      	b.n	8007c0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b62:	d11f      	bne.n	8007ba4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 030f 	and.w	r3, r3, #15
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bba:	041b      	lsls	r3, r3, #16
 8007bbc:	43db      	mvns	r3, r3
 8007bbe:	68f9      	ldr	r1, [r7, #12]
 8007bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bce:	69da      	ldr	r2, [r3, #28]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	f003 030f 	and.w	r3, r3, #15
 8007bd8:	2101      	movs	r1, #1
 8007bda:	fa01 f303 	lsl.w	r3, r1, r3
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	43db      	mvns	r3, r3
 8007be2:	68f9      	ldr	r1, [r7, #12]
 8007be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007be8:	4013      	ands	r3, r2
 8007bea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	0159      	lsls	r1, r3, #5
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	440b      	add	r3, r1
 8007c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c06:	4619      	mov	r1, r3
 8007c08:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <USB_DeactivateEndpoint+0x1b4>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	ec337800 	.word	0xec337800
 8007c20:	eff37800 	.word	0xeff37800

08007c24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08a      	sub	sp, #40	; 0x28
 8007c28:	af02      	add	r7, sp, #8
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	f040 815c 	bne.w	8007efe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d132      	bne.n	8007cb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	69fa      	ldr	r2, [r7, #28]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cac:	0cdb      	lsrs	r3, r3, #19
 8007cae:	04db      	lsls	r3, r3, #19
 8007cb0:	6113      	str	r3, [r2, #16]
 8007cb2:	e074      	b.n	8007d9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cce:	0cdb      	lsrs	r3, r3, #19
 8007cd0:	04db      	lsls	r3, r3, #19
 8007cd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	0151      	lsls	r1, r2, #5
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	440a      	add	r2, r1
 8007cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d04:	691a      	ldr	r2, [r3, #16]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6959      	ldr	r1, [r3, #20]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	440b      	add	r3, r1
 8007d10:	1e59      	subs	r1, r3, #1
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d1a:	04d9      	lsls	r1, r3, #19
 8007d1c:	4b9d      	ldr	r3, [pc, #628]	; (8007f94 <USB_EPStartXfer+0x370>)
 8007d1e:	400b      	ands	r3, r1
 8007d20:	69b9      	ldr	r1, [r7, #24]
 8007d22:	0148      	lsls	r0, r1, #5
 8007d24:	69f9      	ldr	r1, [r7, #28]
 8007d26:	4401      	add	r1, r0
 8007d28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3c:	691a      	ldr	r2, [r3, #16]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d46:	69b9      	ldr	r1, [r7, #24]
 8007d48:	0148      	lsls	r0, r1, #5
 8007d4a:	69f9      	ldr	r1, [r7, #28]
 8007d4c:	4401      	add	r1, r0
 8007d4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d52:	4313      	orrs	r3, r2
 8007d54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	78db      	ldrb	r3, [r3, #3]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d11f      	bne.n	8007d9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	0151      	lsls	r1, r2, #5
 8007d70:	69fa      	ldr	r2, [r7, #28]
 8007d72:	440a      	add	r2, r1
 8007d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007d7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	0151      	lsls	r1, r2, #5
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	440a      	add	r2, r1
 8007d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d14b      	bne.n	8007e3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d009      	beq.n	8007dc0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db8:	461a      	mov	r2, r3
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	78db      	ldrb	r3, [r3, #3]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d128      	bne.n	8007e1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d110      	bne.n	8007dfa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	e00f      	b.n	8007e1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	0151      	lsls	r1, r2, #5
 8007e0c:	69fa      	ldr	r2, [r7, #28]
 8007e0e:	440a      	add	r2, r1
 8007e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	0151      	lsls	r1, r2, #5
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	440a      	add	r2, r1
 8007e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	e12f      	b.n	800809c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	78db      	ldrb	r3, [r3, #3]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d015      	beq.n	8007e90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 8117 	beq.w	800809c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	2101      	movs	r1, #1
 8007e80:	fa01 f303 	lsl.w	r3, r1, r3
 8007e84:	69f9      	ldr	r1, [r7, #28]
 8007e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	634b      	str	r3, [r1, #52]	; 0x34
 8007e8e:	e105      	b.n	800809c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d110      	bne.n	8007ec2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	e00f      	b.n	8007ee2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	68d9      	ldr	r1, [r3, #12]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	b298      	uxth	r0, r3
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 fa2b 	bl	8008352 <USB_WritePacket>
 8007efc:	e0ce      	b.n	800809c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	0151      	lsls	r1, r2, #5
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	440a      	add	r2, r1
 8007f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f18:	0cdb      	lsrs	r3, r3, #19
 8007f1a:	04db      	lsls	r3, r3, #19
 8007f1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	0151      	lsls	r1, r2, #5
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	440a      	add	r2, r1
 8007f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d126      	bne.n	8007f98 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	0148      	lsls	r0, r1, #5
 8007f64:	69f9      	ldr	r1, [r7, #28]
 8007f66:	4401      	add	r1, r0
 8007f68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	0151      	lsls	r1, r2, #5
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	440a      	add	r2, r1
 8007f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f8e:	6113      	str	r3, [r2, #16]
 8007f90:	e036      	b.n	8008000 <USB_EPStartXfer+0x3dc>
 8007f92:	bf00      	nop
 8007f94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	695a      	ldr	r2, [r3, #20]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	1e5a      	subs	r2, r3, #1
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	8afb      	ldrh	r3, [r7, #22]
 8007fbe:	04d9      	lsls	r1, r3, #19
 8007fc0:	4b39      	ldr	r3, [pc, #228]	; (80080a8 <USB_EPStartXfer+0x484>)
 8007fc2:	400b      	ands	r3, r1
 8007fc4:	69b9      	ldr	r1, [r7, #24]
 8007fc6:	0148      	lsls	r0, r1, #5
 8007fc8:	69f9      	ldr	r1, [r7, #28]
 8007fca:	4401      	add	r1, r0
 8007fcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe0:	691a      	ldr	r2, [r3, #16]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	8af9      	ldrh	r1, [r7, #22]
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff0:	69b9      	ldr	r1, [r7, #24]
 8007ff2:	0148      	lsls	r0, r1, #5
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	4401      	add	r1, r0
 8007ff8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d10d      	bne.n	8008022 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	68d9      	ldr	r1, [r3, #12]
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	460a      	mov	r2, r1
 8008020:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	78db      	ldrb	r3, [r3, #3]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d128      	bne.n	800807c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008036:	2b00      	cmp	r3, #0
 8008038:	d110      	bne.n	800805c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	440a      	add	r2, r1
 8008050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	e00f      	b.n	800807c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800807a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	440a      	add	r2, r1
 8008092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008096:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800809a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3720      	adds	r7, #32
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	1ff80000 	.word	0x1ff80000

080080ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	785b      	ldrb	r3, [r3, #1]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	f040 80cd 	bne.w	8008268 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d132      	bne.n	800813c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008118:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	440a      	add	r2, r1
 8008130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008134:	0cdb      	lsrs	r3, r3, #19
 8008136:	04db      	lsls	r3, r3, #19
 8008138:	6113      	str	r3, [r2, #16]
 800813a:	e04e      	b.n	80081da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	0151      	lsls	r1, r2, #5
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	440a      	add	r2, r1
 8008152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008156:	0cdb      	lsrs	r3, r3, #19
 8008158:	04db      	lsls	r3, r3, #19
 800815a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	0151      	lsls	r1, r2, #5
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	440a      	add	r2, r1
 8008172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008176:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800817a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800817e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	695a      	ldr	r2, [r3, #20]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	429a      	cmp	r2, r3
 800818a:	d903      	bls.n	8008194 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	0151      	lsls	r1, r2, #5
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	440a      	add	r2, r1
 80081aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ca:	6939      	ldr	r1, [r7, #16]
 80081cc:	0148      	lsls	r0, r1, #5
 80081ce:	6979      	ldr	r1, [r7, #20]
 80081d0:	4401      	add	r1, r0
 80081d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081d6:	4313      	orrs	r3, r2
 80081d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d11e      	bne.n	800821e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d009      	beq.n	80081fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f4:	461a      	mov	r2, r3
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	440a      	add	r2, r1
 8008212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	e092      	b.n	8008344 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	0151      	lsls	r1, r2, #5
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	440a      	add	r2, r1
 8008234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008238:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800823c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d07e      	beq.n	8008344 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	2101      	movs	r1, #1
 8008258:	fa01 f303 	lsl.w	r3, r1, r3
 800825c:	6979      	ldr	r1, [r7, #20]
 800825e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008262:	4313      	orrs	r3, r2
 8008264:	634b      	str	r3, [r1, #52]	; 0x34
 8008266:	e06d      	b.n	8008344 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	0151      	lsls	r1, r2, #5
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	440a      	add	r2, r1
 800827e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008282:	0cdb      	lsrs	r3, r3, #19
 8008284:	04db      	lsls	r3, r3, #19
 8008286:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e8:	691a      	ldr	r2, [r3, #16]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082f2:	6939      	ldr	r1, [r7, #16]
 80082f4:	0148      	lsls	r0, r1, #5
 80082f6:	6979      	ldr	r1, [r7, #20]
 80082f8:	4401      	add	r1, r0
 80082fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082fe:	4313      	orrs	r3, r2
 8008300:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d10d      	bne.n	8008324 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	68d9      	ldr	r1, [r3, #12]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008320:	460a      	mov	r2, r1
 8008322:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800833e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008342:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008352:	b480      	push	{r7}
 8008354:	b089      	sub	sp, #36	; 0x24
 8008356:	af00      	add	r7, sp, #0
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	60b9      	str	r1, [r7, #8]
 800835c:	4611      	mov	r1, r2
 800835e:	461a      	mov	r2, r3
 8008360:	460b      	mov	r3, r1
 8008362:	71fb      	strb	r3, [r7, #7]
 8008364:	4613      	mov	r3, r2
 8008366:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008370:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11a      	bne.n	80083ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008378:	88bb      	ldrh	r3, [r7, #4]
 800837a:	3303      	adds	r3, #3
 800837c:	089b      	lsrs	r3, r3, #2
 800837e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008380:	2300      	movs	r3, #0
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	e00f      	b.n	80083a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	031a      	lsls	r2, r3, #12
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	4413      	add	r3, r2
 800838e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008392:	461a      	mov	r2, r3
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6013      	str	r3, [r2, #0]
      pSrc++;
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	3304      	adds	r3, #4
 800839e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	3301      	adds	r3, #1
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d3eb      	bcc.n	8008386 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3724      	adds	r7, #36	; 0x24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80083bc:	b480      	push	{r7}
 80083be:	b089      	sub	sp, #36	; 0x24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	3303      	adds	r3, #3
 80083d6:	089b      	lsrs	r3, r3, #2
 80083d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80083da:	2300      	movs	r3, #0
 80083dc:	61bb      	str	r3, [r7, #24]
 80083de:	e00b      	b.n	80083f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	3304      	adds	r3, #4
 80083f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	3301      	adds	r3, #1
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d3ef      	bcc.n	80083e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008400:	69fb      	ldr	r3, [r7, #28]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3724      	adds	r7, #36	; 0x24
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d12c      	bne.n	8008484 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	db12      	blt.n	8008462 <USB_EPSetStall+0x54>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00f      	beq.n	8008462 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	0151      	lsls	r1, r2, #5
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	440a      	add	r2, r1
 8008458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800845c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008460:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	440a      	add	r2, r1
 8008478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800847c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	e02b      	b.n	80084dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	db12      	blt.n	80084bc <USB_EPSetStall+0xae>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00f      	beq.n	80084bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d128      	bne.n	8008558 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008520:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008524:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	78db      	ldrb	r3, [r3, #3]
 800852a:	2b03      	cmp	r3, #3
 800852c:	d003      	beq.n	8008536 <USB_EPClearStall+0x4c>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	78db      	ldrb	r3, [r3, #3]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d138      	bne.n	80085a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	440a      	add	r2, r1
 800854c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e027      	b.n	80085a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	440a      	add	r2, r1
 800856e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008576:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	78db      	ldrb	r3, [r3, #3]
 800857c:	2b03      	cmp	r3, #3
 800857e:	d003      	beq.n	8008588 <USB_EPClearStall+0x9e>
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	78db      	ldrb	r3, [r3, #3]
 8008584:	2b02      	cmp	r3, #2
 8008586:	d10f      	bne.n	80085a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085ea:	68f9      	ldr	r1, [r7, #12]
 80085ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085f0:	4313      	orrs	r3, r2
 80085f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800861c:	f023 0303 	bic.w	r3, r3, #3
 8008620:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008630:	f023 0302 	bic.w	r3, r3, #2
 8008634:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800865e:	f023 0303 	bic.w	r3, r3, #3
 8008662:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008672:	f043 0302 	orr.w	r3, r3, #2
 8008676:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008686:	b480      	push	{r7}
 8008688:	b085      	sub	sp, #20
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	4013      	ands	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800869e:	68fb      	ldr	r3, [r7, #12]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	4013      	ands	r3, r2
 80086ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	0c1b      	lsrs	r3, r3, #16
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	4013      	ands	r3, r2
 8008702:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	b29b      	uxth	r3, r3
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	4013      	ands	r3, r2
 8008740:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008742:	68bb      	ldr	r3, [r7, #8]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
 8008780:	01db      	lsls	r3, r3, #7
 8008782:	b2db      	uxtb	r3, r3
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	4313      	orrs	r3, r2
 8008788:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4013      	ands	r3, r2
 800879c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800879e:	68bb      	ldr	r3, [r7, #8]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	371c      	adds	r7, #28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	f003 0301 	and.w	r3, r3, #1
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
	...

08008810 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	460b      	mov	r3, r1
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	333c      	adds	r3, #60	; 0x3c
 8008826:	3304      	adds	r3, #4
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	4a26      	ldr	r2, [pc, #152]	; (80088c8 <USB_EP0_OutStart+0xb8>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d90a      	bls.n	800884a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008844:	d101      	bne.n	800884a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	e037      	b.n	80088ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008850:	461a      	mov	r2, r3
 8008852:	2300      	movs	r3, #0
 8008854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008864:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008868:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008878:	f043 0318 	orr.w	r3, r3, #24
 800887c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800888c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008890:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008892:	7afb      	ldrb	r3, [r7, #11]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d10f      	bne.n	80088b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889e:	461a      	mov	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80088b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	371c      	adds	r7, #28
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	4f54300a 	.word	0x4f54300a

080088cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3301      	adds	r3, #1
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4a13      	ldr	r2, [pc, #76]	; (8008930 <USB_CoreReset+0x64>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d901      	bls.n	80088ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e01b      	b.n	8008922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	daf2      	bge.n	80088d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f043 0201 	orr.w	r2, r3, #1
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3301      	adds	r3, #1
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4a09      	ldr	r2, [pc, #36]	; (8008930 <USB_CoreReset+0x64>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d901      	bls.n	8008914 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e006      	b.n	8008922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b01      	cmp	r3, #1
 800891e:	d0f0      	beq.n	8008902 <USB_CoreReset+0x36>

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	00030d40 	.word	0x00030d40

08008934 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008940:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008944:	f002 f930 	bl	800aba8 <malloc>
 8008948:	4603      	mov	r3, r0
 800894a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800895a:	2302      	movs	r3, #2
 800895c:	e066      	b.n	8008a2c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	7c1b      	ldrb	r3, [r3, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d119      	bne.n	80089a2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800896e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008972:	2202      	movs	r2, #2
 8008974:	2181      	movs	r1, #129	; 0x81
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 ff9d 	bl	800a8b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008986:	2202      	movs	r2, #2
 8008988:	2101      	movs	r1, #1
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 ff93 	bl	800a8b6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2210      	movs	r2, #16
 800899c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80089a0:	e016      	b.n	80089d0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089a2:	2340      	movs	r3, #64	; 0x40
 80089a4:	2202      	movs	r2, #2
 80089a6:	2181      	movs	r1, #129	; 0x81
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 ff84 	bl	800a8b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089b4:	2340      	movs	r3, #64	; 0x40
 80089b6:	2202      	movs	r2, #2
 80089b8:	2101      	movs	r1, #1
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 ff7b 	bl	800a8b6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2210      	movs	r2, #16
 80089cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089d0:	2308      	movs	r3, #8
 80089d2:	2203      	movs	r2, #3
 80089d4:	2182      	movs	r1, #130	; 0x82
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f001 ff6d 	bl	800a8b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	7c1b      	ldrb	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d109      	bne.n	8008a1a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a10:	2101      	movs	r1, #1
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f002 f83e 	bl	800aa94 <USBD_LL_PrepareReceive>
 8008a18:	e007      	b.n	8008a2a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a20:	2340      	movs	r3, #64	; 0x40
 8008a22:	2101      	movs	r1, #1
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f002 f835 	bl	800aa94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a44:	2181      	movs	r1, #129	; 0x81
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 ff5b 	bl	800a902 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a52:	2101      	movs	r1, #1
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f001 ff54 	bl	800a902 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a62:	2182      	movs	r1, #130	; 0x82
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 ff4c 	bl	800a902 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a94:	4618      	mov	r0, r3
 8008a96:	f002 f88f 	bl	800abb8 <free>
    pdev->pClassData = NULL;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008abc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d03a      	beq.n	8008b4c <USBD_CDC_Setup+0xa0>
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	f040 8097 	bne.w	8008c0a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	88db      	ldrh	r3, [r3, #6]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d029      	beq.n	8008b38 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	b25b      	sxtb	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	da11      	bge.n	8008b12 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008afa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	88d2      	ldrh	r2, [r2, #6]
 8008b00:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b02:	6939      	ldr	r1, [r7, #16]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	88db      	ldrh	r3, [r3, #6]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 fa9d 	bl	800a04a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008b10:	e082      	b.n	8008c18 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	785a      	ldrb	r2, [r3, #1]
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	88db      	ldrh	r3, [r3, #6]
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b28:	6939      	ldr	r1, [r7, #16]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	88db      	ldrh	r3, [r3, #6]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 fab6 	bl	800a0a2 <USBD_CtlPrepareRx>
    break;
 8008b36:	e06f      	b.n	8008c18 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	7850      	ldrb	r0, [r2, #1]
 8008b44:	2200      	movs	r2, #0
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	4798      	blx	r3
    break;
 8008b4a:	e065      	b.n	8008c18 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	785b      	ldrb	r3, [r3, #1]
 8008b50:	2b0b      	cmp	r3, #11
 8008b52:	d84f      	bhi.n	8008bf4 <USBD_CDC_Setup+0x148>
 8008b54:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBD_CDC_Setup+0xb0>)
 8008b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5a:	bf00      	nop
 8008b5c:	08008b8d 	.word	0x08008b8d
 8008b60:	08008c03 	.word	0x08008c03
 8008b64:	08008bf5 	.word	0x08008bf5
 8008b68:	08008bf5 	.word	0x08008bf5
 8008b6c:	08008bf5 	.word	0x08008bf5
 8008b70:	08008bf5 	.word	0x08008bf5
 8008b74:	08008bf5 	.word	0x08008bf5
 8008b78:	08008bf5 	.word	0x08008bf5
 8008b7c:	08008bf5 	.word	0x08008bf5
 8008b80:	08008bf5 	.word	0x08008bf5
 8008b84:	08008bb5 	.word	0x08008bb5
 8008b88:	08008bdd 	.word	0x08008bdd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d107      	bne.n	8008ba6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b96:	f107 030c 	add.w	r3, r7, #12
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 fa53 	bl	800a04a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008ba4:	e030      	b.n	8008c08 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f9dd 	bl	8009f68 <USBD_CtlError>
        ret = USBD_FAIL;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb2:	e029      	b.n	8008c08 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d107      	bne.n	8008bce <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bbe:	f107 030f 	add.w	r3, r7, #15
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 fa3f 	bl	800a04a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008bcc:	e01c      	b.n	8008c08 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 f9c9 	bl	8009f68 <USBD_CtlError>
        ret = USBD_FAIL;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8008bda:	e015      	b.n	8008c08 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d00f      	beq.n	8008c06 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 f9bd 	bl	8009f68 <USBD_CtlError>
        ret = USBD_FAIL;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008bf2:	e008      	b.n	8008c06 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 f9b6 	bl	8009f68 <USBD_CtlError>
      ret = USBD_FAIL;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8008c00:	e002      	b.n	8008c08 <USBD_CDC_Setup+0x15c>
      break;
 8008c02:	bf00      	nop
 8008c04:	e008      	b.n	8008c18 <USBD_CDC_Setup+0x16c>
      break;
 8008c06:	bf00      	nop
    }
    break;
 8008c08:	e006      	b.n	8008c18 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 f9ab 	bl	8009f68 <USBD_CtlError>
    ret = USBD_FAIL;
 8008c12:	2303      	movs	r3, #3
 8008c14:	75fb      	strb	r3, [r7, #23]
    break;
 8008c16:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop

08008c24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e049      	b.n	8008cda <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008c4e:	78fa      	ldrb	r2, [r7, #3]
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3318      	adds	r3, #24
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d029      	beq.n	8008cb8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c64:	78fa      	ldrb	r2, [r7, #3]
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	3318      	adds	r3, #24
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	78f9      	ldrb	r1, [r7, #3]
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	1a5b      	subs	r3, r3, r1
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4403      	add	r3, r0
 8008c84:	3344      	adds	r3, #68	; 0x44
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c8c:	fb03 f301 	mul.w	r3, r3, r1
 8008c90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d110      	bne.n	8008cb8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3318      	adds	r3, #24
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008caa:	78f9      	ldrb	r1, [r7, #3]
 8008cac:	2300      	movs	r3, #0
 8008cae:	2200      	movs	r2, #0
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 fece 	bl	800aa52 <USBD_LL_Transmit>
 8008cb6:	e00f      	b.n	8008cd8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e015      	b.n	8008d30 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f001 fee4 	bl	800aad6 <USBD_LL_GetRxDataSize>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d46:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d015      	beq.n	8008d7e <USBD_CDC_EP0_RxReady+0x46>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d58:	2bff      	cmp	r3, #255	; 0xff
 8008d5a:	d010      	beq.n	8008d7e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008d6a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d72:	b292      	uxth	r2, r2
 8008d74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	22ff      	movs	r2, #255	; 0xff
 8008d7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2243      	movs	r2, #67	; 0x43
 8008d94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008d96:	4b03      	ldr	r3, [pc, #12]	; (8008da4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	20000104 	.word	0x20000104

08008da8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2243      	movs	r2, #67	; 0x43
 8008db4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008db6:	4b03      	ldr	r3, [pc, #12]	; (8008dc4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	200000c0 	.word	0x200000c0

08008dc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2243      	movs	r2, #67	; 0x43
 8008dd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008dd6:	4b03      	ldr	r3, [pc, #12]	; (8008de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	20000148 	.word	0x20000148

08008de8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	220a      	movs	r2, #10
 8008df4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008df6:	4b03      	ldr	r3, [pc, #12]	; (8008e04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	2000007c 	.word	0x2000007c

08008e08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e004      	b.n	8008e26 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b087      	sub	sp, #28
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e44:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e74:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e9a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e01a      	b.n	8008ee4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d114      	bne.n	8008ee2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008ed6:	2181      	movs	r1, #129	; 0x81
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 fdba 	bl	800aa52 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008efa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e016      	b.n	8008f38 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7c1b      	ldrb	r3, [r3, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 fdb8 	bl	800aa94 <USBD_LL_PrepareReceive>
 8008f24:	e007      	b.n	8008f36 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f2c:	2340      	movs	r3, #64	; 0x40
 8008f2e:	2101      	movs	r1, #1
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 fdaf 	bl	800aa94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e025      	b.n	8008fa4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	79fa      	ldrb	r2, [r7, #7]
 8008f96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f001 fc25 	bl	800a7e8 <USBD_LL_Init>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e010      	b.n	8008fe6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd4:	f107 020e 	add.w	r2, r7, #14
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	4602      	mov	r2, r0
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 fc42 	bl	800a880 <USBD_LL_Start>
 8008ffc:	4603      	mov	r3, r0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009028:	2303      	movs	r3, #3
 800902a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009032:	2b00      	cmp	r3, #0
 8009034:	d009      	beq.n	800904a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	78fa      	ldrb	r2, [r7, #3]
 8009040:	4611      	mov	r1, r2
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	4798      	blx	r3
 8009046:	4603      	mov	r3, r0
 8009048:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d007      	beq.n	800907a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	78fa      	ldrb	r2, [r7, #3]
 8009074:	4611      	mov	r1, r2
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	4798      	blx	r3
  }

  return USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 ff2c 	bl	8009ef4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80090aa:	461a      	mov	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090b8:	f003 031f 	and.w	r3, r3, #31
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d00e      	beq.n	80090de <USBD_LL_SetupStage+0x5a>
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d302      	bcc.n	80090ca <USBD_LL_SetupStage+0x46>
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d014      	beq.n	80090f2 <USBD_LL_SetupStage+0x6e>
 80090c8:	e01d      	b.n	8009106 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa18 	bl	8009508 <USBD_StdDevReq>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
      break;
 80090dc:	e020      	b.n	8009120 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fa7c 	bl	80095e4 <USBD_StdItfReq>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
      break;
 80090f0:	e016      	b.n	8009120 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fab8 	bl	8009670 <USBD_StdEPReq>
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
      break;
 8009104:	e00c      	b.n	8009120 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800910c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009110:	b2db      	uxtb	r3, r3
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 fc13 	bl	800a940 <USBD_LL_StallEP>
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]
      break;
 800911e:	bf00      	nop
  }

  return ret;
 8009120:	7bfb      	ldrb	r3, [r7, #15]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b086      	sub	sp, #24
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	460b      	mov	r3, r1
 8009134:	607a      	str	r2, [r7, #4]
 8009136:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d137      	bne.n	80091ae <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009144:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800914c:	2b03      	cmp	r3, #3
 800914e:	d14a      	bne.n	80091e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	429a      	cmp	r2, r3
 800915a:	d913      	bls.n	8009184 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	1ad2      	subs	r2, r2, r3
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	4293      	cmp	r3, r2
 8009174:	bf28      	it	cs
 8009176:	4613      	movcs	r3, r2
 8009178:	461a      	mov	r2, r3
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 ffad 	bl	800a0dc <USBD_CtlContinueRx>
 8009182:	e030      	b.n	80091e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00a      	beq.n	80091a6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009196:	2b03      	cmp	r3, #3
 8009198:	d105      	bne.n	80091a6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 ffa9 	bl	800a0fe <USBD_CtlSendStatus>
 80091ac:	e01b      	b.n	80091e6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d013      	beq.n	80091e2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d10e      	bne.n	80091e2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	7afa      	ldrb	r2, [r7, #11]
 80091ce:	4611      	mov	r1, r2
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	4798      	blx	r3
 80091d4:	4603      	mov	r3, r0
 80091d6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	e002      	b.n	80091e8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e000      	b.n	80091e8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	460b      	mov	r3, r1
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80091fe:	7afb      	ldrb	r3, [r7, #11]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d16a      	bne.n	80092da <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3314      	adds	r3, #20
 8009208:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009210:	2b02      	cmp	r3, #2
 8009212:	d155      	bne.n	80092c0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	689a      	ldr	r2, [r3, #8]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	429a      	cmp	r2, r3
 800921e:	d914      	bls.n	800924a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	1ad2      	subs	r2, r2, r3
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	461a      	mov	r2, r3
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 ff22 	bl	800a080 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800923c:	2300      	movs	r3, #0
 800923e:	2200      	movs	r2, #0
 8009240:	2100      	movs	r1, #0
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f001 fc26 	bl	800aa94 <USBD_LL_PrepareReceive>
 8009248:	e03a      	b.n	80092c0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	429a      	cmp	r2, r3
 8009254:	d11c      	bne.n	8009290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800925e:	429a      	cmp	r2, r3
 8009260:	d316      	bcc.n	8009290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800926c:	429a      	cmp	r2, r3
 800926e:	d20f      	bcs.n	8009290 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009270:	2200      	movs	r2, #0
 8009272:	2100      	movs	r1, #0
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 ff03 	bl	800a080 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009282:	2300      	movs	r3, #0
 8009284:	2200      	movs	r2, #0
 8009286:	2100      	movs	r1, #0
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f001 fc03 	bl	800aa94 <USBD_LL_PrepareReceive>
 800928e:	e017      	b.n	80092c0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d105      	bne.n	80092b2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092b2:	2180      	movs	r1, #128	; 0x80
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f001 fb43 	bl	800a940 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 ff32 	bl	800a124 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d123      	bne.n	8009312 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7ff fe9b 	bl	8009006 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092d8:	e01b      	b.n	8009312 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d013      	beq.n	800930e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d10e      	bne.n	800930e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	7afa      	ldrb	r2, [r7, #11]
 80092fa:	4611      	mov	r1, r2
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	4798      	blx	r3
 8009300:	4603      	mov	r3, r0
 8009302:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	e002      	b.n	8009314 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800930e:	2303      	movs	r3, #3
 8009310:	e000      	b.n	8009314 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009348:	2b00      	cmp	r3, #0
 800934a:	d009      	beq.n	8009360 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6852      	ldr	r2, [r2, #4]
 8009358:	b2d2      	uxtb	r2, r2
 800935a:	4611      	mov	r1, r2
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009360:	2340      	movs	r3, #64	; 0x40
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 faa5 	bl	800a8b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2240      	movs	r2, #64	; 0x40
 8009378:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	2200      	movs	r2, #0
 8009380:	2180      	movs	r1, #128	; 0x80
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 fa97 	bl	800a8b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2240      	movs	r2, #64	; 0x40
 8009392:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	460b      	mov	r3, r1
 80093a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	78fa      	ldrb	r2, [r7, #3]
 80093ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2204      	movs	r2, #4
 80093d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d105      	bne.n	8009406 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009422:	2b03      	cmp	r3, #3
 8009424:	d10b      	bne.n	800943e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b082      	sub	sp, #8
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d009      	beq.n	80094c0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	6852      	ldr	r2, [r2, #4]
 80094b8:	b2d2      	uxtb	r2, r2
 80094ba:	4611      	mov	r1, r2
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	4798      	blx	r3
  }

  return USBD_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b087      	sub	sp, #28
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	3301      	adds	r3, #1
 80094e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80094e8:	8a3b      	ldrh	r3, [r7, #16]
 80094ea:	021b      	lsls	r3, r3, #8
 80094ec:	b21a      	sxth	r2, r3
 80094ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	b21b      	sxth	r3, r3
 80094f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80094f8:	89fb      	ldrh	r3, [r7, #14]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
	...

08009508 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800951e:	2b20      	cmp	r3, #32
 8009520:	d004      	beq.n	800952c <USBD_StdDevReq+0x24>
 8009522:	2b40      	cmp	r3, #64	; 0x40
 8009524:	d002      	beq.n	800952c <USBD_StdDevReq+0x24>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <USBD_StdDevReq+0x38>
 800952a:	e050      	b.n	80095ce <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
 800953a:	4603      	mov	r3, r0
 800953c:	73fb      	strb	r3, [r7, #15]
    break;
 800953e:	e04b      	b.n	80095d8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	785b      	ldrb	r3, [r3, #1]
 8009544:	2b09      	cmp	r3, #9
 8009546:	d83c      	bhi.n	80095c2 <USBD_StdDevReq+0xba>
 8009548:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <USBD_StdDevReq+0x48>)
 800954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954e:	bf00      	nop
 8009550:	080095a5 	.word	0x080095a5
 8009554:	080095b9 	.word	0x080095b9
 8009558:	080095c3 	.word	0x080095c3
 800955c:	080095af 	.word	0x080095af
 8009560:	080095c3 	.word	0x080095c3
 8009564:	08009583 	.word	0x08009583
 8009568:	08009579 	.word	0x08009579
 800956c:	080095c3 	.word	0x080095c3
 8009570:	0800959b 	.word	0x0800959b
 8009574:	0800958d 	.word	0x0800958d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f9ce 	bl	800991c <USBD_GetDescriptor>
      break;
 8009580:	e024      	b.n	80095cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fb33 	bl	8009bf0 <USBD_SetAddress>
      break;
 800958a:	e01f      	b.n	80095cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fb70 	bl	8009c74 <USBD_SetConfig>
 8009594:	4603      	mov	r3, r0
 8009596:	73fb      	strb	r3, [r7, #15]
      break;
 8009598:	e018      	b.n	80095cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fc0d 	bl	8009dbc <USBD_GetConfig>
      break;
 80095a2:	e013      	b.n	80095cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fc3c 	bl	8009e24 <USBD_GetStatus>
      break;
 80095ac:	e00e      	b.n	80095cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fc6a 	bl	8009e8a <USBD_SetFeature>
      break;
 80095b6:	e009      	b.n	80095cc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fc79 	bl	8009eb2 <USBD_ClrFeature>
      break;
 80095c0:	e004      	b.n	80095cc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fccf 	bl	8009f68 <USBD_CtlError>
      break;
 80095ca:	bf00      	nop
    }
    break;
 80095cc:	e004      	b.n	80095d8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fcc9 	bl	8009f68 <USBD_CtlError>
    break;
 80095d6:	bf00      	nop
  }

  return ret;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop

080095e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d003      	beq.n	8009606 <USBD_StdItfReq+0x22>
 80095fe:	2b40      	cmp	r3, #64	; 0x40
 8009600:	d001      	beq.n	8009606 <USBD_StdItfReq+0x22>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d12a      	bne.n	800965c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800960c:	3b01      	subs	r3, #1
 800960e:	2b02      	cmp	r3, #2
 8009610:	d81d      	bhi.n	800964e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	889b      	ldrh	r3, [r3, #4]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b01      	cmp	r3, #1
 800961a:	d813      	bhi.n	8009644 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	88db      	ldrh	r3, [r3, #6]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d110      	bne.n	8009658 <USBD_StdItfReq+0x74>
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10d      	bne.n	8009658 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fd5e 	bl	800a0fe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009642:	e009      	b.n	8009658 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fc8e 	bl	8009f68 <USBD_CtlError>
      break;
 800964c:	e004      	b.n	8009658 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fc89 	bl	8009f68 <USBD_CtlError>
      break;
 8009656:	e000      	b.n	800965a <USBD_StdItfReq+0x76>
      break;
 8009658:	bf00      	nop
    }
    break;
 800965a:	e004      	b.n	8009666 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fc82 	bl	8009f68 <USBD_CtlError>
    break;
 8009664:	bf00      	nop
  }

  return ret;
 8009666:	7bfb      	ldrb	r3, [r7, #15]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	889b      	ldrh	r3, [r3, #4]
 8009682:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800968c:	2b20      	cmp	r3, #32
 800968e:	d004      	beq.n	800969a <USBD_StdEPReq+0x2a>
 8009690:	2b40      	cmp	r3, #64	; 0x40
 8009692:	d002      	beq.n	800969a <USBD_StdEPReq+0x2a>
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00a      	beq.n	80096ae <USBD_StdEPReq+0x3e>
 8009698:	e135      	b.n	8009906 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4798      	blx	r3
 80096a8:	4603      	mov	r3, r0
 80096aa:	73fb      	strb	r3, [r7, #15]
    break;
 80096ac:	e130      	b.n	8009910 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d03e      	beq.n	8009734 <USBD_StdEPReq+0xc4>
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d002      	beq.n	80096c0 <USBD_StdEPReq+0x50>
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d077      	beq.n	80097ae <USBD_StdEPReq+0x13e>
 80096be:	e11c      	b.n	80098fa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d002      	beq.n	80096d0 <USBD_StdEPReq+0x60>
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d015      	beq.n	80096fa <USBD_StdEPReq+0x8a>
 80096ce:	e02b      	b.n	8009728 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00c      	beq.n	80096f0 <USBD_StdEPReq+0x80>
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b80      	cmp	r3, #128	; 0x80
 80096da:	d009      	beq.n	80096f0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f001 f92d 	bl	800a940 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096e6:	2180      	movs	r1, #128	; 0x80
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 f929 	bl	800a940 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80096ee:	e020      	b.n	8009732 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fc38 	bl	8009f68 <USBD_CtlError>
        break;
 80096f8:	e01b      	b.n	8009732 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	885b      	ldrh	r3, [r3, #2]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10e      	bne.n	8009720 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00b      	beq.n	8009720 <USBD_StdEPReq+0xb0>
 8009708:	7bbb      	ldrb	r3, [r7, #14]
 800970a:	2b80      	cmp	r3, #128	; 0x80
 800970c:	d008      	beq.n	8009720 <USBD_StdEPReq+0xb0>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	88db      	ldrh	r3, [r3, #6]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d104      	bne.n	8009720 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f001 f910 	bl	800a940 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fcec 	bl	800a0fe <USBD_CtlSendStatus>

        break;
 8009726:	e004      	b.n	8009732 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fc1c 	bl	8009f68 <USBD_CtlError>
        break;
 8009730:	bf00      	nop
      }
      break;
 8009732:	e0e7      	b.n	8009904 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800973a:	2b02      	cmp	r3, #2
 800973c:	d002      	beq.n	8009744 <USBD_StdEPReq+0xd4>
 800973e:	2b03      	cmp	r3, #3
 8009740:	d015      	beq.n	800976e <USBD_StdEPReq+0xfe>
 8009742:	e02d      	b.n	80097a0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00c      	beq.n	8009764 <USBD_StdEPReq+0xf4>
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	2b80      	cmp	r3, #128	; 0x80
 800974e:	d009      	beq.n	8009764 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 f8f3 	bl	800a940 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800975a:	2180      	movs	r1, #128	; 0x80
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f001 f8ef 	bl	800a940 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009762:	e023      	b.n	80097ac <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fbfe 	bl	8009f68 <USBD_CtlError>
        break;
 800976c:	e01e      	b.n	80097ac <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	885b      	ldrh	r3, [r3, #2]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d119      	bne.n	80097aa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f8fa 	bl	800a97e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fcb7 	bl	800a0fe <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	4798      	blx	r3
        }
        break;
 800979e:	e004      	b.n	80097aa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fbe0 	bl	8009f68 <USBD_CtlError>
        break;
 80097a8:	e000      	b.n	80097ac <USBD_StdEPReq+0x13c>
        break;
 80097aa:	bf00      	nop
      }
      break;
 80097ac:	e0aa      	b.n	8009904 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d002      	beq.n	80097be <USBD_StdEPReq+0x14e>
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d032      	beq.n	8009822 <USBD_StdEPReq+0x1b2>
 80097bc:	e097      	b.n	80098ee <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d007      	beq.n	80097d4 <USBD_StdEPReq+0x164>
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	2b80      	cmp	r3, #128	; 0x80
 80097c8:	d004      	beq.n	80097d4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fbcb 	bl	8009f68 <USBD_CtlError>
          break;
 80097d2:	e091      	b.n	80098f8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	da0b      	bge.n	80097f4 <USBD_StdEPReq+0x184>
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	3310      	adds	r3, #16
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	4413      	add	r3, r2
 80097f0:	3304      	adds	r3, #4
 80097f2:	e00b      	b.n	800980c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	4413      	add	r3, r2
 800980a:	3304      	adds	r3, #4
 800980c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2200      	movs	r2, #0
 8009812:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2202      	movs	r2, #2
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fc15 	bl	800a04a <USBD_CtlSendData>
        break;
 8009820:	e06a      	b.n	80098f8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009826:	2b00      	cmp	r3, #0
 8009828:	da11      	bge.n	800984e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	f003 020f 	and.w	r2, r3, #15
 8009830:	6879      	ldr	r1, [r7, #4]
 8009832:	4613      	mov	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	440b      	add	r3, r1
 800983c:	3324      	adds	r3, #36	; 0x24
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d117      	bne.n	8009874 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fb8e 	bl	8009f68 <USBD_CtlError>
            break;
 800984c:	e054      	b.n	80098f8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	f003 020f 	and.w	r2, r3, #15
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	440b      	add	r3, r1
 8009860:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d104      	bne.n	8009874 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fb7b 	bl	8009f68 <USBD_CtlError>
            break;
 8009872:	e041      	b.n	80098f8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009878:	2b00      	cmp	r3, #0
 800987a:	da0b      	bge.n	8009894 <USBD_StdEPReq+0x224>
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	3310      	adds	r3, #16
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4413      	add	r3, r2
 8009890:	3304      	adds	r3, #4
 8009892:	e00b      	b.n	80098ac <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	3304      	adds	r3, #4
 80098ac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <USBD_StdEPReq+0x24a>
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	2b80      	cmp	r3, #128	; 0x80
 80098b8:	d103      	bne.n	80098c2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	e00e      	b.n	80098e0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 f878 	bl	800a9bc <USBD_LL_IsStallEP>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2201      	movs	r2, #1
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	e002      	b.n	80098e0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2202      	movs	r2, #2
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fbaf 	bl	800a04a <USBD_CtlSendData>
          break;
 80098ec:	e004      	b.n	80098f8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fb39 	bl	8009f68 <USBD_CtlError>
        break;
 80098f6:	bf00      	nop
      }
      break;
 80098f8:	e004      	b.n	8009904 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fb33 	bl	8009f68 <USBD_CtlError>
      break;
 8009902:	bf00      	nop
    }
    break;
 8009904:	e004      	b.n	8009910 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fb2d 	bl	8009f68 <USBD_CtlError>
    break;
 800990e:	bf00      	nop
  }

  return ret;
 8009910:	7bfb      	ldrb	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	885b      	ldrh	r3, [r3, #2]
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	b29b      	uxth	r3, r3
 800993a:	3b01      	subs	r3, #1
 800993c:	2b06      	cmp	r3, #6
 800993e:	f200 8128 	bhi.w	8009b92 <USBD_GetDescriptor+0x276>
 8009942:	a201      	add	r2, pc, #4	; (adr r2, 8009948 <USBD_GetDescriptor+0x2c>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	08009965 	.word	0x08009965
 800994c:	0800997d 	.word	0x0800997d
 8009950:	080099bd 	.word	0x080099bd
 8009954:	08009b93 	.word	0x08009b93
 8009958:	08009b93 	.word	0x08009b93
 800995c:	08009b33 	.word	0x08009b33
 8009960:	08009b5f 	.word	0x08009b5f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	7c12      	ldrb	r2, [r2, #16]
 8009970:	f107 0108 	add.w	r1, r7, #8
 8009974:	4610      	mov	r0, r2
 8009976:	4798      	blx	r3
 8009978:	60f8      	str	r0, [r7, #12]
    break;
 800997a:	e112      	b.n	8009ba2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	7c1b      	ldrb	r3, [r3, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10d      	bne.n	80099a0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800998a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998c:	f107 0208 	add.w	r2, r7, #8
 8009990:	4610      	mov	r0, r2
 8009992:	4798      	blx	r3
 8009994:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	3301      	adds	r3, #1
 800999a:	2202      	movs	r2, #2
 800999c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800999e:	e100      	b.n	8009ba2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	f107 0208 	add.w	r2, r7, #8
 80099ac:	4610      	mov	r0, r2
 80099ae:	4798      	blx	r3
 80099b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3301      	adds	r3, #1
 80099b6:	2202      	movs	r2, #2
 80099b8:	701a      	strb	r2, [r3, #0]
    break;
 80099ba:	e0f2      	b.n	8009ba2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	885b      	ldrh	r3, [r3, #2]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b05      	cmp	r3, #5
 80099c4:	f200 80ac 	bhi.w	8009b20 <USBD_GetDescriptor+0x204>
 80099c8:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <USBD_GetDescriptor+0xb4>)
 80099ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ce:	bf00      	nop
 80099d0:	080099e9 	.word	0x080099e9
 80099d4:	08009a1d 	.word	0x08009a1d
 80099d8:	08009a51 	.word	0x08009a51
 80099dc:	08009a85 	.word	0x08009a85
 80099e0:	08009ab9 	.word	0x08009ab9
 80099e4:	08009aed 	.word	0x08009aed
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	7c12      	ldrb	r2, [r2, #16]
 8009a00:	f107 0108 	add.w	r1, r7, #8
 8009a04:	4610      	mov	r0, r2
 8009a06:	4798      	blx	r3
 8009a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a0a:	e091      	b.n	8009b30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 faaa 	bl	8009f68 <USBD_CtlError>
        err++;
 8009a14:	7afb      	ldrb	r3, [r7, #11]
 8009a16:	3301      	adds	r3, #1
 8009a18:	72fb      	strb	r3, [r7, #11]
      break;
 8009a1a:	e089      	b.n	8009b30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	7c12      	ldrb	r2, [r2, #16]
 8009a34:	f107 0108 	add.w	r1, r7, #8
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
 8009a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a3e:	e077      	b.n	8009b30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa90 	bl	8009f68 <USBD_CtlError>
        err++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8009a4e:	e06f      	b.n	8009b30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	7c12      	ldrb	r2, [r2, #16]
 8009a68:	f107 0108 	add.w	r1, r7, #8
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
 8009a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a72:	e05d      	b.n	8009b30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa76 	bl	8009f68 <USBD_CtlError>
        err++;
 8009a7c:	7afb      	ldrb	r3, [r7, #11]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	72fb      	strb	r3, [r7, #11]
      break;
 8009a82:	e055      	b.n	8009b30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00b      	beq.n	8009aa8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	7c12      	ldrb	r2, [r2, #16]
 8009a9c:	f107 0108 	add.w	r1, r7, #8
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	4798      	blx	r3
 8009aa4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009aa6:	e043      	b.n	8009b30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa5c 	bl	8009f68 <USBD_CtlError>
        err++;
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	72fb      	strb	r3, [r7, #11]
      break;
 8009ab6:	e03b      	b.n	8009b30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00b      	beq.n	8009adc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	7c12      	ldrb	r2, [r2, #16]
 8009ad0:	f107 0108 	add.w	r1, r7, #8
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	4798      	blx	r3
 8009ad8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ada:	e029      	b.n	8009b30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa42 	bl	8009f68 <USBD_CtlError>
        err++;
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	72fb      	strb	r3, [r7, #11]
      break;
 8009aea:	e021      	b.n	8009b30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00b      	beq.n	8009b10 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	7c12      	ldrb	r2, [r2, #16]
 8009b04:	f107 0108 	add.w	r1, r7, #8
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4798      	blx	r3
 8009b0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b0e:	e00f      	b.n	8009b30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fa28 	bl	8009f68 <USBD_CtlError>
        err++;
 8009b18:	7afb      	ldrb	r3, [r7, #11]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	72fb      	strb	r3, [r7, #11]
      break;
 8009b1e:	e007      	b.n	8009b30 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fa20 	bl	8009f68 <USBD_CtlError>
      err++;
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009b2e:	bf00      	nop
    }
    break;
 8009b30:	e037      	b.n	8009ba2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	7c1b      	ldrb	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d109      	bne.n	8009b4e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b42:	f107 0208 	add.w	r2, r7, #8
 8009b46:	4610      	mov	r0, r2
 8009b48:	4798      	blx	r3
 8009b4a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009b4c:	e029      	b.n	8009ba2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fa09 	bl	8009f68 <USBD_CtlError>
      err++;
 8009b56:	7afb      	ldrb	r3, [r7, #11]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	72fb      	strb	r3, [r7, #11]
    break;
 8009b5c:	e021      	b.n	8009ba2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	7c1b      	ldrb	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10d      	bne.n	8009b82 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6e:	f107 0208 	add.w	r2, r7, #8
 8009b72:	4610      	mov	r0, r2
 8009b74:	4798      	blx	r3
 8009b76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	2207      	movs	r2, #7
 8009b7e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009b80:	e00f      	b.n	8009ba2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f9ef 	bl	8009f68 <USBD_CtlError>
      err++;
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	72fb      	strb	r3, [r7, #11]
    break;
 8009b90:	e007      	b.n	8009ba2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f9e7 	bl	8009f68 <USBD_CtlError>
    err++;
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	72fb      	strb	r3, [r7, #11]
    break;
 8009ba0:	bf00      	nop
  }

  if (err != 0U)
 8009ba2:	7afb      	ldrb	r3, [r7, #11]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d11e      	bne.n	8009be6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	88db      	ldrh	r3, [r3, #6]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d016      	beq.n	8009bde <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009bb0:	893b      	ldrh	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00e      	beq.n	8009bd4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	88da      	ldrh	r2, [r3, #6]
 8009bba:	893b      	ldrh	r3, [r7, #8]
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	bf28      	it	cs
 8009bc0:	4613      	movcs	r3, r2
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bc6:	893b      	ldrh	r3, [r7, #8]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	68f9      	ldr	r1, [r7, #12]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fa3c 	bl	800a04a <USBD_CtlSendData>
 8009bd2:	e009      	b.n	8009be8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f9c6 	bl	8009f68 <USBD_CtlError>
 8009bdc:	e004      	b.n	8009be8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa8d 	bl	800a0fe <USBD_CtlSendStatus>
 8009be4:	e000      	b.n	8009be8 <USBD_GetDescriptor+0x2cc>
    return;
 8009be6:	bf00      	nop
    }
  }
}
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop

08009bf0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	889b      	ldrh	r3, [r3, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d130      	bne.n	8009c64 <USBD_SetAddress+0x74>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	88db      	ldrh	r3, [r3, #6]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d12c      	bne.n	8009c64 <USBD_SetAddress+0x74>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	885b      	ldrh	r3, [r3, #2]
 8009c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c10:	d828      	bhi.n	8009c64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	885b      	ldrh	r3, [r3, #2]
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d104      	bne.n	8009c32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f99c 	bl	8009f68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c30:	e01c      	b.n	8009c6c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	7bfa      	ldrb	r2, [r7, #15]
 8009c36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fee8 	bl	800aa14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fa5a 	bl	800a0fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d004      	beq.n	8009c5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c58:	e008      	b.n	8009c6c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c62:	e003      	b.n	8009c6c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f97e 	bl	8009f68 <USBD_CtlError>
  }
}
 8009c6c:	bf00      	nop
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	885b      	ldrh	r3, [r3, #2]
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	4b4b      	ldr	r3, [pc, #300]	; (8009db8 <USBD_SetConfig+0x144>)
 8009c8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c8c:	4b4a      	ldr	r3, [pc, #296]	; (8009db8 <USBD_SetConfig+0x144>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d905      	bls.n	8009ca0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f966 	bl	8009f68 <USBD_CtlError>
    return USBD_FAIL;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e087      	b.n	8009db0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d002      	beq.n	8009cb0 <USBD_SetConfig+0x3c>
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d025      	beq.n	8009cfa <USBD_SetConfig+0x86>
 8009cae:	e071      	b.n	8009d94 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009cb0:	4b41      	ldr	r3, [pc, #260]	; (8009db8 <USBD_SetConfig+0x144>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01c      	beq.n	8009cf2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009cb8:	4b3f      	ldr	r3, [pc, #252]	; (8009db8 <USBD_SetConfig+0x144>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cc2:	4b3d      	ldr	r3, [pc, #244]	; (8009db8 <USBD_SetConfig+0x144>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff f9a7 	bl	800901c <USBD_SetClassConfig>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d004      	beq.n	8009ce2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f944 	bl	8009f68 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009ce0:	e065      	b.n	8009dae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa0b 	bl	800a0fe <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2203      	movs	r2, #3
 8009cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009cf0:	e05d      	b.n	8009dae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa03 	bl	800a0fe <USBD_CtlSendStatus>
    break;
 8009cf8:	e059      	b.n	8009dae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009cfa:	4b2f      	ldr	r3, [pc, #188]	; (8009db8 <USBD_SetConfig+0x144>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d112      	bne.n	8009d28 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2202      	movs	r2, #2
 8009d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009d0a:	4b2b      	ldr	r3, [pc, #172]	; (8009db8 <USBD_SetConfig+0x144>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d14:	4b28      	ldr	r3, [pc, #160]	; (8009db8 <USBD_SetConfig+0x144>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff f99a 	bl	8009054 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f9ec 	bl	800a0fe <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009d26:	e042      	b.n	8009dae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009d28:	4b23      	ldr	r3, [pc, #140]	; (8009db8 <USBD_SetConfig+0x144>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d02a      	beq.n	8009d8c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff f988 	bl	8009054 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009d44:	4b1c      	ldr	r3, [pc, #112]	; (8009db8 <USBD_SetConfig+0x144>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d4e:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <USBD_SetConfig+0x144>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff f961 	bl	800901c <USBD_SetClassConfig>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00f      	beq.n	8009d84 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f8fe 	bl	8009f68 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff f96d 	bl	8009054 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009d82:	e014      	b.n	8009dae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f9ba 	bl	800a0fe <USBD_CtlSendStatus>
    break;
 8009d8a:	e010      	b.n	8009dae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f9b6 	bl	800a0fe <USBD_CtlSendStatus>
    break;
 8009d92:	e00c      	b.n	8009dae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f8e6 	bl	8009f68 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d9c:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <USBD_SetConfig+0x144>)
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7ff f956 	bl	8009054 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009da8:	2303      	movs	r3, #3
 8009daa:	73fb      	strb	r3, [r7, #15]
    break;
 8009dac:	bf00      	nop
  }

  return ret;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20000498 	.word	0x20000498

08009dbc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	88db      	ldrh	r3, [r3, #6]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d004      	beq.n	8009dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f8c9 	bl	8009f68 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009dd6:	e021      	b.n	8009e1c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	db17      	blt.n	8009e12 <USBD_GetConfig+0x56>
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	dd02      	ble.n	8009dec <USBD_GetConfig+0x30>
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d00b      	beq.n	8009e02 <USBD_GetConfig+0x46>
 8009dea:	e012      	b.n	8009e12 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3308      	adds	r3, #8
 8009df6:	2201      	movs	r2, #1
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f925 	bl	800a04a <USBD_CtlSendData>
      break;
 8009e00:	e00c      	b.n	8009e1c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3304      	adds	r3, #4
 8009e06:	2201      	movs	r2, #1
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f91d 	bl	800a04a <USBD_CtlSendData>
      break;
 8009e10:	e004      	b.n	8009e1c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f8a7 	bl	8009f68 <USBD_CtlError>
      break;
 8009e1a:	bf00      	nop
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e34:	3b01      	subs	r3, #1
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d81e      	bhi.n	8009e78 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	88db      	ldrh	r3, [r3, #6]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d004      	beq.n	8009e4c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f88f 	bl	8009f68 <USBD_CtlError>
      break;
 8009e4a:	e01a      	b.n	8009e82 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d005      	beq.n	8009e68 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f043 0202 	orr.w	r2, r3, #2
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	330c      	adds	r3, #12
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f8ea 	bl	800a04a <USBD_CtlSendData>
    break;
 8009e76:	e004      	b.n	8009e82 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f874 	bl	8009f68 <USBD_CtlError>
    break;
 8009e80:	bf00      	nop
  }
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	885b      	ldrh	r3, [r3, #2]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d106      	bne.n	8009eaa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f92a 	bl	800a0fe <USBD_CtlSendStatus>
  }
}
 8009eaa:	bf00      	nop
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d80b      	bhi.n	8009ee0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	885b      	ldrh	r3, [r3, #2]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d10c      	bne.n	8009eea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f910 	bl	800a0fe <USBD_CtlSendStatus>
      }
      break;
 8009ede:	e004      	b.n	8009eea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f840 	bl	8009f68 <USBD_CtlError>
      break;
 8009ee8:	e000      	b.n	8009eec <USBD_ClrFeature+0x3a>
      break;
 8009eea:	bf00      	nop
  }
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	781a      	ldrb	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	781a      	ldrb	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f7ff fad3 	bl	80094ca <SWAPBYTE>
 8009f24:	4603      	mov	r3, r0
 8009f26:	461a      	mov	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3301      	adds	r3, #1
 8009f36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff fac6 	bl	80094ca <SWAPBYTE>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	461a      	mov	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f7ff fab9 	bl	80094ca <SWAPBYTE>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	80da      	strh	r2, [r3, #6]
}
 8009f60:	bf00      	nop
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f72:	2180      	movs	r1, #128	; 0x80
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fce3 	bl	800a940 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fcdf 	bl	800a940 <USBD_LL_StallEP>
}
 8009f82:	bf00      	nop
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b086      	sub	sp, #24
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f96:	2300      	movs	r3, #0
 8009f98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d036      	beq.n	800a00e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009fa4:	6938      	ldr	r0, [r7, #16]
 8009fa6:	f000 f836 	bl	800a016 <USBD_GetLen>
 8009faa:	4603      	mov	r3, r0
 8009fac:	3301      	adds	r3, #1
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009fb8:	7dfb      	ldrb	r3, [r7, #23]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	7812      	ldrb	r2, [r2, #0]
 8009fc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	4413      	add	r3, r2
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009fda:	e013      	b.n	800a004 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009fdc:	7dfb      	ldrb	r3, [r7, #23]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	7812      	ldrb	r2, [r2, #0]
 8009fe6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	3301      	adds	r3, #1
 8009fec:	613b      	str	r3, [r7, #16]
    idx++;
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	3301      	adds	r3, #1
 800a002:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e7      	bne.n	8009fdc <USBD_GetString+0x52>
 800a00c:	e000      	b.n	800a010 <USBD_GetString+0x86>
    return;
 800a00e:	bf00      	nop
  }
}
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a016:	b480      	push	{r7}
 800a018:	b085      	sub	sp, #20
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a026:	e005      	b.n	800a034 <USBD_GetLen+0x1e>
  {
    len++;
 800a028:	7bfb      	ldrb	r3, [r7, #15]
 800a02a:	3301      	adds	r3, #1
 800a02c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	3301      	adds	r3, #1
 800a032:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1f5      	bne.n	800a028 <USBD_GetLen+0x12>
  }

  return len;
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	60b9      	str	r1, [r7, #8]
 800a054:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2202      	movs	r2, #2
 800a05a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	2100      	movs	r1, #0
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 fcee 	bl	800aa52 <USBD_LL_Transmit>

  return USBD_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	2100      	movs	r1, #0
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f000 fcdd 	bl	800aa52 <USBD_LL_Transmit>

  return USBD_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fce1 	bl	800aa94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fcd0 	bl	800aa94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2204      	movs	r2, #4
 800a10a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a10e:	2300      	movs	r3, #0
 800a110:	2200      	movs	r2, #0
 800a112:	2100      	movs	r1, #0
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fc9c 	bl	800aa52 <USBD_LL_Transmit>

  return USBD_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2205      	movs	r2, #5
 800a130:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a134:	2300      	movs	r3, #0
 800a136:	2200      	movs	r2, #0
 800a138:	2100      	movs	r1, #0
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fcaa 	bl	800aa94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a150:	2200      	movs	r2, #0
 800a152:	4912      	ldr	r1, [pc, #72]	; (800a19c <MX_USB_DEVICE_Init+0x50>)
 800a154:	4812      	ldr	r0, [pc, #72]	; (800a1a0 <MX_USB_DEVICE_Init+0x54>)
 800a156:	f7fe fef3 	bl	8008f40 <USBD_Init>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a160:	f7f7 fb7e 	bl	8001860 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a164:	490f      	ldr	r1, [pc, #60]	; (800a1a4 <MX_USB_DEVICE_Init+0x58>)
 800a166:	480e      	ldr	r0, [pc, #56]	; (800a1a0 <MX_USB_DEVICE_Init+0x54>)
 800a168:	f7fe ff20 	bl	8008fac <USBD_RegisterClass>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a172:	f7f7 fb75 	bl	8001860 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a176:	490c      	ldr	r1, [pc, #48]	; (800a1a8 <MX_USB_DEVICE_Init+0x5c>)
 800a178:	4809      	ldr	r0, [pc, #36]	; (800a1a0 <MX_USB_DEVICE_Init+0x54>)
 800a17a:	f7fe fe45 	bl	8008e08 <USBD_CDC_RegisterInterface>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a184:	f7f7 fb6c 	bl	8001860 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a188:	4805      	ldr	r0, [pc, #20]	; (800a1a0 <MX_USB_DEVICE_Init+0x54>)
 800a18a:	f7fe ff30 	bl	8008fee <USBD_Start>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a194:	f7f7 fb64 	bl	8001860 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a198:	bf00      	nop
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	200001a0 	.word	0x200001a0
 800a1a0:	200005e4 	.word	0x200005e4
 800a1a4:	20000088 	.word	0x20000088
 800a1a8:	2000018c 	.word	0x2000018c

0800a1ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	4905      	ldr	r1, [pc, #20]	; (800a1c8 <CDC_Init_FS+0x1c>)
 800a1b4:	4805      	ldr	r0, [pc, #20]	; (800a1cc <CDC_Init_FS+0x20>)
 800a1b6:	f7fe fe3c 	bl	8008e32 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1ba:	4905      	ldr	r1, [pc, #20]	; (800a1d0 <CDC_Init_FS+0x24>)
 800a1bc:	4803      	ldr	r0, [pc, #12]	; (800a1cc <CDC_Init_FS+0x20>)
 800a1be:	f7fe fe51 	bl	8008e64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	200010b4 	.word	0x200010b4
 800a1cc:	200005e4 	.word	0x200005e4
 800a1d0:	200008b4 	.word	0x200008b4

0800a1d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	6039      	str	r1, [r7, #0]
 800a1ee:	71fb      	strb	r3, [r7, #7]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b23      	cmp	r3, #35	; 0x23
 800a1f8:	d84a      	bhi.n	800a290 <CDC_Control_FS+0xac>
 800a1fa:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <CDC_Control_FS+0x1c>)
 800a1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a200:	0800a291 	.word	0x0800a291
 800a204:	0800a291 	.word	0x0800a291
 800a208:	0800a291 	.word	0x0800a291
 800a20c:	0800a291 	.word	0x0800a291
 800a210:	0800a291 	.word	0x0800a291
 800a214:	0800a291 	.word	0x0800a291
 800a218:	0800a291 	.word	0x0800a291
 800a21c:	0800a291 	.word	0x0800a291
 800a220:	0800a291 	.word	0x0800a291
 800a224:	0800a291 	.word	0x0800a291
 800a228:	0800a291 	.word	0x0800a291
 800a22c:	0800a291 	.word	0x0800a291
 800a230:	0800a291 	.word	0x0800a291
 800a234:	0800a291 	.word	0x0800a291
 800a238:	0800a291 	.word	0x0800a291
 800a23c:	0800a291 	.word	0x0800a291
 800a240:	0800a291 	.word	0x0800a291
 800a244:	0800a291 	.word	0x0800a291
 800a248:	0800a291 	.word	0x0800a291
 800a24c:	0800a291 	.word	0x0800a291
 800a250:	0800a291 	.word	0x0800a291
 800a254:	0800a291 	.word	0x0800a291
 800a258:	0800a291 	.word	0x0800a291
 800a25c:	0800a291 	.word	0x0800a291
 800a260:	0800a291 	.word	0x0800a291
 800a264:	0800a291 	.word	0x0800a291
 800a268:	0800a291 	.word	0x0800a291
 800a26c:	0800a291 	.word	0x0800a291
 800a270:	0800a291 	.word	0x0800a291
 800a274:	0800a291 	.word	0x0800a291
 800a278:	0800a291 	.word	0x0800a291
 800a27c:	0800a291 	.word	0x0800a291
 800a280:	0800a291 	.word	0x0800a291
 800a284:	0800a291 	.word	0x0800a291
 800a288:	0800a291 	.word	0x0800a291
 800a28c:	0800a291 	.word	0x0800a291
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a290:	bf00      	nop
  }

  return (USBD_OK);
 800a292:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	4805      	ldr	r0, [pc, #20]	; (800a2c4 <CDC_Receive_FS+0x24>)
 800a2ae:	f7fe fdd9 	bl	8008e64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2b2:	4804      	ldr	r0, [pc, #16]	; (800a2c4 <CDC_Receive_FS+0x24>)
 800a2b4:	f7fe fe1a 	bl	8008eec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	200005e4 	.word	0x200005e4

0800a2c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a2d8:	4b0d      	ldr	r3, [pc, #52]	; (800a310 <CDC_Transmit_FS+0x48>)
 800a2da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e00b      	b.n	800a306 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a2ee:	887b      	ldrh	r3, [r7, #2]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	4806      	ldr	r0, [pc, #24]	; (800a310 <CDC_Transmit_FS+0x48>)
 800a2f6:	f7fe fd9c 	bl	8008e32 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a2fa:	4805      	ldr	r0, [pc, #20]	; (800a310 <CDC_Transmit_FS+0x48>)
 800a2fc:	f7fe fdc6 	bl	8008e8c <USBD_CDC_TransmitPacket>
 800a300:	4603      	mov	r3, r0
 800a302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a304:	7bfb      	ldrb	r3, [r7, #15]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	200005e4 	.word	0x200005e4

0800a314 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	4613      	mov	r3, r2
 800a320:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	371c      	adds	r7, #28
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
	...

0800a338 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	6039      	str	r1, [r7, #0]
 800a342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2212      	movs	r2, #18
 800a348:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a34a:	4b03      	ldr	r3, [pc, #12]	; (800a358 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	200001bc 	.word	0x200001bc

0800a35c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	6039      	str	r1, [r7, #0]
 800a366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2204      	movs	r2, #4
 800a36c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a36e:	4b03      	ldr	r3, [pc, #12]	; (800a37c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	200001d0 	.word	0x200001d0

0800a380 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	6039      	str	r1, [r7, #0]
 800a38a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d105      	bne.n	800a39e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	4907      	ldr	r1, [pc, #28]	; (800a3b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a396:	4808      	ldr	r0, [pc, #32]	; (800a3b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a398:	f7ff fdf7 	bl	8009f8a <USBD_GetString>
 800a39c:	e004      	b.n	800a3a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	4904      	ldr	r1, [pc, #16]	; (800a3b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3a2:	4805      	ldr	r0, [pc, #20]	; (800a3b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3a4:	f7ff fdf1 	bl	8009f8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a8:	4b02      	ldr	r3, [pc, #8]	; (800a3b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	200018b4 	.word	0x200018b4
 800a3b8:	0800e928 	.word	0x0800e928

0800a3bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	6039      	str	r1, [r7, #0]
 800a3c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	4904      	ldr	r1, [pc, #16]	; (800a3dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3cc:	4804      	ldr	r0, [pc, #16]	; (800a3e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3ce:	f7ff fddc 	bl	8009f8a <USBD_GetString>
  return USBD_StrDesc;
 800a3d2:	4b02      	ldr	r3, [pc, #8]	; (800a3dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	200018b4 	.word	0x200018b4
 800a3e0:	0800e940 	.word	0x0800e940

0800a3e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	6039      	str	r1, [r7, #0]
 800a3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	221a      	movs	r2, #26
 800a3f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3f6:	f000 f843 	bl	800a480 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3fa:	4b02      	ldr	r3, [pc, #8]	; (800a404 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	200001d4 	.word	0x200001d4

0800a408 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a414:	79fb      	ldrb	r3, [r7, #7]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d105      	bne.n	800a426 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	4907      	ldr	r1, [pc, #28]	; (800a43c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a41e:	4808      	ldr	r0, [pc, #32]	; (800a440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a420:	f7ff fdb3 	bl	8009f8a <USBD_GetString>
 800a424:	e004      	b.n	800a430 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	4904      	ldr	r1, [pc, #16]	; (800a43c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a42a:	4805      	ldr	r0, [pc, #20]	; (800a440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a42c:	f7ff fdad 	bl	8009f8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a430:	4b02      	ldr	r3, [pc, #8]	; (800a43c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	200018b4 	.word	0x200018b4
 800a440:	0800e954 	.word	0x0800e954

0800a444 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d105      	bne.n	800a462 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	4907      	ldr	r1, [pc, #28]	; (800a478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a45a:	4808      	ldr	r0, [pc, #32]	; (800a47c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a45c:	f7ff fd95 	bl	8009f8a <USBD_GetString>
 800a460:	e004      	b.n	800a46c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	4904      	ldr	r1, [pc, #16]	; (800a478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a466:	4805      	ldr	r0, [pc, #20]	; (800a47c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a468:	f7ff fd8f 	bl	8009f8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	200018b4 	.word	0x200018b4
 800a47c:	0800e960 	.word	0x0800e960

0800a480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a486:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <Get_SerialNum+0x44>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a48c:	4b0e      	ldr	r3, [pc, #56]	; (800a4c8 <Get_SerialNum+0x48>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a492:	4b0e      	ldr	r3, [pc, #56]	; (800a4cc <Get_SerialNum+0x4c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4413      	add	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d009      	beq.n	800a4ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4a6:	2208      	movs	r2, #8
 800a4a8:	4909      	ldr	r1, [pc, #36]	; (800a4d0 <Get_SerialNum+0x50>)
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 f814 	bl	800a4d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4b0:	2204      	movs	r2, #4
 800a4b2:	4908      	ldr	r1, [pc, #32]	; (800a4d4 <Get_SerialNum+0x54>)
 800a4b4:	68b8      	ldr	r0, [r7, #8]
 800a4b6:	f000 f80f 	bl	800a4d8 <IntToUnicode>
  }
}
 800a4ba:	bf00      	nop
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	1fff7a10 	.word	0x1fff7a10
 800a4c8:	1fff7a14 	.word	0x1fff7a14
 800a4cc:	1fff7a18 	.word	0x1fff7a18
 800a4d0:	200001d6 	.word	0x200001d6
 800a4d4:	200001e6 	.word	0x200001e6

0800a4d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	75fb      	strb	r3, [r7, #23]
 800a4ee:	e027      	b.n	800a540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	0f1b      	lsrs	r3, r3, #28
 800a4f4:	2b09      	cmp	r3, #9
 800a4f6:	d80b      	bhi.n	800a510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	0f1b      	lsrs	r3, r3, #28
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	4619      	mov	r1, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	440b      	add	r3, r1
 800a508:	3230      	adds	r2, #48	; 0x30
 800a50a:	b2d2      	uxtb	r2, r2
 800a50c:	701a      	strb	r2, [r3, #0]
 800a50e:	e00a      	b.n	800a526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	0f1b      	lsrs	r3, r3, #28
 800a514:	b2da      	uxtb	r2, r3
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4619      	mov	r1, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	440b      	add	r3, r1
 800a520:	3237      	adds	r2, #55	; 0x37
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	011b      	lsls	r3, r3, #4
 800a52a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a52c:	7dfb      	ldrb	r3, [r7, #23]
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	3301      	adds	r3, #1
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	4413      	add	r3, r2
 800a536:	2200      	movs	r2, #0
 800a538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	3301      	adds	r3, #1
 800a53e:	75fb      	strb	r3, [r7, #23]
 800a540:	7dfa      	ldrb	r2, [r7, #23]
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	429a      	cmp	r2, r3
 800a546:	d3d3      	bcc.n	800a4f0 <IntToUnicode+0x18>
  }
}
 800a548:	bf00      	nop
 800a54a:	371c      	adds	r7, #28
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08a      	sub	sp, #40	; 0x28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a55c:	f107 0314 	add.w	r3, r7, #20
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	605a      	str	r2, [r3, #4]
 800a566:	609a      	str	r2, [r3, #8]
 800a568:	60da      	str	r2, [r3, #12]
 800a56a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a574:	d147      	bne.n	800a606 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a576:	2300      	movs	r3, #0
 800a578:	613b      	str	r3, [r7, #16]
 800a57a:	4b25      	ldr	r3, [pc, #148]	; (800a610 <HAL_PCD_MspInit+0xbc>)
 800a57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57e:	4a24      	ldr	r2, [pc, #144]	; (800a610 <HAL_PCD_MspInit+0xbc>)
 800a580:	f043 0301 	orr.w	r3, r3, #1
 800a584:	6313      	str	r3, [r2, #48]	; 0x30
 800a586:	4b22      	ldr	r3, [pc, #136]	; (800a610 <HAL_PCD_MspInit+0xbc>)
 800a588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	613b      	str	r3, [r7, #16]
 800a590:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a592:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a598:	2302      	movs	r3, #2
 800a59a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5a4:	230a      	movs	r3, #10
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5a8:	f107 0314 	add.w	r3, r7, #20
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4819      	ldr	r0, [pc, #100]	; (800a614 <HAL_PCD_MspInit+0xc0>)
 800a5b0:	f7f8 fd1a 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a5b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a5c2:	f107 0314 	add.w	r3, r7, #20
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4812      	ldr	r0, [pc, #72]	; (800a614 <HAL_PCD_MspInit+0xc0>)
 800a5ca:	f7f8 fd0d 	bl	8002fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5ce:	4b10      	ldr	r3, [pc, #64]	; (800a610 <HAL_PCD_MspInit+0xbc>)
 800a5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d2:	4a0f      	ldr	r2, [pc, #60]	; (800a610 <HAL_PCD_MspInit+0xbc>)
 800a5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d8:	6353      	str	r3, [r2, #52]	; 0x34
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	4b0c      	ldr	r3, [pc, #48]	; (800a610 <HAL_PCD_MspInit+0xbc>)
 800a5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e2:	4a0b      	ldr	r2, [pc, #44]	; (800a610 <HAL_PCD_MspInit+0xbc>)
 800a5e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5e8:	6453      	str	r3, [r2, #68]	; 0x44
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <HAL_PCD_MspInit+0xbc>)
 800a5ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	2043      	movs	r0, #67	; 0x43
 800a5fc:	f7f8 fcbd 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a600:	2043      	movs	r0, #67	; 0x43
 800a602:	f7f8 fcd6 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a606:	bf00      	nop
 800a608:	3728      	adds	r7, #40	; 0x28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	40023800 	.word	0x40023800
 800a614:	40020000 	.word	0x40020000

0800a618 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fe fd28 	bl	8009084 <USBD_LL_SetupStage>
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a64e:	78fa      	ldrb	r2, [r7, #3]
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	4613      	mov	r3, r2
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	1a9b      	subs	r3, r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	440b      	add	r3, r1
 800a65c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	78fb      	ldrb	r3, [r7, #3]
 800a664:	4619      	mov	r1, r3
 800a666:	f7fe fd60 	bl	800912a <USBD_LL_DataOutStage>
}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	460b      	mov	r3, r1
 800a67c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a684:	78fa      	ldrb	r2, [r7, #3]
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	4613      	mov	r3, r2
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	1a9b      	subs	r3, r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	3348      	adds	r3, #72	; 0x48
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	78fb      	ldrb	r3, [r7, #3]
 800a698:	4619      	mov	r1, r3
 800a69a:	f7fe fda9 	bl	80091f0 <USBD_LL_DataInStage>
}
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fe fead 	bl	8009414 <USBD_LL_SOF>
}
 800a6ba:	bf00      	nop
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d001      	beq.n	800a6da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a6d6:	f7f7 f8c3 	bl	8001860 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6e0:	7bfa      	ldrb	r2, [r7, #15]
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fe fe5a 	bl	800939e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fe fe13 	bl	800931c <USBD_LL_Reset>
}
 800a6f6:	bf00      	nop
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe fe55 	bl	80093be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6812      	ldr	r2, [r2, #0]
 800a722:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a726:	f043 0301 	orr.w	r3, r3, #1
 800a72a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a1b      	ldr	r3, [r3, #32]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d005      	beq.n	800a740 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a734:	4b04      	ldr	r3, [pc, #16]	; (800a748 <HAL_PCD_SuspendCallback+0x48>)
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	4a03      	ldr	r2, [pc, #12]	; (800a748 <HAL_PCD_SuspendCallback+0x48>)
 800a73a:	f043 0306 	orr.w	r3, r3, #6
 800a73e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a740:	bf00      	nop
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	e000ed00 	.word	0xe000ed00

0800a74c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fe44 	bl	80093e8 <USBD_LL_Resume>
}
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a77a:	78fa      	ldrb	r2, [r7, #3]
 800a77c:	4611      	mov	r1, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fe6f 	bl	8009462 <USBD_LL_IsoOUTIncomplete>
}
 800a784:	bf00      	nop
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a79e:	78fa      	ldrb	r2, [r7, #3]
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe fe50 	bl	8009448 <USBD_LL_IsoINIncomplete>
}
 800a7a8:	bf00      	nop
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fe fe5c 	bl	800947c <USBD_LL_DevConnected>
}
 800a7c4:	bf00      	nop
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe fe59 	bl	8009492 <USBD_LL_DevDisconnected>
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d13c      	bne.n	800a872 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a7f8:	4a20      	ldr	r2, [pc, #128]	; (800a87c <USBD_LL_Init+0x94>)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a1e      	ldr	r2, [pc, #120]	; (800a87c <USBD_LL_Init+0x94>)
 800a804:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a808:	4b1c      	ldr	r3, [pc, #112]	; (800a87c <USBD_LL_Init+0x94>)
 800a80a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a80e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a810:	4b1a      	ldr	r3, [pc, #104]	; (800a87c <USBD_LL_Init+0x94>)
 800a812:	2204      	movs	r2, #4
 800a814:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a816:	4b19      	ldr	r3, [pc, #100]	; (800a87c <USBD_LL_Init+0x94>)
 800a818:	2202      	movs	r2, #2
 800a81a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a81c:	4b17      	ldr	r3, [pc, #92]	; (800a87c <USBD_LL_Init+0x94>)
 800a81e:	2200      	movs	r2, #0
 800a820:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a822:	4b16      	ldr	r3, [pc, #88]	; (800a87c <USBD_LL_Init+0x94>)
 800a824:	2202      	movs	r2, #2
 800a826:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a828:	4b14      	ldr	r3, [pc, #80]	; (800a87c <USBD_LL_Init+0x94>)
 800a82a:	2201      	movs	r2, #1
 800a82c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a82e:	4b13      	ldr	r3, [pc, #76]	; (800a87c <USBD_LL_Init+0x94>)
 800a830:	2200      	movs	r2, #0
 800a832:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a834:	4b11      	ldr	r3, [pc, #68]	; (800a87c <USBD_LL_Init+0x94>)
 800a836:	2200      	movs	r2, #0
 800a838:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a83a:	4b10      	ldr	r3, [pc, #64]	; (800a87c <USBD_LL_Init+0x94>)
 800a83c:	2201      	movs	r2, #1
 800a83e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a840:	4b0e      	ldr	r3, [pc, #56]	; (800a87c <USBD_LL_Init+0x94>)
 800a842:	2200      	movs	r2, #0
 800a844:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a846:	480d      	ldr	r0, [pc, #52]	; (800a87c <USBD_LL_Init+0x94>)
 800a848:	f7fa fade 	bl	8004e08 <HAL_PCD_Init>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a852:	f7f7 f805 	bl	8001860 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a856:	2180      	movs	r1, #128	; 0x80
 800a858:	4808      	ldr	r0, [pc, #32]	; (800a87c <USBD_LL_Init+0x94>)
 800a85a:	f7fb fc3c 	bl	80060d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a85e:	2240      	movs	r2, #64	; 0x40
 800a860:	2100      	movs	r1, #0
 800a862:	4806      	ldr	r0, [pc, #24]	; (800a87c <USBD_LL_Init+0x94>)
 800a864:	f7fb fbf0 	bl	8006048 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a868:	2280      	movs	r2, #128	; 0x80
 800a86a:	2101      	movs	r1, #1
 800a86c:	4803      	ldr	r0, [pc, #12]	; (800a87c <USBD_LL_Init+0x94>)
 800a86e:	f7fb fbeb 	bl	8006048 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20001ab4 	.word	0x20001ab4

0800a880 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a896:	4618      	mov	r0, r3
 800a898:	f7fa fbd3 	bl	8005042 <HAL_PCD_Start>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 f92a 	bl	800aafc <USBD_Get_USB_Status>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	4608      	mov	r0, r1
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	70fb      	strb	r3, [r7, #3]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70bb      	strb	r3, [r7, #2]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a8de:	78bb      	ldrb	r3, [r7, #2]
 800a8e0:	883a      	ldrh	r2, [r7, #0]
 800a8e2:	78f9      	ldrb	r1, [r7, #3]
 800a8e4:	f7fa ffb7 	bl	8005856 <HAL_PCD_EP_Open>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 f904 	bl	800aafc <USBD_Get_USB_Status>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	460b      	mov	r3, r1
 800a90c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a91c:	78fa      	ldrb	r2, [r7, #3]
 800a91e:	4611      	mov	r1, r2
 800a920:	4618      	mov	r0, r3
 800a922:	f7fb f800 	bl	8005926 <HAL_PCD_EP_Close>
 800a926:	4603      	mov	r3, r0
 800a928:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 f8e5 	bl	800aafc <USBD_Get_USB_Status>
 800a932:	4603      	mov	r3, r0
 800a934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a936:	7bbb      	ldrb	r3, [r7, #14]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	460b      	mov	r3, r1
 800a94a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a95a:	78fa      	ldrb	r2, [r7, #3]
 800a95c:	4611      	mov	r1, r2
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fb f8d8 	bl	8005b14 <HAL_PCD_EP_SetStall>
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 f8c6 	bl	800aafc <USBD_Get_USB_Status>
 800a970:	4603      	mov	r3, r0
 800a972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a974:	7bbb      	ldrb	r3, [r7, #14]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a998:	78fa      	ldrb	r2, [r7, #3]
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fb f91d 	bl	8005bdc <HAL_PCD_EP_ClrStall>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f8a7 	bl	800aafc <USBD_Get_USB_Status>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	da0b      	bge.n	800a9f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9de:	68f9      	ldr	r1, [r7, #12]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	00db      	lsls	r3, r3, #3
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	440b      	add	r3, r1
 800a9ea:	333e      	adds	r3, #62	; 0x3e
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	e00b      	b.n	800aa08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	1a9b      	subs	r3, r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	440b      	add	r3, r1
 800aa02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa2e:	78fa      	ldrb	r2, [r7, #3]
 800aa30:	4611      	mov	r1, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fa feea 	bl	800580c <HAL_PCD_SetAddress>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 f85c 	bl	800aafc <USBD_Get_USB_Status>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b086      	sub	sp, #24
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa70:	7af9      	ldrb	r1, [r7, #11]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	f7fb f803 	bl	8005a80 <HAL_PCD_EP_Transmit>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 f83b 	bl	800aafc <USBD_Get_USB_Status>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	607a      	str	r2, [r7, #4]
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aab2:	7af9      	ldrb	r1, [r7, #11]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	f7fa ff7f 	bl	80059ba <HAL_PCD_EP_Receive>
 800aabc:	4603      	mov	r3, r0
 800aabe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 f81a 	bl	800aafc <USBD_Get_USB_Status>
 800aac8:	4603      	mov	r3, r0
 800aaca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aacc:	7dbb      	ldrb	r3, [r7, #22]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aae8:	78fa      	ldrb	r2, [r7, #3]
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fa ffaf 	bl	8005a50 <HAL_PCD_EP_GetRxCount>
 800aaf2:	4603      	mov	r3, r0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab0a:	79fb      	ldrb	r3, [r7, #7]
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d817      	bhi.n	800ab40 <USBD_Get_USB_Status+0x44>
 800ab10:	a201      	add	r2, pc, #4	; (adr r2, 800ab18 <USBD_Get_USB_Status+0x1c>)
 800ab12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab16:	bf00      	nop
 800ab18:	0800ab29 	.word	0x0800ab29
 800ab1c:	0800ab2f 	.word	0x0800ab2f
 800ab20:	0800ab35 	.word	0x0800ab35
 800ab24:	0800ab3b 	.word	0x0800ab3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab2c:	e00b      	b.n	800ab46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	73fb      	strb	r3, [r7, #15]
    break;
 800ab32:	e008      	b.n	800ab46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab34:	2301      	movs	r3, #1
 800ab36:	73fb      	strb	r3, [r7, #15]
    break;
 800ab38:	e005      	b.n	800ab46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab3e:	e002      	b.n	800ab46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab40:	2303      	movs	r3, #3
 800ab42:	73fb      	strb	r3, [r7, #15]
    break;
 800ab44:	bf00      	nop
  }
  return usb_status;
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <__errno>:
 800ab54:	4b01      	ldr	r3, [pc, #4]	; (800ab5c <__errno+0x8>)
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	200001f0 	.word	0x200001f0

0800ab60 <__libc_init_array>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	4e0d      	ldr	r6, [pc, #52]	; (800ab98 <__libc_init_array+0x38>)
 800ab64:	4c0d      	ldr	r4, [pc, #52]	; (800ab9c <__libc_init_array+0x3c>)
 800ab66:	1ba4      	subs	r4, r4, r6
 800ab68:	10a4      	asrs	r4, r4, #2
 800ab6a:	2500      	movs	r5, #0
 800ab6c:	42a5      	cmp	r5, r4
 800ab6e:	d109      	bne.n	800ab84 <__libc_init_array+0x24>
 800ab70:	4e0b      	ldr	r6, [pc, #44]	; (800aba0 <__libc_init_array+0x40>)
 800ab72:	4c0c      	ldr	r4, [pc, #48]	; (800aba4 <__libc_init_array+0x44>)
 800ab74:	f003 fe6a 	bl	800e84c <_init>
 800ab78:	1ba4      	subs	r4, r4, r6
 800ab7a:	10a4      	asrs	r4, r4, #2
 800ab7c:	2500      	movs	r5, #0
 800ab7e:	42a5      	cmp	r5, r4
 800ab80:	d105      	bne.n	800ab8e <__libc_init_array+0x2e>
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab88:	4798      	blx	r3
 800ab8a:	3501      	adds	r5, #1
 800ab8c:	e7ee      	b.n	800ab6c <__libc_init_array+0xc>
 800ab8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab92:	4798      	blx	r3
 800ab94:	3501      	adds	r5, #1
 800ab96:	e7f2      	b.n	800ab7e <__libc_init_array+0x1e>
 800ab98:	0800ec4c 	.word	0x0800ec4c
 800ab9c:	0800ec4c 	.word	0x0800ec4c
 800aba0:	0800ec4c 	.word	0x0800ec4c
 800aba4:	0800ec50 	.word	0x0800ec50

0800aba8 <malloc>:
 800aba8:	4b02      	ldr	r3, [pc, #8]	; (800abb4 <malloc+0xc>)
 800abaa:	4601      	mov	r1, r0
 800abac:	6818      	ldr	r0, [r3, #0]
 800abae:	f000 b861 	b.w	800ac74 <_malloc_r>
 800abb2:	bf00      	nop
 800abb4:	200001f0 	.word	0x200001f0

0800abb8 <free>:
 800abb8:	4b02      	ldr	r3, [pc, #8]	; (800abc4 <free+0xc>)
 800abba:	4601      	mov	r1, r0
 800abbc:	6818      	ldr	r0, [r3, #0]
 800abbe:	f000 b80b 	b.w	800abd8 <_free_r>
 800abc2:	bf00      	nop
 800abc4:	200001f0 	.word	0x200001f0

0800abc8 <memset>:
 800abc8:	4402      	add	r2, r0
 800abca:	4603      	mov	r3, r0
 800abcc:	4293      	cmp	r3, r2
 800abce:	d100      	bne.n	800abd2 <memset+0xa>
 800abd0:	4770      	bx	lr
 800abd2:	f803 1b01 	strb.w	r1, [r3], #1
 800abd6:	e7f9      	b.n	800abcc <memset+0x4>

0800abd8 <_free_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4605      	mov	r5, r0
 800abdc:	2900      	cmp	r1, #0
 800abde:	d045      	beq.n	800ac6c <_free_r+0x94>
 800abe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe4:	1f0c      	subs	r4, r1, #4
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bfb8      	it	lt
 800abea:	18e4      	addlt	r4, r4, r3
 800abec:	f002 ff5b 	bl	800daa6 <__malloc_lock>
 800abf0:	4a1f      	ldr	r2, [pc, #124]	; (800ac70 <_free_r+0x98>)
 800abf2:	6813      	ldr	r3, [r2, #0]
 800abf4:	4610      	mov	r0, r2
 800abf6:	b933      	cbnz	r3, 800ac06 <_free_r+0x2e>
 800abf8:	6063      	str	r3, [r4, #4]
 800abfa:	6014      	str	r4, [r2, #0]
 800abfc:	4628      	mov	r0, r5
 800abfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac02:	f002 bf51 	b.w	800daa8 <__malloc_unlock>
 800ac06:	42a3      	cmp	r3, r4
 800ac08:	d90c      	bls.n	800ac24 <_free_r+0x4c>
 800ac0a:	6821      	ldr	r1, [r4, #0]
 800ac0c:	1862      	adds	r2, r4, r1
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	bf04      	itt	eq
 800ac12:	681a      	ldreq	r2, [r3, #0]
 800ac14:	685b      	ldreq	r3, [r3, #4]
 800ac16:	6063      	str	r3, [r4, #4]
 800ac18:	bf04      	itt	eq
 800ac1a:	1852      	addeq	r2, r2, r1
 800ac1c:	6022      	streq	r2, [r4, #0]
 800ac1e:	6004      	str	r4, [r0, #0]
 800ac20:	e7ec      	b.n	800abfc <_free_r+0x24>
 800ac22:	4613      	mov	r3, r2
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	b10a      	cbz	r2, 800ac2c <_free_r+0x54>
 800ac28:	42a2      	cmp	r2, r4
 800ac2a:	d9fa      	bls.n	800ac22 <_free_r+0x4a>
 800ac2c:	6819      	ldr	r1, [r3, #0]
 800ac2e:	1858      	adds	r0, r3, r1
 800ac30:	42a0      	cmp	r0, r4
 800ac32:	d10b      	bne.n	800ac4c <_free_r+0x74>
 800ac34:	6820      	ldr	r0, [r4, #0]
 800ac36:	4401      	add	r1, r0
 800ac38:	1858      	adds	r0, r3, r1
 800ac3a:	4282      	cmp	r2, r0
 800ac3c:	6019      	str	r1, [r3, #0]
 800ac3e:	d1dd      	bne.n	800abfc <_free_r+0x24>
 800ac40:	6810      	ldr	r0, [r2, #0]
 800ac42:	6852      	ldr	r2, [r2, #4]
 800ac44:	605a      	str	r2, [r3, #4]
 800ac46:	4401      	add	r1, r0
 800ac48:	6019      	str	r1, [r3, #0]
 800ac4a:	e7d7      	b.n	800abfc <_free_r+0x24>
 800ac4c:	d902      	bls.n	800ac54 <_free_r+0x7c>
 800ac4e:	230c      	movs	r3, #12
 800ac50:	602b      	str	r3, [r5, #0]
 800ac52:	e7d3      	b.n	800abfc <_free_r+0x24>
 800ac54:	6820      	ldr	r0, [r4, #0]
 800ac56:	1821      	adds	r1, r4, r0
 800ac58:	428a      	cmp	r2, r1
 800ac5a:	bf04      	itt	eq
 800ac5c:	6811      	ldreq	r1, [r2, #0]
 800ac5e:	6852      	ldreq	r2, [r2, #4]
 800ac60:	6062      	str	r2, [r4, #4]
 800ac62:	bf04      	itt	eq
 800ac64:	1809      	addeq	r1, r1, r0
 800ac66:	6021      	streq	r1, [r4, #0]
 800ac68:	605c      	str	r4, [r3, #4]
 800ac6a:	e7c7      	b.n	800abfc <_free_r+0x24>
 800ac6c:	bd38      	pop	{r3, r4, r5, pc}
 800ac6e:	bf00      	nop
 800ac70:	2000049c 	.word	0x2000049c

0800ac74 <_malloc_r>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	1ccd      	adds	r5, r1, #3
 800ac78:	f025 0503 	bic.w	r5, r5, #3
 800ac7c:	3508      	adds	r5, #8
 800ac7e:	2d0c      	cmp	r5, #12
 800ac80:	bf38      	it	cc
 800ac82:	250c      	movcc	r5, #12
 800ac84:	2d00      	cmp	r5, #0
 800ac86:	4606      	mov	r6, r0
 800ac88:	db01      	blt.n	800ac8e <_malloc_r+0x1a>
 800ac8a:	42a9      	cmp	r1, r5
 800ac8c:	d903      	bls.n	800ac96 <_malloc_r+0x22>
 800ac8e:	230c      	movs	r3, #12
 800ac90:	6033      	str	r3, [r6, #0]
 800ac92:	2000      	movs	r0, #0
 800ac94:	bd70      	pop	{r4, r5, r6, pc}
 800ac96:	f002 ff06 	bl	800daa6 <__malloc_lock>
 800ac9a:	4a21      	ldr	r2, [pc, #132]	; (800ad20 <_malloc_r+0xac>)
 800ac9c:	6814      	ldr	r4, [r2, #0]
 800ac9e:	4621      	mov	r1, r4
 800aca0:	b991      	cbnz	r1, 800acc8 <_malloc_r+0x54>
 800aca2:	4c20      	ldr	r4, [pc, #128]	; (800ad24 <_malloc_r+0xb0>)
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	b91b      	cbnz	r3, 800acb0 <_malloc_r+0x3c>
 800aca8:	4630      	mov	r0, r6
 800acaa:	f000 fe7b 	bl	800b9a4 <_sbrk_r>
 800acae:	6020      	str	r0, [r4, #0]
 800acb0:	4629      	mov	r1, r5
 800acb2:	4630      	mov	r0, r6
 800acb4:	f000 fe76 	bl	800b9a4 <_sbrk_r>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d124      	bne.n	800ad06 <_malloc_r+0x92>
 800acbc:	230c      	movs	r3, #12
 800acbe:	6033      	str	r3, [r6, #0]
 800acc0:	4630      	mov	r0, r6
 800acc2:	f002 fef1 	bl	800daa8 <__malloc_unlock>
 800acc6:	e7e4      	b.n	800ac92 <_malloc_r+0x1e>
 800acc8:	680b      	ldr	r3, [r1, #0]
 800acca:	1b5b      	subs	r3, r3, r5
 800accc:	d418      	bmi.n	800ad00 <_malloc_r+0x8c>
 800acce:	2b0b      	cmp	r3, #11
 800acd0:	d90f      	bls.n	800acf2 <_malloc_r+0x7e>
 800acd2:	600b      	str	r3, [r1, #0]
 800acd4:	50cd      	str	r5, [r1, r3]
 800acd6:	18cc      	adds	r4, r1, r3
 800acd8:	4630      	mov	r0, r6
 800acda:	f002 fee5 	bl	800daa8 <__malloc_unlock>
 800acde:	f104 000b 	add.w	r0, r4, #11
 800ace2:	1d23      	adds	r3, r4, #4
 800ace4:	f020 0007 	bic.w	r0, r0, #7
 800ace8:	1ac3      	subs	r3, r0, r3
 800acea:	d0d3      	beq.n	800ac94 <_malloc_r+0x20>
 800acec:	425a      	negs	r2, r3
 800acee:	50e2      	str	r2, [r4, r3]
 800acf0:	e7d0      	b.n	800ac94 <_malloc_r+0x20>
 800acf2:	428c      	cmp	r4, r1
 800acf4:	684b      	ldr	r3, [r1, #4]
 800acf6:	bf16      	itet	ne
 800acf8:	6063      	strne	r3, [r4, #4]
 800acfa:	6013      	streq	r3, [r2, #0]
 800acfc:	460c      	movne	r4, r1
 800acfe:	e7eb      	b.n	800acd8 <_malloc_r+0x64>
 800ad00:	460c      	mov	r4, r1
 800ad02:	6849      	ldr	r1, [r1, #4]
 800ad04:	e7cc      	b.n	800aca0 <_malloc_r+0x2c>
 800ad06:	1cc4      	adds	r4, r0, #3
 800ad08:	f024 0403 	bic.w	r4, r4, #3
 800ad0c:	42a0      	cmp	r0, r4
 800ad0e:	d005      	beq.n	800ad1c <_malloc_r+0xa8>
 800ad10:	1a21      	subs	r1, r4, r0
 800ad12:	4630      	mov	r0, r6
 800ad14:	f000 fe46 	bl	800b9a4 <_sbrk_r>
 800ad18:	3001      	adds	r0, #1
 800ad1a:	d0cf      	beq.n	800acbc <_malloc_r+0x48>
 800ad1c:	6025      	str	r5, [r4, #0]
 800ad1e:	e7db      	b.n	800acd8 <_malloc_r+0x64>
 800ad20:	2000049c 	.word	0x2000049c
 800ad24:	200004a0 	.word	0x200004a0

0800ad28 <__cvt>:
 800ad28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2c:	ec55 4b10 	vmov	r4, r5, d0
 800ad30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ad32:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	460e      	mov	r6, r1
 800ad3a:	4691      	mov	r9, r2
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	bfb8      	it	lt
 800ad40:	4622      	movlt	r2, r4
 800ad42:	462b      	mov	r3, r5
 800ad44:	f027 0720 	bic.w	r7, r7, #32
 800ad48:	bfbb      	ittet	lt
 800ad4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad4e:	461d      	movlt	r5, r3
 800ad50:	2300      	movge	r3, #0
 800ad52:	232d      	movlt	r3, #45	; 0x2d
 800ad54:	bfb8      	it	lt
 800ad56:	4614      	movlt	r4, r2
 800ad58:	2f46      	cmp	r7, #70	; 0x46
 800ad5a:	700b      	strb	r3, [r1, #0]
 800ad5c:	d004      	beq.n	800ad68 <__cvt+0x40>
 800ad5e:	2f45      	cmp	r7, #69	; 0x45
 800ad60:	d100      	bne.n	800ad64 <__cvt+0x3c>
 800ad62:	3601      	adds	r6, #1
 800ad64:	2102      	movs	r1, #2
 800ad66:	e000      	b.n	800ad6a <__cvt+0x42>
 800ad68:	2103      	movs	r1, #3
 800ad6a:	ab03      	add	r3, sp, #12
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	ab02      	add	r3, sp, #8
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	4632      	mov	r2, r6
 800ad74:	4653      	mov	r3, sl
 800ad76:	ec45 4b10 	vmov	d0, r4, r5
 800ad7a:	f001 fd85 	bl	800c888 <_dtoa_r>
 800ad7e:	2f47      	cmp	r7, #71	; 0x47
 800ad80:	4680      	mov	r8, r0
 800ad82:	d102      	bne.n	800ad8a <__cvt+0x62>
 800ad84:	f019 0f01 	tst.w	r9, #1
 800ad88:	d026      	beq.n	800add8 <__cvt+0xb0>
 800ad8a:	2f46      	cmp	r7, #70	; 0x46
 800ad8c:	eb08 0906 	add.w	r9, r8, r6
 800ad90:	d111      	bne.n	800adb6 <__cvt+0x8e>
 800ad92:	f898 3000 	ldrb.w	r3, [r8]
 800ad96:	2b30      	cmp	r3, #48	; 0x30
 800ad98:	d10a      	bne.n	800adb0 <__cvt+0x88>
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	4620      	mov	r0, r4
 800ada0:	4629      	mov	r1, r5
 800ada2:	f7f5 fe99 	bl	8000ad8 <__aeabi_dcmpeq>
 800ada6:	b918      	cbnz	r0, 800adb0 <__cvt+0x88>
 800ada8:	f1c6 0601 	rsb	r6, r6, #1
 800adac:	f8ca 6000 	str.w	r6, [sl]
 800adb0:	f8da 3000 	ldr.w	r3, [sl]
 800adb4:	4499      	add	r9, r3
 800adb6:	2200      	movs	r2, #0
 800adb8:	2300      	movs	r3, #0
 800adba:	4620      	mov	r0, r4
 800adbc:	4629      	mov	r1, r5
 800adbe:	f7f5 fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800adc2:	b938      	cbnz	r0, 800add4 <__cvt+0xac>
 800adc4:	2230      	movs	r2, #48	; 0x30
 800adc6:	9b03      	ldr	r3, [sp, #12]
 800adc8:	454b      	cmp	r3, r9
 800adca:	d205      	bcs.n	800add8 <__cvt+0xb0>
 800adcc:	1c59      	adds	r1, r3, #1
 800adce:	9103      	str	r1, [sp, #12]
 800add0:	701a      	strb	r2, [r3, #0]
 800add2:	e7f8      	b.n	800adc6 <__cvt+0x9e>
 800add4:	f8cd 900c 	str.w	r9, [sp, #12]
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800addc:	eba3 0308 	sub.w	r3, r3, r8
 800ade0:	4640      	mov	r0, r8
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	b004      	add	sp, #16
 800ade6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800adea <__exponent>:
 800adea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adec:	2900      	cmp	r1, #0
 800adee:	4604      	mov	r4, r0
 800adf0:	bfba      	itte	lt
 800adf2:	4249      	neglt	r1, r1
 800adf4:	232d      	movlt	r3, #45	; 0x2d
 800adf6:	232b      	movge	r3, #43	; 0x2b
 800adf8:	2909      	cmp	r1, #9
 800adfa:	f804 2b02 	strb.w	r2, [r4], #2
 800adfe:	7043      	strb	r3, [r0, #1]
 800ae00:	dd20      	ble.n	800ae44 <__exponent+0x5a>
 800ae02:	f10d 0307 	add.w	r3, sp, #7
 800ae06:	461f      	mov	r7, r3
 800ae08:	260a      	movs	r6, #10
 800ae0a:	fb91 f5f6 	sdiv	r5, r1, r6
 800ae0e:	fb06 1115 	mls	r1, r6, r5, r1
 800ae12:	3130      	adds	r1, #48	; 0x30
 800ae14:	2d09      	cmp	r5, #9
 800ae16:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae1a:	f103 32ff 	add.w	r2, r3, #4294967295
 800ae1e:	4629      	mov	r1, r5
 800ae20:	dc09      	bgt.n	800ae36 <__exponent+0x4c>
 800ae22:	3130      	adds	r1, #48	; 0x30
 800ae24:	3b02      	subs	r3, #2
 800ae26:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ae2a:	42bb      	cmp	r3, r7
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	d304      	bcc.n	800ae3a <__exponent+0x50>
 800ae30:	1a10      	subs	r0, r2, r0
 800ae32:	b003      	add	sp, #12
 800ae34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae36:	4613      	mov	r3, r2
 800ae38:	e7e7      	b.n	800ae0a <__exponent+0x20>
 800ae3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae3e:	f804 2b01 	strb.w	r2, [r4], #1
 800ae42:	e7f2      	b.n	800ae2a <__exponent+0x40>
 800ae44:	2330      	movs	r3, #48	; 0x30
 800ae46:	4419      	add	r1, r3
 800ae48:	7083      	strb	r3, [r0, #2]
 800ae4a:	1d02      	adds	r2, r0, #4
 800ae4c:	70c1      	strb	r1, [r0, #3]
 800ae4e:	e7ef      	b.n	800ae30 <__exponent+0x46>

0800ae50 <_printf_float>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	b08d      	sub	sp, #52	; 0x34
 800ae56:	460c      	mov	r4, r1
 800ae58:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ae5c:	4616      	mov	r6, r2
 800ae5e:	461f      	mov	r7, r3
 800ae60:	4605      	mov	r5, r0
 800ae62:	f002 fdf5 	bl	800da50 <_localeconv_r>
 800ae66:	6803      	ldr	r3, [r0, #0]
 800ae68:	9304      	str	r3, [sp, #16]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7f5 f9b8 	bl	80001e0 <strlen>
 800ae70:	2300      	movs	r3, #0
 800ae72:	930a      	str	r3, [sp, #40]	; 0x28
 800ae74:	f8d8 3000 	ldr.w	r3, [r8]
 800ae78:	9005      	str	r0, [sp, #20]
 800ae7a:	3307      	adds	r3, #7
 800ae7c:	f023 0307 	bic.w	r3, r3, #7
 800ae80:	f103 0208 	add.w	r2, r3, #8
 800ae84:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae88:	f8d4 b000 	ldr.w	fp, [r4]
 800ae8c:	f8c8 2000 	str.w	r2, [r8]
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae98:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aea0:	9307      	str	r3, [sp, #28]
 800aea2:	f8cd 8018 	str.w	r8, [sp, #24]
 800aea6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeaa:	4ba7      	ldr	r3, [pc, #668]	; (800b148 <_printf_float+0x2f8>)
 800aeac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeb0:	f7f5 fe44 	bl	8000b3c <__aeabi_dcmpun>
 800aeb4:	bb70      	cbnz	r0, 800af14 <_printf_float+0xc4>
 800aeb6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeba:	4ba3      	ldr	r3, [pc, #652]	; (800b148 <_printf_float+0x2f8>)
 800aebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aec0:	f7f5 fe1e 	bl	8000b00 <__aeabi_dcmple>
 800aec4:	bb30      	cbnz	r0, 800af14 <_printf_float+0xc4>
 800aec6:	2200      	movs	r2, #0
 800aec8:	2300      	movs	r3, #0
 800aeca:	4640      	mov	r0, r8
 800aecc:	4649      	mov	r1, r9
 800aece:	f7f5 fe0d 	bl	8000aec <__aeabi_dcmplt>
 800aed2:	b110      	cbz	r0, 800aeda <_printf_float+0x8a>
 800aed4:	232d      	movs	r3, #45	; 0x2d
 800aed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeda:	4a9c      	ldr	r2, [pc, #624]	; (800b14c <_printf_float+0x2fc>)
 800aedc:	4b9c      	ldr	r3, [pc, #624]	; (800b150 <_printf_float+0x300>)
 800aede:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800aee2:	bf8c      	ite	hi
 800aee4:	4690      	movhi	r8, r2
 800aee6:	4698      	movls	r8, r3
 800aee8:	2303      	movs	r3, #3
 800aeea:	f02b 0204 	bic.w	r2, fp, #4
 800aeee:	6123      	str	r3, [r4, #16]
 800aef0:	6022      	str	r2, [r4, #0]
 800aef2:	f04f 0900 	mov.w	r9, #0
 800aef6:	9700      	str	r7, [sp, #0]
 800aef8:	4633      	mov	r3, r6
 800aefa:	aa0b      	add	r2, sp, #44	; 0x2c
 800aefc:	4621      	mov	r1, r4
 800aefe:	4628      	mov	r0, r5
 800af00:	f000 f9e6 	bl	800b2d0 <_printf_common>
 800af04:	3001      	adds	r0, #1
 800af06:	f040 808d 	bne.w	800b024 <_printf_float+0x1d4>
 800af0a:	f04f 30ff 	mov.w	r0, #4294967295
 800af0e:	b00d      	add	sp, #52	; 0x34
 800af10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af14:	4642      	mov	r2, r8
 800af16:	464b      	mov	r3, r9
 800af18:	4640      	mov	r0, r8
 800af1a:	4649      	mov	r1, r9
 800af1c:	f7f5 fe0e 	bl	8000b3c <__aeabi_dcmpun>
 800af20:	b110      	cbz	r0, 800af28 <_printf_float+0xd8>
 800af22:	4a8c      	ldr	r2, [pc, #560]	; (800b154 <_printf_float+0x304>)
 800af24:	4b8c      	ldr	r3, [pc, #560]	; (800b158 <_printf_float+0x308>)
 800af26:	e7da      	b.n	800aede <_printf_float+0x8e>
 800af28:	6861      	ldr	r1, [r4, #4]
 800af2a:	1c4b      	adds	r3, r1, #1
 800af2c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800af30:	a80a      	add	r0, sp, #40	; 0x28
 800af32:	d13e      	bne.n	800afb2 <_printf_float+0x162>
 800af34:	2306      	movs	r3, #6
 800af36:	6063      	str	r3, [r4, #4]
 800af38:	2300      	movs	r3, #0
 800af3a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800af3e:	ab09      	add	r3, sp, #36	; 0x24
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	ec49 8b10 	vmov	d0, r8, r9
 800af46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af4a:	6022      	str	r2, [r4, #0]
 800af4c:	f8cd a004 	str.w	sl, [sp, #4]
 800af50:	6861      	ldr	r1, [r4, #4]
 800af52:	4628      	mov	r0, r5
 800af54:	f7ff fee8 	bl	800ad28 <__cvt>
 800af58:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800af5c:	2b47      	cmp	r3, #71	; 0x47
 800af5e:	4680      	mov	r8, r0
 800af60:	d109      	bne.n	800af76 <_printf_float+0x126>
 800af62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af64:	1cd8      	adds	r0, r3, #3
 800af66:	db02      	blt.n	800af6e <_printf_float+0x11e>
 800af68:	6862      	ldr	r2, [r4, #4]
 800af6a:	4293      	cmp	r3, r2
 800af6c:	dd47      	ble.n	800affe <_printf_float+0x1ae>
 800af6e:	f1aa 0a02 	sub.w	sl, sl, #2
 800af72:	fa5f fa8a 	uxtb.w	sl, sl
 800af76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800af7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af7c:	d824      	bhi.n	800afc8 <_printf_float+0x178>
 800af7e:	3901      	subs	r1, #1
 800af80:	4652      	mov	r2, sl
 800af82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af86:	9109      	str	r1, [sp, #36]	; 0x24
 800af88:	f7ff ff2f 	bl	800adea <__exponent>
 800af8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af8e:	1813      	adds	r3, r2, r0
 800af90:	2a01      	cmp	r2, #1
 800af92:	4681      	mov	r9, r0
 800af94:	6123      	str	r3, [r4, #16]
 800af96:	dc02      	bgt.n	800af9e <_printf_float+0x14e>
 800af98:	6822      	ldr	r2, [r4, #0]
 800af9a:	07d1      	lsls	r1, r2, #31
 800af9c:	d501      	bpl.n	800afa2 <_printf_float+0x152>
 800af9e:	3301      	adds	r3, #1
 800afa0:	6123      	str	r3, [r4, #16]
 800afa2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0a5      	beq.n	800aef6 <_printf_float+0xa6>
 800afaa:	232d      	movs	r3, #45	; 0x2d
 800afac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afb0:	e7a1      	b.n	800aef6 <_printf_float+0xa6>
 800afb2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800afb6:	f000 8177 	beq.w	800b2a8 <_printf_float+0x458>
 800afba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800afbe:	d1bb      	bne.n	800af38 <_printf_float+0xe8>
 800afc0:	2900      	cmp	r1, #0
 800afc2:	d1b9      	bne.n	800af38 <_printf_float+0xe8>
 800afc4:	2301      	movs	r3, #1
 800afc6:	e7b6      	b.n	800af36 <_printf_float+0xe6>
 800afc8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800afcc:	d119      	bne.n	800b002 <_printf_float+0x1b2>
 800afce:	2900      	cmp	r1, #0
 800afd0:	6863      	ldr	r3, [r4, #4]
 800afd2:	dd0c      	ble.n	800afee <_printf_float+0x19e>
 800afd4:	6121      	str	r1, [r4, #16]
 800afd6:	b913      	cbnz	r3, 800afde <_printf_float+0x18e>
 800afd8:	6822      	ldr	r2, [r4, #0]
 800afda:	07d2      	lsls	r2, r2, #31
 800afdc:	d502      	bpl.n	800afe4 <_printf_float+0x194>
 800afde:	3301      	adds	r3, #1
 800afe0:	440b      	add	r3, r1
 800afe2:	6123      	str	r3, [r4, #16]
 800afe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe6:	65a3      	str	r3, [r4, #88]	; 0x58
 800afe8:	f04f 0900 	mov.w	r9, #0
 800afec:	e7d9      	b.n	800afa2 <_printf_float+0x152>
 800afee:	b913      	cbnz	r3, 800aff6 <_printf_float+0x1a6>
 800aff0:	6822      	ldr	r2, [r4, #0]
 800aff2:	07d0      	lsls	r0, r2, #31
 800aff4:	d501      	bpl.n	800affa <_printf_float+0x1aa>
 800aff6:	3302      	adds	r3, #2
 800aff8:	e7f3      	b.n	800afe2 <_printf_float+0x192>
 800affa:	2301      	movs	r3, #1
 800affc:	e7f1      	b.n	800afe2 <_printf_float+0x192>
 800affe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b002:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b006:	4293      	cmp	r3, r2
 800b008:	db05      	blt.n	800b016 <_printf_float+0x1c6>
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	6123      	str	r3, [r4, #16]
 800b00e:	07d1      	lsls	r1, r2, #31
 800b010:	d5e8      	bpl.n	800afe4 <_printf_float+0x194>
 800b012:	3301      	adds	r3, #1
 800b014:	e7e5      	b.n	800afe2 <_printf_float+0x192>
 800b016:	2b00      	cmp	r3, #0
 800b018:	bfd4      	ite	le
 800b01a:	f1c3 0302 	rsble	r3, r3, #2
 800b01e:	2301      	movgt	r3, #1
 800b020:	4413      	add	r3, r2
 800b022:	e7de      	b.n	800afe2 <_printf_float+0x192>
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	055a      	lsls	r2, r3, #21
 800b028:	d407      	bmi.n	800b03a <_printf_float+0x1ea>
 800b02a:	6923      	ldr	r3, [r4, #16]
 800b02c:	4642      	mov	r2, r8
 800b02e:	4631      	mov	r1, r6
 800b030:	4628      	mov	r0, r5
 800b032:	47b8      	blx	r7
 800b034:	3001      	adds	r0, #1
 800b036:	d12b      	bne.n	800b090 <_printf_float+0x240>
 800b038:	e767      	b.n	800af0a <_printf_float+0xba>
 800b03a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b03e:	f240 80dc 	bls.w	800b1fa <_printf_float+0x3aa>
 800b042:	2200      	movs	r2, #0
 800b044:	2300      	movs	r3, #0
 800b046:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b04a:	f7f5 fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800b04e:	2800      	cmp	r0, #0
 800b050:	d033      	beq.n	800b0ba <_printf_float+0x26a>
 800b052:	2301      	movs	r3, #1
 800b054:	4a41      	ldr	r2, [pc, #260]	; (800b15c <_printf_float+0x30c>)
 800b056:	4631      	mov	r1, r6
 800b058:	4628      	mov	r0, r5
 800b05a:	47b8      	blx	r7
 800b05c:	3001      	adds	r0, #1
 800b05e:	f43f af54 	beq.w	800af0a <_printf_float+0xba>
 800b062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b066:	429a      	cmp	r2, r3
 800b068:	db02      	blt.n	800b070 <_printf_float+0x220>
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	07d8      	lsls	r0, r3, #31
 800b06e:	d50f      	bpl.n	800b090 <_printf_float+0x240>
 800b070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b074:	4631      	mov	r1, r6
 800b076:	4628      	mov	r0, r5
 800b078:	47b8      	blx	r7
 800b07a:	3001      	adds	r0, #1
 800b07c:	f43f af45 	beq.w	800af0a <_printf_float+0xba>
 800b080:	f04f 0800 	mov.w	r8, #0
 800b084:	f104 091a 	add.w	r9, r4, #26
 800b088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b08a:	3b01      	subs	r3, #1
 800b08c:	4543      	cmp	r3, r8
 800b08e:	dc09      	bgt.n	800b0a4 <_printf_float+0x254>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	079b      	lsls	r3, r3, #30
 800b094:	f100 8103 	bmi.w	800b29e <_printf_float+0x44e>
 800b098:	68e0      	ldr	r0, [r4, #12]
 800b09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b09c:	4298      	cmp	r0, r3
 800b09e:	bfb8      	it	lt
 800b0a0:	4618      	movlt	r0, r3
 800b0a2:	e734      	b.n	800af0e <_printf_float+0xbe>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	464a      	mov	r2, r9
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	47b8      	blx	r7
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	f43f af2b 	beq.w	800af0a <_printf_float+0xba>
 800b0b4:	f108 0801 	add.w	r8, r8, #1
 800b0b8:	e7e6      	b.n	800b088 <_printf_float+0x238>
 800b0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	dc2b      	bgt.n	800b118 <_printf_float+0x2c8>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	4a26      	ldr	r2, [pc, #152]	; (800b15c <_printf_float+0x30c>)
 800b0c4:	4631      	mov	r1, r6
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	47b8      	blx	r7
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	f43f af1d 	beq.w	800af0a <_printf_float+0xba>
 800b0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d2:	b923      	cbnz	r3, 800b0de <_printf_float+0x28e>
 800b0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0d6:	b913      	cbnz	r3, 800b0de <_printf_float+0x28e>
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	07d9      	lsls	r1, r3, #31
 800b0dc:	d5d8      	bpl.n	800b090 <_printf_float+0x240>
 800b0de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	47b8      	blx	r7
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	f43f af0e 	beq.w	800af0a <_printf_float+0xba>
 800b0ee:	f04f 0900 	mov.w	r9, #0
 800b0f2:	f104 0a1a 	add.w	sl, r4, #26
 800b0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f8:	425b      	negs	r3, r3
 800b0fa:	454b      	cmp	r3, r9
 800b0fc:	dc01      	bgt.n	800b102 <_printf_float+0x2b2>
 800b0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b100:	e794      	b.n	800b02c <_printf_float+0x1dc>
 800b102:	2301      	movs	r3, #1
 800b104:	4652      	mov	r2, sl
 800b106:	4631      	mov	r1, r6
 800b108:	4628      	mov	r0, r5
 800b10a:	47b8      	blx	r7
 800b10c:	3001      	adds	r0, #1
 800b10e:	f43f aefc 	beq.w	800af0a <_printf_float+0xba>
 800b112:	f109 0901 	add.w	r9, r9, #1
 800b116:	e7ee      	b.n	800b0f6 <_printf_float+0x2a6>
 800b118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b11a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b11c:	429a      	cmp	r2, r3
 800b11e:	bfa8      	it	ge
 800b120:	461a      	movge	r2, r3
 800b122:	2a00      	cmp	r2, #0
 800b124:	4691      	mov	r9, r2
 800b126:	dd07      	ble.n	800b138 <_printf_float+0x2e8>
 800b128:	4613      	mov	r3, r2
 800b12a:	4631      	mov	r1, r6
 800b12c:	4642      	mov	r2, r8
 800b12e:	4628      	mov	r0, r5
 800b130:	47b8      	blx	r7
 800b132:	3001      	adds	r0, #1
 800b134:	f43f aee9 	beq.w	800af0a <_printf_float+0xba>
 800b138:	f104 031a 	add.w	r3, r4, #26
 800b13c:	f04f 0b00 	mov.w	fp, #0
 800b140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b144:	9306      	str	r3, [sp, #24]
 800b146:	e015      	b.n	800b174 <_printf_float+0x324>
 800b148:	7fefffff 	.word	0x7fefffff
 800b14c:	0800e98c 	.word	0x0800e98c
 800b150:	0800e988 	.word	0x0800e988
 800b154:	0800e994 	.word	0x0800e994
 800b158:	0800e990 	.word	0x0800e990
 800b15c:	0800e998 	.word	0x0800e998
 800b160:	2301      	movs	r3, #1
 800b162:	9a06      	ldr	r2, [sp, #24]
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	f43f aecd 	beq.w	800af0a <_printf_float+0xba>
 800b170:	f10b 0b01 	add.w	fp, fp, #1
 800b174:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b178:	ebaa 0309 	sub.w	r3, sl, r9
 800b17c:	455b      	cmp	r3, fp
 800b17e:	dcef      	bgt.n	800b160 <_printf_float+0x310>
 800b180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b184:	429a      	cmp	r2, r3
 800b186:	44d0      	add	r8, sl
 800b188:	db15      	blt.n	800b1b6 <_printf_float+0x366>
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	07da      	lsls	r2, r3, #31
 800b18e:	d412      	bmi.n	800b1b6 <_printf_float+0x366>
 800b190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b192:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b194:	eba3 020a 	sub.w	r2, r3, sl
 800b198:	eba3 0a01 	sub.w	sl, r3, r1
 800b19c:	4592      	cmp	sl, r2
 800b19e:	bfa8      	it	ge
 800b1a0:	4692      	movge	sl, r2
 800b1a2:	f1ba 0f00 	cmp.w	sl, #0
 800b1a6:	dc0e      	bgt.n	800b1c6 <_printf_float+0x376>
 800b1a8:	f04f 0800 	mov.w	r8, #0
 800b1ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1b0:	f104 091a 	add.w	r9, r4, #26
 800b1b4:	e019      	b.n	800b1ea <_printf_float+0x39a>
 800b1b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	4628      	mov	r0, r5
 800b1be:	47b8      	blx	r7
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d1e5      	bne.n	800b190 <_printf_float+0x340>
 800b1c4:	e6a1      	b.n	800af0a <_printf_float+0xba>
 800b1c6:	4653      	mov	r3, sl
 800b1c8:	4642      	mov	r2, r8
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	47b8      	blx	r7
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d1e9      	bne.n	800b1a8 <_printf_float+0x358>
 800b1d4:	e699      	b.n	800af0a <_printf_float+0xba>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	464a      	mov	r2, r9
 800b1da:	4631      	mov	r1, r6
 800b1dc:	4628      	mov	r0, r5
 800b1de:	47b8      	blx	r7
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	f43f ae92 	beq.w	800af0a <_printf_float+0xba>
 800b1e6:	f108 0801 	add.w	r8, r8, #1
 800b1ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1ee:	1a9b      	subs	r3, r3, r2
 800b1f0:	eba3 030a 	sub.w	r3, r3, sl
 800b1f4:	4543      	cmp	r3, r8
 800b1f6:	dcee      	bgt.n	800b1d6 <_printf_float+0x386>
 800b1f8:	e74a      	b.n	800b090 <_printf_float+0x240>
 800b1fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1fc:	2a01      	cmp	r2, #1
 800b1fe:	dc01      	bgt.n	800b204 <_printf_float+0x3b4>
 800b200:	07db      	lsls	r3, r3, #31
 800b202:	d53a      	bpl.n	800b27a <_printf_float+0x42a>
 800b204:	2301      	movs	r3, #1
 800b206:	4642      	mov	r2, r8
 800b208:	4631      	mov	r1, r6
 800b20a:	4628      	mov	r0, r5
 800b20c:	47b8      	blx	r7
 800b20e:	3001      	adds	r0, #1
 800b210:	f43f ae7b 	beq.w	800af0a <_printf_float+0xba>
 800b214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b218:	4631      	mov	r1, r6
 800b21a:	4628      	mov	r0, r5
 800b21c:	47b8      	blx	r7
 800b21e:	3001      	adds	r0, #1
 800b220:	f108 0801 	add.w	r8, r8, #1
 800b224:	f43f ae71 	beq.w	800af0a <_printf_float+0xba>
 800b228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b22a:	2200      	movs	r2, #0
 800b22c:	f103 3aff 	add.w	sl, r3, #4294967295
 800b230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b234:	2300      	movs	r3, #0
 800b236:	f7f5 fc4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b23a:	b9c8      	cbnz	r0, 800b270 <_printf_float+0x420>
 800b23c:	4653      	mov	r3, sl
 800b23e:	4642      	mov	r2, r8
 800b240:	4631      	mov	r1, r6
 800b242:	4628      	mov	r0, r5
 800b244:	47b8      	blx	r7
 800b246:	3001      	adds	r0, #1
 800b248:	d10e      	bne.n	800b268 <_printf_float+0x418>
 800b24a:	e65e      	b.n	800af0a <_printf_float+0xba>
 800b24c:	2301      	movs	r3, #1
 800b24e:	4652      	mov	r2, sl
 800b250:	4631      	mov	r1, r6
 800b252:	4628      	mov	r0, r5
 800b254:	47b8      	blx	r7
 800b256:	3001      	adds	r0, #1
 800b258:	f43f ae57 	beq.w	800af0a <_printf_float+0xba>
 800b25c:	f108 0801 	add.w	r8, r8, #1
 800b260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b262:	3b01      	subs	r3, #1
 800b264:	4543      	cmp	r3, r8
 800b266:	dcf1      	bgt.n	800b24c <_printf_float+0x3fc>
 800b268:	464b      	mov	r3, r9
 800b26a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b26e:	e6de      	b.n	800b02e <_printf_float+0x1de>
 800b270:	f04f 0800 	mov.w	r8, #0
 800b274:	f104 0a1a 	add.w	sl, r4, #26
 800b278:	e7f2      	b.n	800b260 <_printf_float+0x410>
 800b27a:	2301      	movs	r3, #1
 800b27c:	e7df      	b.n	800b23e <_printf_float+0x3ee>
 800b27e:	2301      	movs	r3, #1
 800b280:	464a      	mov	r2, r9
 800b282:	4631      	mov	r1, r6
 800b284:	4628      	mov	r0, r5
 800b286:	47b8      	blx	r7
 800b288:	3001      	adds	r0, #1
 800b28a:	f43f ae3e 	beq.w	800af0a <_printf_float+0xba>
 800b28e:	f108 0801 	add.w	r8, r8, #1
 800b292:	68e3      	ldr	r3, [r4, #12]
 800b294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b296:	1a9b      	subs	r3, r3, r2
 800b298:	4543      	cmp	r3, r8
 800b29a:	dcf0      	bgt.n	800b27e <_printf_float+0x42e>
 800b29c:	e6fc      	b.n	800b098 <_printf_float+0x248>
 800b29e:	f04f 0800 	mov.w	r8, #0
 800b2a2:	f104 0919 	add.w	r9, r4, #25
 800b2a6:	e7f4      	b.n	800b292 <_printf_float+0x442>
 800b2a8:	2900      	cmp	r1, #0
 800b2aa:	f43f ae8b 	beq.w	800afc4 <_printf_float+0x174>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b2b4:	ab09      	add	r3, sp, #36	; 0x24
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	ec49 8b10 	vmov	d0, r8, r9
 800b2bc:	6022      	str	r2, [r4, #0]
 800b2be:	f8cd a004 	str.w	sl, [sp, #4]
 800b2c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f7ff fd2e 	bl	800ad28 <__cvt>
 800b2cc:	4680      	mov	r8, r0
 800b2ce:	e648      	b.n	800af62 <_printf_float+0x112>

0800b2d0 <_printf_common>:
 800b2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d4:	4691      	mov	r9, r2
 800b2d6:	461f      	mov	r7, r3
 800b2d8:	688a      	ldr	r2, [r1, #8]
 800b2da:	690b      	ldr	r3, [r1, #16]
 800b2dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	bfb8      	it	lt
 800b2e4:	4613      	movlt	r3, r2
 800b2e6:	f8c9 3000 	str.w	r3, [r9]
 800b2ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	b112      	cbz	r2, 800b2fa <_printf_common+0x2a>
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	f8c9 3000 	str.w	r3, [r9]
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	0699      	lsls	r1, r3, #26
 800b2fe:	bf42      	ittt	mi
 800b300:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b304:	3302      	addmi	r3, #2
 800b306:	f8c9 3000 	strmi.w	r3, [r9]
 800b30a:	6825      	ldr	r5, [r4, #0]
 800b30c:	f015 0506 	ands.w	r5, r5, #6
 800b310:	d107      	bne.n	800b322 <_printf_common+0x52>
 800b312:	f104 0a19 	add.w	sl, r4, #25
 800b316:	68e3      	ldr	r3, [r4, #12]
 800b318:	f8d9 2000 	ldr.w	r2, [r9]
 800b31c:	1a9b      	subs	r3, r3, r2
 800b31e:	42ab      	cmp	r3, r5
 800b320:	dc28      	bgt.n	800b374 <_printf_common+0xa4>
 800b322:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b326:	6822      	ldr	r2, [r4, #0]
 800b328:	3300      	adds	r3, #0
 800b32a:	bf18      	it	ne
 800b32c:	2301      	movne	r3, #1
 800b32e:	0692      	lsls	r2, r2, #26
 800b330:	d42d      	bmi.n	800b38e <_printf_common+0xbe>
 800b332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b336:	4639      	mov	r1, r7
 800b338:	4630      	mov	r0, r6
 800b33a:	47c0      	blx	r8
 800b33c:	3001      	adds	r0, #1
 800b33e:	d020      	beq.n	800b382 <_printf_common+0xb2>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	68e5      	ldr	r5, [r4, #12]
 800b344:	f8d9 2000 	ldr.w	r2, [r9]
 800b348:	f003 0306 	and.w	r3, r3, #6
 800b34c:	2b04      	cmp	r3, #4
 800b34e:	bf08      	it	eq
 800b350:	1aad      	subeq	r5, r5, r2
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	6922      	ldr	r2, [r4, #16]
 800b356:	bf0c      	ite	eq
 800b358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b35c:	2500      	movne	r5, #0
 800b35e:	4293      	cmp	r3, r2
 800b360:	bfc4      	itt	gt
 800b362:	1a9b      	subgt	r3, r3, r2
 800b364:	18ed      	addgt	r5, r5, r3
 800b366:	f04f 0900 	mov.w	r9, #0
 800b36a:	341a      	adds	r4, #26
 800b36c:	454d      	cmp	r5, r9
 800b36e:	d11a      	bne.n	800b3a6 <_printf_common+0xd6>
 800b370:	2000      	movs	r0, #0
 800b372:	e008      	b.n	800b386 <_printf_common+0xb6>
 800b374:	2301      	movs	r3, #1
 800b376:	4652      	mov	r2, sl
 800b378:	4639      	mov	r1, r7
 800b37a:	4630      	mov	r0, r6
 800b37c:	47c0      	blx	r8
 800b37e:	3001      	adds	r0, #1
 800b380:	d103      	bne.n	800b38a <_printf_common+0xba>
 800b382:	f04f 30ff 	mov.w	r0, #4294967295
 800b386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b38a:	3501      	adds	r5, #1
 800b38c:	e7c3      	b.n	800b316 <_printf_common+0x46>
 800b38e:	18e1      	adds	r1, r4, r3
 800b390:	1c5a      	adds	r2, r3, #1
 800b392:	2030      	movs	r0, #48	; 0x30
 800b394:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b398:	4422      	add	r2, r4
 800b39a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b39e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3a2:	3302      	adds	r3, #2
 800b3a4:	e7c5      	b.n	800b332 <_printf_common+0x62>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	47c0      	blx	r8
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	d0e6      	beq.n	800b382 <_printf_common+0xb2>
 800b3b4:	f109 0901 	add.w	r9, r9, #1
 800b3b8:	e7d8      	b.n	800b36c <_printf_common+0x9c>
	...

0800b3bc <_printf_i>:
 800b3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	7e09      	ldrb	r1, [r1, #24]
 800b3c8:	b085      	sub	sp, #20
 800b3ca:	296e      	cmp	r1, #110	; 0x6e
 800b3cc:	4617      	mov	r7, r2
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	4698      	mov	r8, r3
 800b3d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3d4:	f000 80b3 	beq.w	800b53e <_printf_i+0x182>
 800b3d8:	d822      	bhi.n	800b420 <_printf_i+0x64>
 800b3da:	2963      	cmp	r1, #99	; 0x63
 800b3dc:	d036      	beq.n	800b44c <_printf_i+0x90>
 800b3de:	d80a      	bhi.n	800b3f6 <_printf_i+0x3a>
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	f000 80b9 	beq.w	800b558 <_printf_i+0x19c>
 800b3e6:	2958      	cmp	r1, #88	; 0x58
 800b3e8:	f000 8083 	beq.w	800b4f2 <_printf_i+0x136>
 800b3ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b3f4:	e032      	b.n	800b45c <_printf_i+0xa0>
 800b3f6:	2964      	cmp	r1, #100	; 0x64
 800b3f8:	d001      	beq.n	800b3fe <_printf_i+0x42>
 800b3fa:	2969      	cmp	r1, #105	; 0x69
 800b3fc:	d1f6      	bne.n	800b3ec <_printf_i+0x30>
 800b3fe:	6820      	ldr	r0, [r4, #0]
 800b400:	6813      	ldr	r3, [r2, #0]
 800b402:	0605      	lsls	r5, r0, #24
 800b404:	f103 0104 	add.w	r1, r3, #4
 800b408:	d52a      	bpl.n	800b460 <_printf_i+0xa4>
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6011      	str	r1, [r2, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	da03      	bge.n	800b41a <_printf_i+0x5e>
 800b412:	222d      	movs	r2, #45	; 0x2d
 800b414:	425b      	negs	r3, r3
 800b416:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b41a:	486f      	ldr	r0, [pc, #444]	; (800b5d8 <_printf_i+0x21c>)
 800b41c:	220a      	movs	r2, #10
 800b41e:	e039      	b.n	800b494 <_printf_i+0xd8>
 800b420:	2973      	cmp	r1, #115	; 0x73
 800b422:	f000 809d 	beq.w	800b560 <_printf_i+0x1a4>
 800b426:	d808      	bhi.n	800b43a <_printf_i+0x7e>
 800b428:	296f      	cmp	r1, #111	; 0x6f
 800b42a:	d020      	beq.n	800b46e <_printf_i+0xb2>
 800b42c:	2970      	cmp	r1, #112	; 0x70
 800b42e:	d1dd      	bne.n	800b3ec <_printf_i+0x30>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	f043 0320 	orr.w	r3, r3, #32
 800b436:	6023      	str	r3, [r4, #0]
 800b438:	e003      	b.n	800b442 <_printf_i+0x86>
 800b43a:	2975      	cmp	r1, #117	; 0x75
 800b43c:	d017      	beq.n	800b46e <_printf_i+0xb2>
 800b43e:	2978      	cmp	r1, #120	; 0x78
 800b440:	d1d4      	bne.n	800b3ec <_printf_i+0x30>
 800b442:	2378      	movs	r3, #120	; 0x78
 800b444:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b448:	4864      	ldr	r0, [pc, #400]	; (800b5dc <_printf_i+0x220>)
 800b44a:	e055      	b.n	800b4f8 <_printf_i+0x13c>
 800b44c:	6813      	ldr	r3, [r2, #0]
 800b44e:	1d19      	adds	r1, r3, #4
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	6011      	str	r1, [r2, #0]
 800b454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b45c:	2301      	movs	r3, #1
 800b45e:	e08c      	b.n	800b57a <_printf_i+0x1be>
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6011      	str	r1, [r2, #0]
 800b464:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b468:	bf18      	it	ne
 800b46a:	b21b      	sxthne	r3, r3
 800b46c:	e7cf      	b.n	800b40e <_printf_i+0x52>
 800b46e:	6813      	ldr	r3, [r2, #0]
 800b470:	6825      	ldr	r5, [r4, #0]
 800b472:	1d18      	adds	r0, r3, #4
 800b474:	6010      	str	r0, [r2, #0]
 800b476:	0628      	lsls	r0, r5, #24
 800b478:	d501      	bpl.n	800b47e <_printf_i+0xc2>
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	e002      	b.n	800b484 <_printf_i+0xc8>
 800b47e:	0668      	lsls	r0, r5, #25
 800b480:	d5fb      	bpl.n	800b47a <_printf_i+0xbe>
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	4854      	ldr	r0, [pc, #336]	; (800b5d8 <_printf_i+0x21c>)
 800b486:	296f      	cmp	r1, #111	; 0x6f
 800b488:	bf14      	ite	ne
 800b48a:	220a      	movne	r2, #10
 800b48c:	2208      	moveq	r2, #8
 800b48e:	2100      	movs	r1, #0
 800b490:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b494:	6865      	ldr	r5, [r4, #4]
 800b496:	60a5      	str	r5, [r4, #8]
 800b498:	2d00      	cmp	r5, #0
 800b49a:	f2c0 8095 	blt.w	800b5c8 <_printf_i+0x20c>
 800b49e:	6821      	ldr	r1, [r4, #0]
 800b4a0:	f021 0104 	bic.w	r1, r1, #4
 800b4a4:	6021      	str	r1, [r4, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d13d      	bne.n	800b526 <_printf_i+0x16a>
 800b4aa:	2d00      	cmp	r5, #0
 800b4ac:	f040 808e 	bne.w	800b5cc <_printf_i+0x210>
 800b4b0:	4665      	mov	r5, ip
 800b4b2:	2a08      	cmp	r2, #8
 800b4b4:	d10b      	bne.n	800b4ce <_printf_i+0x112>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	07db      	lsls	r3, r3, #31
 800b4ba:	d508      	bpl.n	800b4ce <_printf_i+0x112>
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	6862      	ldr	r2, [r4, #4]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	bfde      	ittt	le
 800b4c4:	2330      	movle	r3, #48	; 0x30
 800b4c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4ce:	ebac 0305 	sub.w	r3, ip, r5
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	f8cd 8000 	str.w	r8, [sp]
 800b4d8:	463b      	mov	r3, r7
 800b4da:	aa03      	add	r2, sp, #12
 800b4dc:	4621      	mov	r1, r4
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f7ff fef6 	bl	800b2d0 <_printf_common>
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d14d      	bne.n	800b584 <_printf_i+0x1c8>
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	b005      	add	sp, #20
 800b4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4f2:	4839      	ldr	r0, [pc, #228]	; (800b5d8 <_printf_i+0x21c>)
 800b4f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b4f8:	6813      	ldr	r3, [r2, #0]
 800b4fa:	6821      	ldr	r1, [r4, #0]
 800b4fc:	1d1d      	adds	r5, r3, #4
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6015      	str	r5, [r2, #0]
 800b502:	060a      	lsls	r2, r1, #24
 800b504:	d50b      	bpl.n	800b51e <_printf_i+0x162>
 800b506:	07ca      	lsls	r2, r1, #31
 800b508:	bf44      	itt	mi
 800b50a:	f041 0120 	orrmi.w	r1, r1, #32
 800b50e:	6021      	strmi	r1, [r4, #0]
 800b510:	b91b      	cbnz	r3, 800b51a <_printf_i+0x15e>
 800b512:	6822      	ldr	r2, [r4, #0]
 800b514:	f022 0220 	bic.w	r2, r2, #32
 800b518:	6022      	str	r2, [r4, #0]
 800b51a:	2210      	movs	r2, #16
 800b51c:	e7b7      	b.n	800b48e <_printf_i+0xd2>
 800b51e:	064d      	lsls	r5, r1, #25
 800b520:	bf48      	it	mi
 800b522:	b29b      	uxthmi	r3, r3
 800b524:	e7ef      	b.n	800b506 <_printf_i+0x14a>
 800b526:	4665      	mov	r5, ip
 800b528:	fbb3 f1f2 	udiv	r1, r3, r2
 800b52c:	fb02 3311 	mls	r3, r2, r1, r3
 800b530:	5cc3      	ldrb	r3, [r0, r3]
 800b532:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b536:	460b      	mov	r3, r1
 800b538:	2900      	cmp	r1, #0
 800b53a:	d1f5      	bne.n	800b528 <_printf_i+0x16c>
 800b53c:	e7b9      	b.n	800b4b2 <_printf_i+0xf6>
 800b53e:	6813      	ldr	r3, [r2, #0]
 800b540:	6825      	ldr	r5, [r4, #0]
 800b542:	6961      	ldr	r1, [r4, #20]
 800b544:	1d18      	adds	r0, r3, #4
 800b546:	6010      	str	r0, [r2, #0]
 800b548:	0628      	lsls	r0, r5, #24
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	d501      	bpl.n	800b552 <_printf_i+0x196>
 800b54e:	6019      	str	r1, [r3, #0]
 800b550:	e002      	b.n	800b558 <_printf_i+0x19c>
 800b552:	066a      	lsls	r2, r5, #25
 800b554:	d5fb      	bpl.n	800b54e <_printf_i+0x192>
 800b556:	8019      	strh	r1, [r3, #0]
 800b558:	2300      	movs	r3, #0
 800b55a:	6123      	str	r3, [r4, #16]
 800b55c:	4665      	mov	r5, ip
 800b55e:	e7b9      	b.n	800b4d4 <_printf_i+0x118>
 800b560:	6813      	ldr	r3, [r2, #0]
 800b562:	1d19      	adds	r1, r3, #4
 800b564:	6011      	str	r1, [r2, #0]
 800b566:	681d      	ldr	r5, [r3, #0]
 800b568:	6862      	ldr	r2, [r4, #4]
 800b56a:	2100      	movs	r1, #0
 800b56c:	4628      	mov	r0, r5
 800b56e:	f7f4 fe3f 	bl	80001f0 <memchr>
 800b572:	b108      	cbz	r0, 800b578 <_printf_i+0x1bc>
 800b574:	1b40      	subs	r0, r0, r5
 800b576:	6060      	str	r0, [r4, #4]
 800b578:	6863      	ldr	r3, [r4, #4]
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	2300      	movs	r3, #0
 800b57e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b582:	e7a7      	b.n	800b4d4 <_printf_i+0x118>
 800b584:	6923      	ldr	r3, [r4, #16]
 800b586:	462a      	mov	r2, r5
 800b588:	4639      	mov	r1, r7
 800b58a:	4630      	mov	r0, r6
 800b58c:	47c0      	blx	r8
 800b58e:	3001      	adds	r0, #1
 800b590:	d0aa      	beq.n	800b4e8 <_printf_i+0x12c>
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	079b      	lsls	r3, r3, #30
 800b596:	d413      	bmi.n	800b5c0 <_printf_i+0x204>
 800b598:	68e0      	ldr	r0, [r4, #12]
 800b59a:	9b03      	ldr	r3, [sp, #12]
 800b59c:	4298      	cmp	r0, r3
 800b59e:	bfb8      	it	lt
 800b5a0:	4618      	movlt	r0, r3
 800b5a2:	e7a3      	b.n	800b4ec <_printf_i+0x130>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	464a      	mov	r2, r9
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	47c0      	blx	r8
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	d09a      	beq.n	800b4e8 <_printf_i+0x12c>
 800b5b2:	3501      	adds	r5, #1
 800b5b4:	68e3      	ldr	r3, [r4, #12]
 800b5b6:	9a03      	ldr	r2, [sp, #12]
 800b5b8:	1a9b      	subs	r3, r3, r2
 800b5ba:	42ab      	cmp	r3, r5
 800b5bc:	dcf2      	bgt.n	800b5a4 <_printf_i+0x1e8>
 800b5be:	e7eb      	b.n	800b598 <_printf_i+0x1dc>
 800b5c0:	2500      	movs	r5, #0
 800b5c2:	f104 0919 	add.w	r9, r4, #25
 800b5c6:	e7f5      	b.n	800b5b4 <_printf_i+0x1f8>
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1ac      	bne.n	800b526 <_printf_i+0x16a>
 800b5cc:	7803      	ldrb	r3, [r0, #0]
 800b5ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5d6:	e76c      	b.n	800b4b2 <_printf_i+0xf6>
 800b5d8:	0800e99a 	.word	0x0800e99a
 800b5dc:	0800e9ab 	.word	0x0800e9ab

0800b5e0 <_scanf_float>:
 800b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	469a      	mov	sl, r3
 800b5e6:	688b      	ldr	r3, [r1, #8]
 800b5e8:	4616      	mov	r6, r2
 800b5ea:	1e5a      	subs	r2, r3, #1
 800b5ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b5f0:	b087      	sub	sp, #28
 800b5f2:	bf83      	ittte	hi
 800b5f4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b5f8:	189b      	addhi	r3, r3, r2
 800b5fa:	9301      	strhi	r3, [sp, #4]
 800b5fc:	2300      	movls	r3, #0
 800b5fe:	bf86      	itte	hi
 800b600:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b604:	608b      	strhi	r3, [r1, #8]
 800b606:	9301      	strls	r3, [sp, #4]
 800b608:	680b      	ldr	r3, [r1, #0]
 800b60a:	4688      	mov	r8, r1
 800b60c:	f04f 0b00 	mov.w	fp, #0
 800b610:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b614:	f848 3b1c 	str.w	r3, [r8], #28
 800b618:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b61c:	4607      	mov	r7, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	4645      	mov	r5, r8
 800b622:	465a      	mov	r2, fp
 800b624:	46d9      	mov	r9, fp
 800b626:	f8cd b008 	str.w	fp, [sp, #8]
 800b62a:	68a1      	ldr	r1, [r4, #8]
 800b62c:	b181      	cbz	r1, 800b650 <_scanf_float+0x70>
 800b62e:	6833      	ldr	r3, [r6, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	2b49      	cmp	r3, #73	; 0x49
 800b634:	d071      	beq.n	800b71a <_scanf_float+0x13a>
 800b636:	d84d      	bhi.n	800b6d4 <_scanf_float+0xf4>
 800b638:	2b39      	cmp	r3, #57	; 0x39
 800b63a:	d840      	bhi.n	800b6be <_scanf_float+0xde>
 800b63c:	2b31      	cmp	r3, #49	; 0x31
 800b63e:	f080 8088 	bcs.w	800b752 <_scanf_float+0x172>
 800b642:	2b2d      	cmp	r3, #45	; 0x2d
 800b644:	f000 8090 	beq.w	800b768 <_scanf_float+0x188>
 800b648:	d815      	bhi.n	800b676 <_scanf_float+0x96>
 800b64a:	2b2b      	cmp	r3, #43	; 0x2b
 800b64c:	f000 808c 	beq.w	800b768 <_scanf_float+0x188>
 800b650:	f1b9 0f00 	cmp.w	r9, #0
 800b654:	d003      	beq.n	800b65e <_scanf_float+0x7e>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	3a01      	subs	r2, #1
 800b660:	2a01      	cmp	r2, #1
 800b662:	f200 80ea 	bhi.w	800b83a <_scanf_float+0x25a>
 800b666:	4545      	cmp	r5, r8
 800b668:	f200 80dc 	bhi.w	800b824 <_scanf_float+0x244>
 800b66c:	2601      	movs	r6, #1
 800b66e:	4630      	mov	r0, r6
 800b670:	b007      	add	sp, #28
 800b672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b676:	2b2e      	cmp	r3, #46	; 0x2e
 800b678:	f000 809f 	beq.w	800b7ba <_scanf_float+0x1da>
 800b67c:	2b30      	cmp	r3, #48	; 0x30
 800b67e:	d1e7      	bne.n	800b650 <_scanf_float+0x70>
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b686:	d064      	beq.n	800b752 <_scanf_float+0x172>
 800b688:	9b01      	ldr	r3, [sp, #4]
 800b68a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b68e:	6020      	str	r0, [r4, #0]
 800b690:	f109 0901 	add.w	r9, r9, #1
 800b694:	b11b      	cbz	r3, 800b69e <_scanf_float+0xbe>
 800b696:	3b01      	subs	r3, #1
 800b698:	3101      	adds	r1, #1
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	60a1      	str	r1, [r4, #8]
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	60a3      	str	r3, [r4, #8]
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	6873      	ldr	r3, [r6, #4]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	6073      	str	r3, [r6, #4]
 800b6b2:	f340 80ac 	ble.w	800b80e <_scanf_float+0x22e>
 800b6b6:	6833      	ldr	r3, [r6, #0]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	6033      	str	r3, [r6, #0]
 800b6bc:	e7b5      	b.n	800b62a <_scanf_float+0x4a>
 800b6be:	2b45      	cmp	r3, #69	; 0x45
 800b6c0:	f000 8085 	beq.w	800b7ce <_scanf_float+0x1ee>
 800b6c4:	2b46      	cmp	r3, #70	; 0x46
 800b6c6:	d06a      	beq.n	800b79e <_scanf_float+0x1be>
 800b6c8:	2b41      	cmp	r3, #65	; 0x41
 800b6ca:	d1c1      	bne.n	800b650 <_scanf_float+0x70>
 800b6cc:	2a01      	cmp	r2, #1
 800b6ce:	d1bf      	bne.n	800b650 <_scanf_float+0x70>
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	e046      	b.n	800b762 <_scanf_float+0x182>
 800b6d4:	2b65      	cmp	r3, #101	; 0x65
 800b6d6:	d07a      	beq.n	800b7ce <_scanf_float+0x1ee>
 800b6d8:	d818      	bhi.n	800b70c <_scanf_float+0x12c>
 800b6da:	2b54      	cmp	r3, #84	; 0x54
 800b6dc:	d066      	beq.n	800b7ac <_scanf_float+0x1cc>
 800b6de:	d811      	bhi.n	800b704 <_scanf_float+0x124>
 800b6e0:	2b4e      	cmp	r3, #78	; 0x4e
 800b6e2:	d1b5      	bne.n	800b650 <_scanf_float+0x70>
 800b6e4:	2a00      	cmp	r2, #0
 800b6e6:	d146      	bne.n	800b776 <_scanf_float+0x196>
 800b6e8:	f1b9 0f00 	cmp.w	r9, #0
 800b6ec:	d145      	bne.n	800b77a <_scanf_float+0x19a>
 800b6ee:	6821      	ldr	r1, [r4, #0]
 800b6f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b6f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b6f8:	d13f      	bne.n	800b77a <_scanf_float+0x19a>
 800b6fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b6fe:	6021      	str	r1, [r4, #0]
 800b700:	2201      	movs	r2, #1
 800b702:	e02e      	b.n	800b762 <_scanf_float+0x182>
 800b704:	2b59      	cmp	r3, #89	; 0x59
 800b706:	d01e      	beq.n	800b746 <_scanf_float+0x166>
 800b708:	2b61      	cmp	r3, #97	; 0x61
 800b70a:	e7de      	b.n	800b6ca <_scanf_float+0xea>
 800b70c:	2b6e      	cmp	r3, #110	; 0x6e
 800b70e:	d0e9      	beq.n	800b6e4 <_scanf_float+0x104>
 800b710:	d815      	bhi.n	800b73e <_scanf_float+0x15e>
 800b712:	2b66      	cmp	r3, #102	; 0x66
 800b714:	d043      	beq.n	800b79e <_scanf_float+0x1be>
 800b716:	2b69      	cmp	r3, #105	; 0x69
 800b718:	d19a      	bne.n	800b650 <_scanf_float+0x70>
 800b71a:	f1bb 0f00 	cmp.w	fp, #0
 800b71e:	d138      	bne.n	800b792 <_scanf_float+0x1b2>
 800b720:	f1b9 0f00 	cmp.w	r9, #0
 800b724:	d197      	bne.n	800b656 <_scanf_float+0x76>
 800b726:	6821      	ldr	r1, [r4, #0]
 800b728:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b72c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b730:	d195      	bne.n	800b65e <_scanf_float+0x7e>
 800b732:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b736:	6021      	str	r1, [r4, #0]
 800b738:	f04f 0b01 	mov.w	fp, #1
 800b73c:	e011      	b.n	800b762 <_scanf_float+0x182>
 800b73e:	2b74      	cmp	r3, #116	; 0x74
 800b740:	d034      	beq.n	800b7ac <_scanf_float+0x1cc>
 800b742:	2b79      	cmp	r3, #121	; 0x79
 800b744:	d184      	bne.n	800b650 <_scanf_float+0x70>
 800b746:	f1bb 0f07 	cmp.w	fp, #7
 800b74a:	d181      	bne.n	800b650 <_scanf_float+0x70>
 800b74c:	f04f 0b08 	mov.w	fp, #8
 800b750:	e007      	b.n	800b762 <_scanf_float+0x182>
 800b752:	eb12 0f0b 	cmn.w	r2, fp
 800b756:	f47f af7b 	bne.w	800b650 <_scanf_float+0x70>
 800b75a:	6821      	ldr	r1, [r4, #0]
 800b75c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b760:	6021      	str	r1, [r4, #0]
 800b762:	702b      	strb	r3, [r5, #0]
 800b764:	3501      	adds	r5, #1
 800b766:	e79a      	b.n	800b69e <_scanf_float+0xbe>
 800b768:	6821      	ldr	r1, [r4, #0]
 800b76a:	0608      	lsls	r0, r1, #24
 800b76c:	f57f af70 	bpl.w	800b650 <_scanf_float+0x70>
 800b770:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b774:	e7f4      	b.n	800b760 <_scanf_float+0x180>
 800b776:	2a02      	cmp	r2, #2
 800b778:	d047      	beq.n	800b80a <_scanf_float+0x22a>
 800b77a:	f1bb 0f01 	cmp.w	fp, #1
 800b77e:	d003      	beq.n	800b788 <_scanf_float+0x1a8>
 800b780:	f1bb 0f04 	cmp.w	fp, #4
 800b784:	f47f af64 	bne.w	800b650 <_scanf_float+0x70>
 800b788:	f10b 0b01 	add.w	fp, fp, #1
 800b78c:	fa5f fb8b 	uxtb.w	fp, fp
 800b790:	e7e7      	b.n	800b762 <_scanf_float+0x182>
 800b792:	f1bb 0f03 	cmp.w	fp, #3
 800b796:	d0f7      	beq.n	800b788 <_scanf_float+0x1a8>
 800b798:	f1bb 0f05 	cmp.w	fp, #5
 800b79c:	e7f2      	b.n	800b784 <_scanf_float+0x1a4>
 800b79e:	f1bb 0f02 	cmp.w	fp, #2
 800b7a2:	f47f af55 	bne.w	800b650 <_scanf_float+0x70>
 800b7a6:	f04f 0b03 	mov.w	fp, #3
 800b7aa:	e7da      	b.n	800b762 <_scanf_float+0x182>
 800b7ac:	f1bb 0f06 	cmp.w	fp, #6
 800b7b0:	f47f af4e 	bne.w	800b650 <_scanf_float+0x70>
 800b7b4:	f04f 0b07 	mov.w	fp, #7
 800b7b8:	e7d3      	b.n	800b762 <_scanf_float+0x182>
 800b7ba:	6821      	ldr	r1, [r4, #0]
 800b7bc:	0588      	lsls	r0, r1, #22
 800b7be:	f57f af47 	bpl.w	800b650 <_scanf_float+0x70>
 800b7c2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b7c6:	6021      	str	r1, [r4, #0]
 800b7c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b7cc:	e7c9      	b.n	800b762 <_scanf_float+0x182>
 800b7ce:	6821      	ldr	r1, [r4, #0]
 800b7d0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b7d4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b7d8:	d006      	beq.n	800b7e8 <_scanf_float+0x208>
 800b7da:	0548      	lsls	r0, r1, #21
 800b7dc:	f57f af38 	bpl.w	800b650 <_scanf_float+0x70>
 800b7e0:	f1b9 0f00 	cmp.w	r9, #0
 800b7e4:	f43f af3b 	beq.w	800b65e <_scanf_float+0x7e>
 800b7e8:	0588      	lsls	r0, r1, #22
 800b7ea:	bf58      	it	pl
 800b7ec:	9802      	ldrpl	r0, [sp, #8]
 800b7ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b7f2:	bf58      	it	pl
 800b7f4:	eba9 0000 	subpl.w	r0, r9, r0
 800b7f8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b7fc:	bf58      	it	pl
 800b7fe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b802:	6021      	str	r1, [r4, #0]
 800b804:	f04f 0900 	mov.w	r9, #0
 800b808:	e7ab      	b.n	800b762 <_scanf_float+0x182>
 800b80a:	2203      	movs	r2, #3
 800b80c:	e7a9      	b.n	800b762 <_scanf_float+0x182>
 800b80e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b812:	9205      	str	r2, [sp, #20]
 800b814:	4631      	mov	r1, r6
 800b816:	4638      	mov	r0, r7
 800b818:	4798      	blx	r3
 800b81a:	9a05      	ldr	r2, [sp, #20]
 800b81c:	2800      	cmp	r0, #0
 800b81e:	f43f af04 	beq.w	800b62a <_scanf_float+0x4a>
 800b822:	e715      	b.n	800b650 <_scanf_float+0x70>
 800b824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b828:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b82c:	4632      	mov	r2, r6
 800b82e:	4638      	mov	r0, r7
 800b830:	4798      	blx	r3
 800b832:	6923      	ldr	r3, [r4, #16]
 800b834:	3b01      	subs	r3, #1
 800b836:	6123      	str	r3, [r4, #16]
 800b838:	e715      	b.n	800b666 <_scanf_float+0x86>
 800b83a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b83e:	2b06      	cmp	r3, #6
 800b840:	d80a      	bhi.n	800b858 <_scanf_float+0x278>
 800b842:	f1bb 0f02 	cmp.w	fp, #2
 800b846:	d968      	bls.n	800b91a <_scanf_float+0x33a>
 800b848:	f1ab 0b03 	sub.w	fp, fp, #3
 800b84c:	fa5f fb8b 	uxtb.w	fp, fp
 800b850:	eba5 0b0b 	sub.w	fp, r5, fp
 800b854:	455d      	cmp	r5, fp
 800b856:	d14b      	bne.n	800b8f0 <_scanf_float+0x310>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	05da      	lsls	r2, r3, #23
 800b85c:	d51f      	bpl.n	800b89e <_scanf_float+0x2be>
 800b85e:	055b      	lsls	r3, r3, #21
 800b860:	d468      	bmi.n	800b934 <_scanf_float+0x354>
 800b862:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b866:	6923      	ldr	r3, [r4, #16]
 800b868:	2965      	cmp	r1, #101	; 0x65
 800b86a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b86e:	f105 3bff 	add.w	fp, r5, #4294967295
 800b872:	6123      	str	r3, [r4, #16]
 800b874:	d00d      	beq.n	800b892 <_scanf_float+0x2b2>
 800b876:	2945      	cmp	r1, #69	; 0x45
 800b878:	d00b      	beq.n	800b892 <_scanf_float+0x2b2>
 800b87a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b87e:	4632      	mov	r2, r6
 800b880:	4638      	mov	r0, r7
 800b882:	4798      	blx	r3
 800b884:	6923      	ldr	r3, [r4, #16]
 800b886:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b88a:	3b01      	subs	r3, #1
 800b88c:	f1a5 0b02 	sub.w	fp, r5, #2
 800b890:	6123      	str	r3, [r4, #16]
 800b892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b896:	4632      	mov	r2, r6
 800b898:	4638      	mov	r0, r7
 800b89a:	4798      	blx	r3
 800b89c:	465d      	mov	r5, fp
 800b89e:	6826      	ldr	r6, [r4, #0]
 800b8a0:	f016 0610 	ands.w	r6, r6, #16
 800b8a4:	d17a      	bne.n	800b99c <_scanf_float+0x3bc>
 800b8a6:	702e      	strb	r6, [r5, #0]
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b8ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8b2:	d142      	bne.n	800b93a <_scanf_float+0x35a>
 800b8b4:	9b02      	ldr	r3, [sp, #8]
 800b8b6:	eba9 0303 	sub.w	r3, r9, r3
 800b8ba:	425a      	negs	r2, r3
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d149      	bne.n	800b954 <_scanf_float+0x374>
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4641      	mov	r1, r8
 800b8c4:	4638      	mov	r0, r7
 800b8c6:	f000 feb3 	bl	800c630 <_strtod_r>
 800b8ca:	6825      	ldr	r5, [r4, #0]
 800b8cc:	f8da 3000 	ldr.w	r3, [sl]
 800b8d0:	f015 0f02 	tst.w	r5, #2
 800b8d4:	f103 0204 	add.w	r2, r3, #4
 800b8d8:	ec59 8b10 	vmov	r8, r9, d0
 800b8dc:	f8ca 2000 	str.w	r2, [sl]
 800b8e0:	d043      	beq.n	800b96a <_scanf_float+0x38a>
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	e9c3 8900 	strd	r8, r9, [r3]
 800b8e8:	68e3      	ldr	r3, [r4, #12]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	60e3      	str	r3, [r4, #12]
 800b8ee:	e6be      	b.n	800b66e <_scanf_float+0x8e>
 800b8f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b8f8:	4632      	mov	r2, r6
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	4798      	blx	r3
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	3b01      	subs	r3, #1
 800b902:	6123      	str	r3, [r4, #16]
 800b904:	e7a6      	b.n	800b854 <_scanf_float+0x274>
 800b906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b90a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b90e:	4632      	mov	r2, r6
 800b910:	4638      	mov	r0, r7
 800b912:	4798      	blx	r3
 800b914:	6923      	ldr	r3, [r4, #16]
 800b916:	3b01      	subs	r3, #1
 800b918:	6123      	str	r3, [r4, #16]
 800b91a:	4545      	cmp	r5, r8
 800b91c:	d8f3      	bhi.n	800b906 <_scanf_float+0x326>
 800b91e:	e6a5      	b.n	800b66c <_scanf_float+0x8c>
 800b920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b924:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b928:	4632      	mov	r2, r6
 800b92a:	4638      	mov	r0, r7
 800b92c:	4798      	blx	r3
 800b92e:	6923      	ldr	r3, [r4, #16]
 800b930:	3b01      	subs	r3, #1
 800b932:	6123      	str	r3, [r4, #16]
 800b934:	4545      	cmp	r5, r8
 800b936:	d8f3      	bhi.n	800b920 <_scanf_float+0x340>
 800b938:	e698      	b.n	800b66c <_scanf_float+0x8c>
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d0bf      	beq.n	800b8c0 <_scanf_float+0x2e0>
 800b940:	9904      	ldr	r1, [sp, #16]
 800b942:	230a      	movs	r3, #10
 800b944:	4632      	mov	r2, r6
 800b946:	3101      	adds	r1, #1
 800b948:	4638      	mov	r0, r7
 800b94a:	f000 fefd 	bl	800c748 <_strtol_r>
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	9d04      	ldr	r5, [sp, #16]
 800b952:	1ac2      	subs	r2, r0, r3
 800b954:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b958:	429d      	cmp	r5, r3
 800b95a:	bf28      	it	cs
 800b95c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b960:	490f      	ldr	r1, [pc, #60]	; (800b9a0 <_scanf_float+0x3c0>)
 800b962:	4628      	mov	r0, r5
 800b964:	f000 f834 	bl	800b9d0 <siprintf>
 800b968:	e7aa      	b.n	800b8c0 <_scanf_float+0x2e0>
 800b96a:	f015 0504 	ands.w	r5, r5, #4
 800b96e:	d1b8      	bne.n	800b8e2 <_scanf_float+0x302>
 800b970:	681f      	ldr	r7, [r3, #0]
 800b972:	ee10 2a10 	vmov	r2, s0
 800b976:	464b      	mov	r3, r9
 800b978:	ee10 0a10 	vmov	r0, s0
 800b97c:	4649      	mov	r1, r9
 800b97e:	f7f5 f8dd 	bl	8000b3c <__aeabi_dcmpun>
 800b982:	b128      	cbz	r0, 800b990 <_scanf_float+0x3b0>
 800b984:	4628      	mov	r0, r5
 800b986:	f000 f81d 	bl	800b9c4 <nanf>
 800b98a:	ed87 0a00 	vstr	s0, [r7]
 800b98e:	e7ab      	b.n	800b8e8 <_scanf_float+0x308>
 800b990:	4640      	mov	r0, r8
 800b992:	4649      	mov	r1, r9
 800b994:	f7f5 f930 	bl	8000bf8 <__aeabi_d2f>
 800b998:	6038      	str	r0, [r7, #0]
 800b99a:	e7a5      	b.n	800b8e8 <_scanf_float+0x308>
 800b99c:	2600      	movs	r6, #0
 800b99e:	e666      	b.n	800b66e <_scanf_float+0x8e>
 800b9a0:	0800e9bc 	.word	0x0800e9bc

0800b9a4 <_sbrk_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4c06      	ldr	r4, [pc, #24]	; (800b9c0 <_sbrk_r+0x1c>)
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4605      	mov	r5, r0
 800b9ac:	4608      	mov	r0, r1
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	f7f6 f95c 	bl	8001c6c <_sbrk>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_sbrk_r+0x1a>
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_sbrk_r+0x1a>
 800b9bc:	602b      	str	r3, [r5, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	20001ebc 	.word	0x20001ebc

0800b9c4 <nanf>:
 800b9c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b9cc <nanf+0x8>
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	7fc00000 	.word	0x7fc00000

0800b9d0 <siprintf>:
 800b9d0:	b40e      	push	{r1, r2, r3}
 800b9d2:	b500      	push	{lr}
 800b9d4:	b09c      	sub	sp, #112	; 0x70
 800b9d6:	ab1d      	add	r3, sp, #116	; 0x74
 800b9d8:	9002      	str	r0, [sp, #8]
 800b9da:	9006      	str	r0, [sp, #24]
 800b9dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9e0:	4809      	ldr	r0, [pc, #36]	; (800ba08 <siprintf+0x38>)
 800b9e2:	9107      	str	r1, [sp, #28]
 800b9e4:	9104      	str	r1, [sp, #16]
 800b9e6:	4909      	ldr	r1, [pc, #36]	; (800ba0c <siprintf+0x3c>)
 800b9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ec:	9105      	str	r1, [sp, #20]
 800b9ee:	6800      	ldr	r0, [r0, #0]
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	a902      	add	r1, sp, #8
 800b9f4:	f002 fcc0 	bl	800e378 <_svfiprintf_r>
 800b9f8:	9b02      	ldr	r3, [sp, #8]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	701a      	strb	r2, [r3, #0]
 800b9fe:	b01c      	add	sp, #112	; 0x70
 800ba00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba04:	b003      	add	sp, #12
 800ba06:	4770      	bx	lr
 800ba08:	200001f0 	.word	0x200001f0
 800ba0c:	ffff0208 	.word	0xffff0208

0800ba10 <sulp>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	4604      	mov	r4, r0
 800ba14:	460d      	mov	r5, r1
 800ba16:	ec45 4b10 	vmov	d0, r4, r5
 800ba1a:	4616      	mov	r6, r2
 800ba1c:	f002 fb10 	bl	800e040 <__ulp>
 800ba20:	ec51 0b10 	vmov	r0, r1, d0
 800ba24:	b17e      	cbz	r6, 800ba46 <sulp+0x36>
 800ba26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	dd09      	ble.n	800ba46 <sulp+0x36>
 800ba32:	051b      	lsls	r3, r3, #20
 800ba34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ba38:	2400      	movs	r4, #0
 800ba3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ba3e:	4622      	mov	r2, r4
 800ba40:	462b      	mov	r3, r5
 800ba42:	f7f4 fde1 	bl	8000608 <__aeabi_dmul>
 800ba46:	bd70      	pop	{r4, r5, r6, pc}

0800ba48 <_strtod_l>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	461f      	mov	r7, r3
 800ba4e:	b0a1      	sub	sp, #132	; 0x84
 800ba50:	2300      	movs	r3, #0
 800ba52:	4681      	mov	r9, r0
 800ba54:	4638      	mov	r0, r7
 800ba56:	460e      	mov	r6, r1
 800ba58:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba5a:	931c      	str	r3, [sp, #112]	; 0x70
 800ba5c:	f001 fff5 	bl	800da4a <__localeconv_l>
 800ba60:	4680      	mov	r8, r0
 800ba62:	6800      	ldr	r0, [r0, #0]
 800ba64:	f7f4 fbbc 	bl	80001e0 <strlen>
 800ba68:	f04f 0a00 	mov.w	sl, #0
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	f04f 0b00 	mov.w	fp, #0
 800ba72:	961b      	str	r6, [sp, #108]	; 0x6c
 800ba74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba76:	781a      	ldrb	r2, [r3, #0]
 800ba78:	2a0d      	cmp	r2, #13
 800ba7a:	d832      	bhi.n	800bae2 <_strtod_l+0x9a>
 800ba7c:	2a09      	cmp	r2, #9
 800ba7e:	d236      	bcs.n	800baee <_strtod_l+0xa6>
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	d03e      	beq.n	800bb02 <_strtod_l+0xba>
 800ba84:	2300      	movs	r3, #0
 800ba86:	930d      	str	r3, [sp, #52]	; 0x34
 800ba88:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ba8a:	782b      	ldrb	r3, [r5, #0]
 800ba8c:	2b30      	cmp	r3, #48	; 0x30
 800ba8e:	f040 80ac 	bne.w	800bbea <_strtod_l+0x1a2>
 800ba92:	786b      	ldrb	r3, [r5, #1]
 800ba94:	2b58      	cmp	r3, #88	; 0x58
 800ba96:	d001      	beq.n	800ba9c <_strtod_l+0x54>
 800ba98:	2b78      	cmp	r3, #120	; 0x78
 800ba9a:	d167      	bne.n	800bb6c <_strtod_l+0x124>
 800ba9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba9e:	9301      	str	r3, [sp, #4]
 800baa0:	ab1c      	add	r3, sp, #112	; 0x70
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	9702      	str	r7, [sp, #8]
 800baa6:	ab1d      	add	r3, sp, #116	; 0x74
 800baa8:	4a88      	ldr	r2, [pc, #544]	; (800bccc <_strtod_l+0x284>)
 800baaa:	a91b      	add	r1, sp, #108	; 0x6c
 800baac:	4648      	mov	r0, r9
 800baae:	f001 fcf2 	bl	800d496 <__gethex>
 800bab2:	f010 0407 	ands.w	r4, r0, #7
 800bab6:	4606      	mov	r6, r0
 800bab8:	d005      	beq.n	800bac6 <_strtod_l+0x7e>
 800baba:	2c06      	cmp	r4, #6
 800babc:	d12b      	bne.n	800bb16 <_strtod_l+0xce>
 800babe:	3501      	adds	r5, #1
 800bac0:	2300      	movs	r3, #0
 800bac2:	951b      	str	r5, [sp, #108]	; 0x6c
 800bac4:	930d      	str	r3, [sp, #52]	; 0x34
 800bac6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f040 859a 	bne.w	800c602 <_strtod_l+0xbba>
 800bace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bad0:	b1e3      	cbz	r3, 800bb0c <_strtod_l+0xc4>
 800bad2:	4652      	mov	r2, sl
 800bad4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bad8:	ec43 2b10 	vmov	d0, r2, r3
 800badc:	b021      	add	sp, #132	; 0x84
 800bade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae2:	2a2b      	cmp	r2, #43	; 0x2b
 800bae4:	d015      	beq.n	800bb12 <_strtod_l+0xca>
 800bae6:	2a2d      	cmp	r2, #45	; 0x2d
 800bae8:	d004      	beq.n	800baf4 <_strtod_l+0xac>
 800baea:	2a20      	cmp	r2, #32
 800baec:	d1ca      	bne.n	800ba84 <_strtod_l+0x3c>
 800baee:	3301      	adds	r3, #1
 800baf0:	931b      	str	r3, [sp, #108]	; 0x6c
 800baf2:	e7bf      	b.n	800ba74 <_strtod_l+0x2c>
 800baf4:	2201      	movs	r2, #1
 800baf6:	920d      	str	r2, [sp, #52]	; 0x34
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	921b      	str	r2, [sp, #108]	; 0x6c
 800bafc:	785b      	ldrb	r3, [r3, #1]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1c2      	bne.n	800ba88 <_strtod_l+0x40>
 800bb02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb04:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f040 8579 	bne.w	800c5fe <_strtod_l+0xbb6>
 800bb0c:	4652      	mov	r2, sl
 800bb0e:	465b      	mov	r3, fp
 800bb10:	e7e2      	b.n	800bad8 <_strtod_l+0x90>
 800bb12:	2200      	movs	r2, #0
 800bb14:	e7ef      	b.n	800baf6 <_strtod_l+0xae>
 800bb16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bb18:	b13a      	cbz	r2, 800bb2a <_strtod_l+0xe2>
 800bb1a:	2135      	movs	r1, #53	; 0x35
 800bb1c:	a81e      	add	r0, sp, #120	; 0x78
 800bb1e:	f002 fb87 	bl	800e230 <__copybits>
 800bb22:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb24:	4648      	mov	r0, r9
 800bb26:	f001 fff4 	bl	800db12 <_Bfree>
 800bb2a:	3c01      	subs	r4, #1
 800bb2c:	2c04      	cmp	r4, #4
 800bb2e:	d806      	bhi.n	800bb3e <_strtod_l+0xf6>
 800bb30:	e8df f004 	tbb	[pc, r4]
 800bb34:	1714030a 	.word	0x1714030a
 800bb38:	0a          	.byte	0x0a
 800bb39:	00          	.byte	0x00
 800bb3a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bb3e:	0730      	lsls	r0, r6, #28
 800bb40:	d5c1      	bpl.n	800bac6 <_strtod_l+0x7e>
 800bb42:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bb46:	e7be      	b.n	800bac6 <_strtod_l+0x7e>
 800bb48:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bb4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bb4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb52:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb56:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bb5a:	e7f0      	b.n	800bb3e <_strtod_l+0xf6>
 800bb5c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bcd0 <_strtod_l+0x288>
 800bb60:	e7ed      	b.n	800bb3e <_strtod_l+0xf6>
 800bb62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bb66:	f04f 3aff 	mov.w	sl, #4294967295
 800bb6a:	e7e8      	b.n	800bb3e <_strtod_l+0xf6>
 800bb6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb72:	785b      	ldrb	r3, [r3, #1]
 800bb74:	2b30      	cmp	r3, #48	; 0x30
 800bb76:	d0f9      	beq.n	800bb6c <_strtod_l+0x124>
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d0a4      	beq.n	800bac6 <_strtod_l+0x7e>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	2500      	movs	r5, #0
 800bb80:	9306      	str	r3, [sp, #24]
 800bb82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb84:	9308      	str	r3, [sp, #32]
 800bb86:	9507      	str	r5, [sp, #28]
 800bb88:	9505      	str	r5, [sp, #20]
 800bb8a:	220a      	movs	r2, #10
 800bb8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bb8e:	7807      	ldrb	r7, [r0, #0]
 800bb90:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bb94:	b2d9      	uxtb	r1, r3
 800bb96:	2909      	cmp	r1, #9
 800bb98:	d929      	bls.n	800bbee <_strtod_l+0x1a6>
 800bb9a:	4622      	mov	r2, r4
 800bb9c:	f8d8 1000 	ldr.w	r1, [r8]
 800bba0:	f002 fce2 	bl	800e568 <strncmp>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d031      	beq.n	800bc0c <_strtod_l+0x1c4>
 800bba8:	2000      	movs	r0, #0
 800bbaa:	9c05      	ldr	r4, [sp, #20]
 800bbac:	9004      	str	r0, [sp, #16]
 800bbae:	463b      	mov	r3, r7
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	2b65      	cmp	r3, #101	; 0x65
 800bbb4:	d001      	beq.n	800bbba <_strtod_l+0x172>
 800bbb6:	2b45      	cmp	r3, #69	; 0x45
 800bbb8:	d114      	bne.n	800bbe4 <_strtod_l+0x19c>
 800bbba:	b924      	cbnz	r4, 800bbc6 <_strtod_l+0x17e>
 800bbbc:	b910      	cbnz	r0, 800bbc4 <_strtod_l+0x17c>
 800bbbe:	9b06      	ldr	r3, [sp, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d09e      	beq.n	800bb02 <_strtod_l+0xba>
 800bbc4:	2400      	movs	r4, #0
 800bbc6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bbc8:	1c73      	adds	r3, r6, #1
 800bbca:	931b      	str	r3, [sp, #108]	; 0x6c
 800bbcc:	7873      	ldrb	r3, [r6, #1]
 800bbce:	2b2b      	cmp	r3, #43	; 0x2b
 800bbd0:	d078      	beq.n	800bcc4 <_strtod_l+0x27c>
 800bbd2:	2b2d      	cmp	r3, #45	; 0x2d
 800bbd4:	d070      	beq.n	800bcb8 <_strtod_l+0x270>
 800bbd6:	f04f 0c00 	mov.w	ip, #0
 800bbda:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bbde:	2f09      	cmp	r7, #9
 800bbe0:	d97c      	bls.n	800bcdc <_strtod_l+0x294>
 800bbe2:	961b      	str	r6, [sp, #108]	; 0x6c
 800bbe4:	f04f 0e00 	mov.w	lr, #0
 800bbe8:	e09a      	b.n	800bd20 <_strtod_l+0x2d8>
 800bbea:	2300      	movs	r3, #0
 800bbec:	e7c7      	b.n	800bb7e <_strtod_l+0x136>
 800bbee:	9905      	ldr	r1, [sp, #20]
 800bbf0:	2908      	cmp	r1, #8
 800bbf2:	bfdd      	ittte	le
 800bbf4:	9907      	ldrle	r1, [sp, #28]
 800bbf6:	fb02 3301 	mlale	r3, r2, r1, r3
 800bbfa:	9307      	strle	r3, [sp, #28]
 800bbfc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bc00:	9b05      	ldr	r3, [sp, #20]
 800bc02:	3001      	adds	r0, #1
 800bc04:	3301      	adds	r3, #1
 800bc06:	9305      	str	r3, [sp, #20]
 800bc08:	901b      	str	r0, [sp, #108]	; 0x6c
 800bc0a:	e7bf      	b.n	800bb8c <_strtod_l+0x144>
 800bc0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc0e:	191a      	adds	r2, r3, r4
 800bc10:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc12:	9a05      	ldr	r2, [sp, #20]
 800bc14:	5d1b      	ldrb	r3, [r3, r4]
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	d037      	beq.n	800bc8a <_strtod_l+0x242>
 800bc1a:	9c05      	ldr	r4, [sp, #20]
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bc22:	2909      	cmp	r1, #9
 800bc24:	d913      	bls.n	800bc4e <_strtod_l+0x206>
 800bc26:	2101      	movs	r1, #1
 800bc28:	9104      	str	r1, [sp, #16]
 800bc2a:	e7c2      	b.n	800bbb2 <_strtod_l+0x16a>
 800bc2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc2e:	1c5a      	adds	r2, r3, #1
 800bc30:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc32:	785b      	ldrb	r3, [r3, #1]
 800bc34:	3001      	adds	r0, #1
 800bc36:	2b30      	cmp	r3, #48	; 0x30
 800bc38:	d0f8      	beq.n	800bc2c <_strtod_l+0x1e4>
 800bc3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bc3e:	2a08      	cmp	r2, #8
 800bc40:	f200 84e4 	bhi.w	800c60c <_strtod_l+0xbc4>
 800bc44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bc46:	9208      	str	r2, [sp, #32]
 800bc48:	4602      	mov	r2, r0
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bc52:	f100 0101 	add.w	r1, r0, #1
 800bc56:	d012      	beq.n	800bc7e <_strtod_l+0x236>
 800bc58:	440a      	add	r2, r1
 800bc5a:	eb00 0c04 	add.w	ip, r0, r4
 800bc5e:	4621      	mov	r1, r4
 800bc60:	270a      	movs	r7, #10
 800bc62:	458c      	cmp	ip, r1
 800bc64:	d113      	bne.n	800bc8e <_strtod_l+0x246>
 800bc66:	1821      	adds	r1, r4, r0
 800bc68:	2908      	cmp	r1, #8
 800bc6a:	f104 0401 	add.w	r4, r4, #1
 800bc6e:	4404      	add	r4, r0
 800bc70:	dc19      	bgt.n	800bca6 <_strtod_l+0x25e>
 800bc72:	9b07      	ldr	r3, [sp, #28]
 800bc74:	210a      	movs	r1, #10
 800bc76:	fb01 e303 	mla	r3, r1, r3, lr
 800bc7a:	9307      	str	r3, [sp, #28]
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc80:	1c58      	adds	r0, r3, #1
 800bc82:	901b      	str	r0, [sp, #108]	; 0x6c
 800bc84:	785b      	ldrb	r3, [r3, #1]
 800bc86:	4608      	mov	r0, r1
 800bc88:	e7c9      	b.n	800bc1e <_strtod_l+0x1d6>
 800bc8a:	9805      	ldr	r0, [sp, #20]
 800bc8c:	e7d3      	b.n	800bc36 <_strtod_l+0x1ee>
 800bc8e:	2908      	cmp	r1, #8
 800bc90:	f101 0101 	add.w	r1, r1, #1
 800bc94:	dc03      	bgt.n	800bc9e <_strtod_l+0x256>
 800bc96:	9b07      	ldr	r3, [sp, #28]
 800bc98:	437b      	muls	r3, r7
 800bc9a:	9307      	str	r3, [sp, #28]
 800bc9c:	e7e1      	b.n	800bc62 <_strtod_l+0x21a>
 800bc9e:	2910      	cmp	r1, #16
 800bca0:	bfd8      	it	le
 800bca2:	437d      	mulle	r5, r7
 800bca4:	e7dd      	b.n	800bc62 <_strtod_l+0x21a>
 800bca6:	2c10      	cmp	r4, #16
 800bca8:	bfdc      	itt	le
 800bcaa:	210a      	movle	r1, #10
 800bcac:	fb01 e505 	mlale	r5, r1, r5, lr
 800bcb0:	e7e4      	b.n	800bc7c <_strtod_l+0x234>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	9304      	str	r3, [sp, #16]
 800bcb6:	e781      	b.n	800bbbc <_strtod_l+0x174>
 800bcb8:	f04f 0c01 	mov.w	ip, #1
 800bcbc:	1cb3      	adds	r3, r6, #2
 800bcbe:	931b      	str	r3, [sp, #108]	; 0x6c
 800bcc0:	78b3      	ldrb	r3, [r6, #2]
 800bcc2:	e78a      	b.n	800bbda <_strtod_l+0x192>
 800bcc4:	f04f 0c00 	mov.w	ip, #0
 800bcc8:	e7f8      	b.n	800bcbc <_strtod_l+0x274>
 800bcca:	bf00      	nop
 800bccc:	0800e9c4 	.word	0x0800e9c4
 800bcd0:	7ff00000 	.word	0x7ff00000
 800bcd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcd6:	1c5f      	adds	r7, r3, #1
 800bcd8:	971b      	str	r7, [sp, #108]	; 0x6c
 800bcda:	785b      	ldrb	r3, [r3, #1]
 800bcdc:	2b30      	cmp	r3, #48	; 0x30
 800bcde:	d0f9      	beq.n	800bcd4 <_strtod_l+0x28c>
 800bce0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bce4:	2f08      	cmp	r7, #8
 800bce6:	f63f af7d 	bhi.w	800bbe4 <_strtod_l+0x19c>
 800bcea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bcee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcf0:	930a      	str	r3, [sp, #40]	; 0x28
 800bcf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcf4:	1c5f      	adds	r7, r3, #1
 800bcf6:	971b      	str	r7, [sp, #108]	; 0x6c
 800bcf8:	785b      	ldrb	r3, [r3, #1]
 800bcfa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bcfe:	f1b8 0f09 	cmp.w	r8, #9
 800bd02:	d937      	bls.n	800bd74 <_strtod_l+0x32c>
 800bd04:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd06:	1a7f      	subs	r7, r7, r1
 800bd08:	2f08      	cmp	r7, #8
 800bd0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bd0e:	dc37      	bgt.n	800bd80 <_strtod_l+0x338>
 800bd10:	45be      	cmp	lr, r7
 800bd12:	bfa8      	it	ge
 800bd14:	46be      	movge	lr, r7
 800bd16:	f1bc 0f00 	cmp.w	ip, #0
 800bd1a:	d001      	beq.n	800bd20 <_strtod_l+0x2d8>
 800bd1c:	f1ce 0e00 	rsb	lr, lr, #0
 800bd20:	2c00      	cmp	r4, #0
 800bd22:	d151      	bne.n	800bdc8 <_strtod_l+0x380>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	f47f aece 	bne.w	800bac6 <_strtod_l+0x7e>
 800bd2a:	9a06      	ldr	r2, [sp, #24]
 800bd2c:	2a00      	cmp	r2, #0
 800bd2e:	f47f aeca 	bne.w	800bac6 <_strtod_l+0x7e>
 800bd32:	9a04      	ldr	r2, [sp, #16]
 800bd34:	2a00      	cmp	r2, #0
 800bd36:	f47f aee4 	bne.w	800bb02 <_strtod_l+0xba>
 800bd3a:	2b4e      	cmp	r3, #78	; 0x4e
 800bd3c:	d027      	beq.n	800bd8e <_strtod_l+0x346>
 800bd3e:	dc21      	bgt.n	800bd84 <_strtod_l+0x33c>
 800bd40:	2b49      	cmp	r3, #73	; 0x49
 800bd42:	f47f aede 	bne.w	800bb02 <_strtod_l+0xba>
 800bd46:	49a0      	ldr	r1, [pc, #640]	; (800bfc8 <_strtod_l+0x580>)
 800bd48:	a81b      	add	r0, sp, #108	; 0x6c
 800bd4a:	f001 fdd7 	bl	800d8fc <__match>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	f43f aed7 	beq.w	800bb02 <_strtod_l+0xba>
 800bd54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd56:	499d      	ldr	r1, [pc, #628]	; (800bfcc <_strtod_l+0x584>)
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	a81b      	add	r0, sp, #108	; 0x6c
 800bd5c:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd5e:	f001 fdcd 	bl	800d8fc <__match>
 800bd62:	b910      	cbnz	r0, 800bd6a <_strtod_l+0x322>
 800bd64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd66:	3301      	adds	r3, #1
 800bd68:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd6a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800bfe0 <_strtod_l+0x598>
 800bd6e:	f04f 0a00 	mov.w	sl, #0
 800bd72:	e6a8      	b.n	800bac6 <_strtod_l+0x7e>
 800bd74:	210a      	movs	r1, #10
 800bd76:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bd7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bd7e:	e7b8      	b.n	800bcf2 <_strtod_l+0x2aa>
 800bd80:	46be      	mov	lr, r7
 800bd82:	e7c8      	b.n	800bd16 <_strtod_l+0x2ce>
 800bd84:	2b69      	cmp	r3, #105	; 0x69
 800bd86:	d0de      	beq.n	800bd46 <_strtod_l+0x2fe>
 800bd88:	2b6e      	cmp	r3, #110	; 0x6e
 800bd8a:	f47f aeba 	bne.w	800bb02 <_strtod_l+0xba>
 800bd8e:	4990      	ldr	r1, [pc, #576]	; (800bfd0 <_strtod_l+0x588>)
 800bd90:	a81b      	add	r0, sp, #108	; 0x6c
 800bd92:	f001 fdb3 	bl	800d8fc <__match>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	f43f aeb3 	beq.w	800bb02 <_strtod_l+0xba>
 800bd9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b28      	cmp	r3, #40	; 0x28
 800bda2:	d10e      	bne.n	800bdc2 <_strtod_l+0x37a>
 800bda4:	aa1e      	add	r2, sp, #120	; 0x78
 800bda6:	498b      	ldr	r1, [pc, #556]	; (800bfd4 <_strtod_l+0x58c>)
 800bda8:	a81b      	add	r0, sp, #108	; 0x6c
 800bdaa:	f001 fdbb 	bl	800d924 <__hexnan>
 800bdae:	2805      	cmp	r0, #5
 800bdb0:	d107      	bne.n	800bdc2 <_strtod_l+0x37a>
 800bdb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bdb4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800bdb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bdbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bdc0:	e681      	b.n	800bac6 <_strtod_l+0x7e>
 800bdc2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800bfe8 <_strtod_l+0x5a0>
 800bdc6:	e7d2      	b.n	800bd6e <_strtod_l+0x326>
 800bdc8:	ebae 0302 	sub.w	r3, lr, r2
 800bdcc:	9306      	str	r3, [sp, #24]
 800bdce:	9b05      	ldr	r3, [sp, #20]
 800bdd0:	9807      	ldr	r0, [sp, #28]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	bf08      	it	eq
 800bdd6:	4623      	moveq	r3, r4
 800bdd8:	2c10      	cmp	r4, #16
 800bdda:	9305      	str	r3, [sp, #20]
 800bddc:	46a0      	mov	r8, r4
 800bdde:	bfa8      	it	ge
 800bde0:	f04f 0810 	movge.w	r8, #16
 800bde4:	f7f4 fb96 	bl	8000514 <__aeabi_ui2d>
 800bde8:	2c09      	cmp	r4, #9
 800bdea:	4682      	mov	sl, r0
 800bdec:	468b      	mov	fp, r1
 800bdee:	dc13      	bgt.n	800be18 <_strtod_l+0x3d0>
 800bdf0:	9b06      	ldr	r3, [sp, #24]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f43f ae67 	beq.w	800bac6 <_strtod_l+0x7e>
 800bdf8:	9b06      	ldr	r3, [sp, #24]
 800bdfa:	dd7a      	ble.n	800bef2 <_strtod_l+0x4aa>
 800bdfc:	2b16      	cmp	r3, #22
 800bdfe:	dc61      	bgt.n	800bec4 <_strtod_l+0x47c>
 800be00:	4a75      	ldr	r2, [pc, #468]	; (800bfd8 <_strtod_l+0x590>)
 800be02:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800be06:	e9de 0100 	ldrd	r0, r1, [lr]
 800be0a:	4652      	mov	r2, sl
 800be0c:	465b      	mov	r3, fp
 800be0e:	f7f4 fbfb 	bl	8000608 <__aeabi_dmul>
 800be12:	4682      	mov	sl, r0
 800be14:	468b      	mov	fp, r1
 800be16:	e656      	b.n	800bac6 <_strtod_l+0x7e>
 800be18:	4b6f      	ldr	r3, [pc, #444]	; (800bfd8 <_strtod_l+0x590>)
 800be1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800be22:	f7f4 fbf1 	bl	8000608 <__aeabi_dmul>
 800be26:	4606      	mov	r6, r0
 800be28:	4628      	mov	r0, r5
 800be2a:	460f      	mov	r7, r1
 800be2c:	f7f4 fb72 	bl	8000514 <__aeabi_ui2d>
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	4630      	mov	r0, r6
 800be36:	4639      	mov	r1, r7
 800be38:	f7f4 fa30 	bl	800029c <__adddf3>
 800be3c:	2c0f      	cmp	r4, #15
 800be3e:	4682      	mov	sl, r0
 800be40:	468b      	mov	fp, r1
 800be42:	ddd5      	ble.n	800bdf0 <_strtod_l+0x3a8>
 800be44:	9b06      	ldr	r3, [sp, #24]
 800be46:	eba4 0808 	sub.w	r8, r4, r8
 800be4a:	4498      	add	r8, r3
 800be4c:	f1b8 0f00 	cmp.w	r8, #0
 800be50:	f340 8096 	ble.w	800bf80 <_strtod_l+0x538>
 800be54:	f018 030f 	ands.w	r3, r8, #15
 800be58:	d00a      	beq.n	800be70 <_strtod_l+0x428>
 800be5a:	495f      	ldr	r1, [pc, #380]	; (800bfd8 <_strtod_l+0x590>)
 800be5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be60:	4652      	mov	r2, sl
 800be62:	465b      	mov	r3, fp
 800be64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be68:	f7f4 fbce 	bl	8000608 <__aeabi_dmul>
 800be6c:	4682      	mov	sl, r0
 800be6e:	468b      	mov	fp, r1
 800be70:	f038 080f 	bics.w	r8, r8, #15
 800be74:	d073      	beq.n	800bf5e <_strtod_l+0x516>
 800be76:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800be7a:	dd47      	ble.n	800bf0c <_strtod_l+0x4c4>
 800be7c:	2400      	movs	r4, #0
 800be7e:	46a0      	mov	r8, r4
 800be80:	9407      	str	r4, [sp, #28]
 800be82:	9405      	str	r4, [sp, #20]
 800be84:	2322      	movs	r3, #34	; 0x22
 800be86:	f8df b158 	ldr.w	fp, [pc, #344]	; 800bfe0 <_strtod_l+0x598>
 800be8a:	f8c9 3000 	str.w	r3, [r9]
 800be8e:	f04f 0a00 	mov.w	sl, #0
 800be92:	9b07      	ldr	r3, [sp, #28]
 800be94:	2b00      	cmp	r3, #0
 800be96:	f43f ae16 	beq.w	800bac6 <_strtod_l+0x7e>
 800be9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800be9c:	4648      	mov	r0, r9
 800be9e:	f001 fe38 	bl	800db12 <_Bfree>
 800bea2:	9905      	ldr	r1, [sp, #20]
 800bea4:	4648      	mov	r0, r9
 800bea6:	f001 fe34 	bl	800db12 <_Bfree>
 800beaa:	4641      	mov	r1, r8
 800beac:	4648      	mov	r0, r9
 800beae:	f001 fe30 	bl	800db12 <_Bfree>
 800beb2:	9907      	ldr	r1, [sp, #28]
 800beb4:	4648      	mov	r0, r9
 800beb6:	f001 fe2c 	bl	800db12 <_Bfree>
 800beba:	4621      	mov	r1, r4
 800bebc:	4648      	mov	r0, r9
 800bebe:	f001 fe28 	bl	800db12 <_Bfree>
 800bec2:	e600      	b.n	800bac6 <_strtod_l+0x7e>
 800bec4:	9a06      	ldr	r2, [sp, #24]
 800bec6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800beca:	4293      	cmp	r3, r2
 800becc:	dbba      	blt.n	800be44 <_strtod_l+0x3fc>
 800bece:	4d42      	ldr	r5, [pc, #264]	; (800bfd8 <_strtod_l+0x590>)
 800bed0:	f1c4 040f 	rsb	r4, r4, #15
 800bed4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bed8:	4652      	mov	r2, sl
 800beda:	465b      	mov	r3, fp
 800bedc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bee0:	f7f4 fb92 	bl	8000608 <__aeabi_dmul>
 800bee4:	9b06      	ldr	r3, [sp, #24]
 800bee6:	1b1c      	subs	r4, r3, r4
 800bee8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800beec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bef0:	e78d      	b.n	800be0e <_strtod_l+0x3c6>
 800bef2:	f113 0f16 	cmn.w	r3, #22
 800bef6:	dba5      	blt.n	800be44 <_strtod_l+0x3fc>
 800bef8:	4a37      	ldr	r2, [pc, #220]	; (800bfd8 <_strtod_l+0x590>)
 800befa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800befe:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bf02:	4650      	mov	r0, sl
 800bf04:	4659      	mov	r1, fp
 800bf06:	f7f4 fca9 	bl	800085c <__aeabi_ddiv>
 800bf0a:	e782      	b.n	800be12 <_strtod_l+0x3ca>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4e33      	ldr	r6, [pc, #204]	; (800bfdc <_strtod_l+0x594>)
 800bf10:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bf14:	4650      	mov	r0, sl
 800bf16:	4659      	mov	r1, fp
 800bf18:	461d      	mov	r5, r3
 800bf1a:	f1b8 0f01 	cmp.w	r8, #1
 800bf1e:	dc21      	bgt.n	800bf64 <_strtod_l+0x51c>
 800bf20:	b10b      	cbz	r3, 800bf26 <_strtod_l+0x4de>
 800bf22:	4682      	mov	sl, r0
 800bf24:	468b      	mov	fp, r1
 800bf26:	4b2d      	ldr	r3, [pc, #180]	; (800bfdc <_strtod_l+0x594>)
 800bf28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bf2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bf30:	4652      	mov	r2, sl
 800bf32:	465b      	mov	r3, fp
 800bf34:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bf38:	f7f4 fb66 	bl	8000608 <__aeabi_dmul>
 800bf3c:	4b28      	ldr	r3, [pc, #160]	; (800bfe0 <_strtod_l+0x598>)
 800bf3e:	460a      	mov	r2, r1
 800bf40:	400b      	ands	r3, r1
 800bf42:	4928      	ldr	r1, [pc, #160]	; (800bfe4 <_strtod_l+0x59c>)
 800bf44:	428b      	cmp	r3, r1
 800bf46:	4682      	mov	sl, r0
 800bf48:	d898      	bhi.n	800be7c <_strtod_l+0x434>
 800bf4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bf4e:	428b      	cmp	r3, r1
 800bf50:	bf86      	itte	hi
 800bf52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bfec <_strtod_l+0x5a4>
 800bf56:	f04f 3aff 	movhi.w	sl, #4294967295
 800bf5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	e077      	b.n	800c054 <_strtod_l+0x60c>
 800bf64:	f018 0f01 	tst.w	r8, #1
 800bf68:	d006      	beq.n	800bf78 <_strtod_l+0x530>
 800bf6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	f7f4 fb49 	bl	8000608 <__aeabi_dmul>
 800bf76:	2301      	movs	r3, #1
 800bf78:	3501      	adds	r5, #1
 800bf7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf7e:	e7cc      	b.n	800bf1a <_strtod_l+0x4d2>
 800bf80:	d0ed      	beq.n	800bf5e <_strtod_l+0x516>
 800bf82:	f1c8 0800 	rsb	r8, r8, #0
 800bf86:	f018 020f 	ands.w	r2, r8, #15
 800bf8a:	d00a      	beq.n	800bfa2 <_strtod_l+0x55a>
 800bf8c:	4b12      	ldr	r3, [pc, #72]	; (800bfd8 <_strtod_l+0x590>)
 800bf8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf92:	4650      	mov	r0, sl
 800bf94:	4659      	mov	r1, fp
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 fc5f 	bl	800085c <__aeabi_ddiv>
 800bf9e:	4682      	mov	sl, r0
 800bfa0:	468b      	mov	fp, r1
 800bfa2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bfa6:	d0da      	beq.n	800bf5e <_strtod_l+0x516>
 800bfa8:	f1b8 0f1f 	cmp.w	r8, #31
 800bfac:	dd20      	ble.n	800bff0 <_strtod_l+0x5a8>
 800bfae:	2400      	movs	r4, #0
 800bfb0:	46a0      	mov	r8, r4
 800bfb2:	9407      	str	r4, [sp, #28]
 800bfb4:	9405      	str	r4, [sp, #20]
 800bfb6:	2322      	movs	r3, #34	; 0x22
 800bfb8:	f04f 0a00 	mov.w	sl, #0
 800bfbc:	f04f 0b00 	mov.w	fp, #0
 800bfc0:	f8c9 3000 	str.w	r3, [r9]
 800bfc4:	e765      	b.n	800be92 <_strtod_l+0x44a>
 800bfc6:	bf00      	nop
 800bfc8:	0800e98d 	.word	0x0800e98d
 800bfcc:	0800ea1b 	.word	0x0800ea1b
 800bfd0:	0800e995 	.word	0x0800e995
 800bfd4:	0800e9d8 	.word	0x0800e9d8
 800bfd8:	0800ea58 	.word	0x0800ea58
 800bfdc:	0800ea30 	.word	0x0800ea30
 800bfe0:	7ff00000 	.word	0x7ff00000
 800bfe4:	7ca00000 	.word	0x7ca00000
 800bfe8:	fff80000 	.word	0xfff80000
 800bfec:	7fefffff 	.word	0x7fefffff
 800bff0:	f018 0310 	ands.w	r3, r8, #16
 800bff4:	bf18      	it	ne
 800bff6:	236a      	movne	r3, #106	; 0x6a
 800bff8:	4da0      	ldr	r5, [pc, #640]	; (800c27c <_strtod_l+0x834>)
 800bffa:	9304      	str	r3, [sp, #16]
 800bffc:	4650      	mov	r0, sl
 800bffe:	4659      	mov	r1, fp
 800c000:	2300      	movs	r3, #0
 800c002:	f1b8 0f00 	cmp.w	r8, #0
 800c006:	f300 810a 	bgt.w	800c21e <_strtod_l+0x7d6>
 800c00a:	b10b      	cbz	r3, 800c010 <_strtod_l+0x5c8>
 800c00c:	4682      	mov	sl, r0
 800c00e:	468b      	mov	fp, r1
 800c010:	9b04      	ldr	r3, [sp, #16]
 800c012:	b1bb      	cbz	r3, 800c044 <_strtod_l+0x5fc>
 800c014:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c018:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	4659      	mov	r1, fp
 800c020:	dd10      	ble.n	800c044 <_strtod_l+0x5fc>
 800c022:	2b1f      	cmp	r3, #31
 800c024:	f340 8107 	ble.w	800c236 <_strtod_l+0x7ee>
 800c028:	2b34      	cmp	r3, #52	; 0x34
 800c02a:	bfde      	ittt	le
 800c02c:	3b20      	suble	r3, #32
 800c02e:	f04f 32ff 	movle.w	r2, #4294967295
 800c032:	fa02 f303 	lslle.w	r3, r2, r3
 800c036:	f04f 0a00 	mov.w	sl, #0
 800c03a:	bfcc      	ite	gt
 800c03c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c040:	ea03 0b01 	andle.w	fp, r3, r1
 800c044:	2200      	movs	r2, #0
 800c046:	2300      	movs	r3, #0
 800c048:	4650      	mov	r0, sl
 800c04a:	4659      	mov	r1, fp
 800c04c:	f7f4 fd44 	bl	8000ad8 <__aeabi_dcmpeq>
 800c050:	2800      	cmp	r0, #0
 800c052:	d1ac      	bne.n	800bfae <_strtod_l+0x566>
 800c054:	9b07      	ldr	r3, [sp, #28]
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	9a05      	ldr	r2, [sp, #20]
 800c05a:	9908      	ldr	r1, [sp, #32]
 800c05c:	4623      	mov	r3, r4
 800c05e:	4648      	mov	r0, r9
 800c060:	f001 fda9 	bl	800dbb6 <__s2b>
 800c064:	9007      	str	r0, [sp, #28]
 800c066:	2800      	cmp	r0, #0
 800c068:	f43f af08 	beq.w	800be7c <_strtod_l+0x434>
 800c06c:	9a06      	ldr	r2, [sp, #24]
 800c06e:	9b06      	ldr	r3, [sp, #24]
 800c070:	2a00      	cmp	r2, #0
 800c072:	f1c3 0300 	rsb	r3, r3, #0
 800c076:	bfa8      	it	ge
 800c078:	2300      	movge	r3, #0
 800c07a:	930e      	str	r3, [sp, #56]	; 0x38
 800c07c:	2400      	movs	r4, #0
 800c07e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c082:	9316      	str	r3, [sp, #88]	; 0x58
 800c084:	46a0      	mov	r8, r4
 800c086:	9b07      	ldr	r3, [sp, #28]
 800c088:	4648      	mov	r0, r9
 800c08a:	6859      	ldr	r1, [r3, #4]
 800c08c:	f001 fd0d 	bl	800daaa <_Balloc>
 800c090:	9005      	str	r0, [sp, #20]
 800c092:	2800      	cmp	r0, #0
 800c094:	f43f aef6 	beq.w	800be84 <_strtod_l+0x43c>
 800c098:	9b07      	ldr	r3, [sp, #28]
 800c09a:	691a      	ldr	r2, [r3, #16]
 800c09c:	3202      	adds	r2, #2
 800c09e:	f103 010c 	add.w	r1, r3, #12
 800c0a2:	0092      	lsls	r2, r2, #2
 800c0a4:	300c      	adds	r0, #12
 800c0a6:	f001 fcf3 	bl	800da90 <memcpy>
 800c0aa:	aa1e      	add	r2, sp, #120	; 0x78
 800c0ac:	a91d      	add	r1, sp, #116	; 0x74
 800c0ae:	ec4b ab10 	vmov	d0, sl, fp
 800c0b2:	4648      	mov	r0, r9
 800c0b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c0b8:	f002 f838 	bl	800e12c <__d2b>
 800c0bc:	901c      	str	r0, [sp, #112]	; 0x70
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f43f aee0 	beq.w	800be84 <_strtod_l+0x43c>
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	4648      	mov	r0, r9
 800c0c8:	f001 fe01 	bl	800dcce <__i2b>
 800c0cc:	4680      	mov	r8, r0
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f43f aed8 	beq.w	800be84 <_strtod_l+0x43c>
 800c0d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c0d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c0d8:	2e00      	cmp	r6, #0
 800c0da:	bfab      	itete	ge
 800c0dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c0de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c0e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c0e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c0e4:	bfac      	ite	ge
 800c0e6:	18f7      	addge	r7, r6, r3
 800c0e8:	1b9d      	sublt	r5, r3, r6
 800c0ea:	9b04      	ldr	r3, [sp, #16]
 800c0ec:	1af6      	subs	r6, r6, r3
 800c0ee:	4416      	add	r6, r2
 800c0f0:	4b63      	ldr	r3, [pc, #396]	; (800c280 <_strtod_l+0x838>)
 800c0f2:	3e01      	subs	r6, #1
 800c0f4:	429e      	cmp	r6, r3
 800c0f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c0fa:	f280 80af 	bge.w	800c25c <_strtod_l+0x814>
 800c0fe:	1b9b      	subs	r3, r3, r6
 800c100:	2b1f      	cmp	r3, #31
 800c102:	eba2 0203 	sub.w	r2, r2, r3
 800c106:	f04f 0101 	mov.w	r1, #1
 800c10a:	f300 809b 	bgt.w	800c244 <_strtod_l+0x7fc>
 800c10e:	fa01 f303 	lsl.w	r3, r1, r3
 800c112:	930f      	str	r3, [sp, #60]	; 0x3c
 800c114:	2300      	movs	r3, #0
 800c116:	930a      	str	r3, [sp, #40]	; 0x28
 800c118:	18be      	adds	r6, r7, r2
 800c11a:	9b04      	ldr	r3, [sp, #16]
 800c11c:	42b7      	cmp	r7, r6
 800c11e:	4415      	add	r5, r2
 800c120:	441d      	add	r5, r3
 800c122:	463b      	mov	r3, r7
 800c124:	bfa8      	it	ge
 800c126:	4633      	movge	r3, r6
 800c128:	42ab      	cmp	r3, r5
 800c12a:	bfa8      	it	ge
 800c12c:	462b      	movge	r3, r5
 800c12e:	2b00      	cmp	r3, #0
 800c130:	bfc2      	ittt	gt
 800c132:	1af6      	subgt	r6, r6, r3
 800c134:	1aed      	subgt	r5, r5, r3
 800c136:	1aff      	subgt	r7, r7, r3
 800c138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c13a:	b1bb      	cbz	r3, 800c16c <_strtod_l+0x724>
 800c13c:	4641      	mov	r1, r8
 800c13e:	461a      	mov	r2, r3
 800c140:	4648      	mov	r0, r9
 800c142:	f001 fe63 	bl	800de0c <__pow5mult>
 800c146:	4680      	mov	r8, r0
 800c148:	2800      	cmp	r0, #0
 800c14a:	f43f ae9b 	beq.w	800be84 <_strtod_l+0x43c>
 800c14e:	4601      	mov	r1, r0
 800c150:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c152:	4648      	mov	r0, r9
 800c154:	f001 fdc4 	bl	800dce0 <__multiply>
 800c158:	900c      	str	r0, [sp, #48]	; 0x30
 800c15a:	2800      	cmp	r0, #0
 800c15c:	f43f ae92 	beq.w	800be84 <_strtod_l+0x43c>
 800c160:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c162:	4648      	mov	r0, r9
 800c164:	f001 fcd5 	bl	800db12 <_Bfree>
 800c168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c16a:	931c      	str	r3, [sp, #112]	; 0x70
 800c16c:	2e00      	cmp	r6, #0
 800c16e:	dc7a      	bgt.n	800c266 <_strtod_l+0x81e>
 800c170:	9b06      	ldr	r3, [sp, #24]
 800c172:	2b00      	cmp	r3, #0
 800c174:	dd08      	ble.n	800c188 <_strtod_l+0x740>
 800c176:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c178:	9905      	ldr	r1, [sp, #20]
 800c17a:	4648      	mov	r0, r9
 800c17c:	f001 fe46 	bl	800de0c <__pow5mult>
 800c180:	9005      	str	r0, [sp, #20]
 800c182:	2800      	cmp	r0, #0
 800c184:	f43f ae7e 	beq.w	800be84 <_strtod_l+0x43c>
 800c188:	2d00      	cmp	r5, #0
 800c18a:	dd08      	ble.n	800c19e <_strtod_l+0x756>
 800c18c:	462a      	mov	r2, r5
 800c18e:	9905      	ldr	r1, [sp, #20]
 800c190:	4648      	mov	r0, r9
 800c192:	f001 fe89 	bl	800dea8 <__lshift>
 800c196:	9005      	str	r0, [sp, #20]
 800c198:	2800      	cmp	r0, #0
 800c19a:	f43f ae73 	beq.w	800be84 <_strtod_l+0x43c>
 800c19e:	2f00      	cmp	r7, #0
 800c1a0:	dd08      	ble.n	800c1b4 <_strtod_l+0x76c>
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	463a      	mov	r2, r7
 800c1a6:	4648      	mov	r0, r9
 800c1a8:	f001 fe7e 	bl	800dea8 <__lshift>
 800c1ac:	4680      	mov	r8, r0
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	f43f ae68 	beq.w	800be84 <_strtod_l+0x43c>
 800c1b4:	9a05      	ldr	r2, [sp, #20]
 800c1b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c1b8:	4648      	mov	r0, r9
 800c1ba:	f001 fee3 	bl	800df84 <__mdiff>
 800c1be:	4604      	mov	r4, r0
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	f43f ae5f 	beq.w	800be84 <_strtod_l+0x43c>
 800c1c6:	68c3      	ldr	r3, [r0, #12]
 800c1c8:	930c      	str	r3, [sp, #48]	; 0x30
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60c3      	str	r3, [r0, #12]
 800c1ce:	4641      	mov	r1, r8
 800c1d0:	f001 febe 	bl	800df50 <__mcmp>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	da55      	bge.n	800c284 <_strtod_l+0x83c>
 800c1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1da:	b9e3      	cbnz	r3, 800c216 <_strtod_l+0x7ce>
 800c1dc:	f1ba 0f00 	cmp.w	sl, #0
 800c1e0:	d119      	bne.n	800c216 <_strtod_l+0x7ce>
 800c1e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1e6:	b9b3      	cbnz	r3, 800c216 <_strtod_l+0x7ce>
 800c1e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c1ec:	0d1b      	lsrs	r3, r3, #20
 800c1ee:	051b      	lsls	r3, r3, #20
 800c1f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c1f4:	d90f      	bls.n	800c216 <_strtod_l+0x7ce>
 800c1f6:	6963      	ldr	r3, [r4, #20]
 800c1f8:	b913      	cbnz	r3, 800c200 <_strtod_l+0x7b8>
 800c1fa:	6923      	ldr	r3, [r4, #16]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	dd0a      	ble.n	800c216 <_strtod_l+0x7ce>
 800c200:	4621      	mov	r1, r4
 800c202:	2201      	movs	r2, #1
 800c204:	4648      	mov	r0, r9
 800c206:	f001 fe4f 	bl	800dea8 <__lshift>
 800c20a:	4641      	mov	r1, r8
 800c20c:	4604      	mov	r4, r0
 800c20e:	f001 fe9f 	bl	800df50 <__mcmp>
 800c212:	2800      	cmp	r0, #0
 800c214:	dc67      	bgt.n	800c2e6 <_strtod_l+0x89e>
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d171      	bne.n	800c300 <_strtod_l+0x8b8>
 800c21c:	e63d      	b.n	800be9a <_strtod_l+0x452>
 800c21e:	f018 0f01 	tst.w	r8, #1
 800c222:	d004      	beq.n	800c22e <_strtod_l+0x7e6>
 800c224:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c228:	f7f4 f9ee 	bl	8000608 <__aeabi_dmul>
 800c22c:	2301      	movs	r3, #1
 800c22e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c232:	3508      	adds	r5, #8
 800c234:	e6e5      	b.n	800c002 <_strtod_l+0x5ba>
 800c236:	f04f 32ff 	mov.w	r2, #4294967295
 800c23a:	fa02 f303 	lsl.w	r3, r2, r3
 800c23e:	ea03 0a0a 	and.w	sl, r3, sl
 800c242:	e6ff      	b.n	800c044 <_strtod_l+0x5fc>
 800c244:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c248:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c24c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c250:	36e2      	adds	r6, #226	; 0xe2
 800c252:	fa01 f306 	lsl.w	r3, r1, r6
 800c256:	930a      	str	r3, [sp, #40]	; 0x28
 800c258:	910f      	str	r1, [sp, #60]	; 0x3c
 800c25a:	e75d      	b.n	800c118 <_strtod_l+0x6d0>
 800c25c:	2300      	movs	r3, #0
 800c25e:	930a      	str	r3, [sp, #40]	; 0x28
 800c260:	2301      	movs	r3, #1
 800c262:	930f      	str	r3, [sp, #60]	; 0x3c
 800c264:	e758      	b.n	800c118 <_strtod_l+0x6d0>
 800c266:	4632      	mov	r2, r6
 800c268:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c26a:	4648      	mov	r0, r9
 800c26c:	f001 fe1c 	bl	800dea8 <__lshift>
 800c270:	901c      	str	r0, [sp, #112]	; 0x70
 800c272:	2800      	cmp	r0, #0
 800c274:	f47f af7c 	bne.w	800c170 <_strtod_l+0x728>
 800c278:	e604      	b.n	800be84 <_strtod_l+0x43c>
 800c27a:	bf00      	nop
 800c27c:	0800e9f0 	.word	0x0800e9f0
 800c280:	fffffc02 	.word	0xfffffc02
 800c284:	465d      	mov	r5, fp
 800c286:	f040 8086 	bne.w	800c396 <_strtod_l+0x94e>
 800c28a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c28c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c290:	b32a      	cbz	r2, 800c2de <_strtod_l+0x896>
 800c292:	4aaf      	ldr	r2, [pc, #700]	; (800c550 <_strtod_l+0xb08>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d153      	bne.n	800c340 <_strtod_l+0x8f8>
 800c298:	9b04      	ldr	r3, [sp, #16]
 800c29a:	4650      	mov	r0, sl
 800c29c:	b1d3      	cbz	r3, 800c2d4 <_strtod_l+0x88c>
 800c29e:	4aad      	ldr	r2, [pc, #692]	; (800c554 <_strtod_l+0xb0c>)
 800c2a0:	402a      	ands	r2, r5
 800c2a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c2a6:	f04f 31ff 	mov.w	r1, #4294967295
 800c2aa:	d816      	bhi.n	800c2da <_strtod_l+0x892>
 800c2ac:	0d12      	lsrs	r2, r2, #20
 800c2ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800c2b6:	4298      	cmp	r0, r3
 800c2b8:	d142      	bne.n	800c340 <_strtod_l+0x8f8>
 800c2ba:	4ba7      	ldr	r3, [pc, #668]	; (800c558 <_strtod_l+0xb10>)
 800c2bc:	429d      	cmp	r5, r3
 800c2be:	d102      	bne.n	800c2c6 <_strtod_l+0x87e>
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	f43f addf 	beq.w	800be84 <_strtod_l+0x43c>
 800c2c6:	4ba3      	ldr	r3, [pc, #652]	; (800c554 <_strtod_l+0xb0c>)
 800c2c8:	402b      	ands	r3, r5
 800c2ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c2ce:	f04f 0a00 	mov.w	sl, #0
 800c2d2:	e7a0      	b.n	800c216 <_strtod_l+0x7ce>
 800c2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d8:	e7ed      	b.n	800c2b6 <_strtod_l+0x86e>
 800c2da:	460b      	mov	r3, r1
 800c2dc:	e7eb      	b.n	800c2b6 <_strtod_l+0x86e>
 800c2de:	bb7b      	cbnz	r3, 800c340 <_strtod_l+0x8f8>
 800c2e0:	f1ba 0f00 	cmp.w	sl, #0
 800c2e4:	d12c      	bne.n	800c340 <_strtod_l+0x8f8>
 800c2e6:	9904      	ldr	r1, [sp, #16]
 800c2e8:	4a9a      	ldr	r2, [pc, #616]	; (800c554 <_strtod_l+0xb0c>)
 800c2ea:	465b      	mov	r3, fp
 800c2ec:	b1f1      	cbz	r1, 800c32c <_strtod_l+0x8e4>
 800c2ee:	ea02 010b 	and.w	r1, r2, fp
 800c2f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c2f6:	dc19      	bgt.n	800c32c <_strtod_l+0x8e4>
 800c2f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c2fc:	f77f ae5b 	ble.w	800bfb6 <_strtod_l+0x56e>
 800c300:	4a96      	ldr	r2, [pc, #600]	; (800c55c <_strtod_l+0xb14>)
 800c302:	2300      	movs	r3, #0
 800c304:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c308:	4650      	mov	r0, sl
 800c30a:	4659      	mov	r1, fp
 800c30c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c310:	f7f4 f97a 	bl	8000608 <__aeabi_dmul>
 800c314:	4682      	mov	sl, r0
 800c316:	468b      	mov	fp, r1
 800c318:	2900      	cmp	r1, #0
 800c31a:	f47f adbe 	bne.w	800be9a <_strtod_l+0x452>
 800c31e:	2800      	cmp	r0, #0
 800c320:	f47f adbb 	bne.w	800be9a <_strtod_l+0x452>
 800c324:	2322      	movs	r3, #34	; 0x22
 800c326:	f8c9 3000 	str.w	r3, [r9]
 800c32a:	e5b6      	b.n	800be9a <_strtod_l+0x452>
 800c32c:	4013      	ands	r3, r2
 800c32e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c332:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c336:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c33a:	f04f 3aff 	mov.w	sl, #4294967295
 800c33e:	e76a      	b.n	800c216 <_strtod_l+0x7ce>
 800c340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c342:	b193      	cbz	r3, 800c36a <_strtod_l+0x922>
 800c344:	422b      	tst	r3, r5
 800c346:	f43f af66 	beq.w	800c216 <_strtod_l+0x7ce>
 800c34a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c34c:	9a04      	ldr	r2, [sp, #16]
 800c34e:	4650      	mov	r0, sl
 800c350:	4659      	mov	r1, fp
 800c352:	b173      	cbz	r3, 800c372 <_strtod_l+0x92a>
 800c354:	f7ff fb5c 	bl	800ba10 <sulp>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c360:	f7f3 ff9c 	bl	800029c <__adddf3>
 800c364:	4682      	mov	sl, r0
 800c366:	468b      	mov	fp, r1
 800c368:	e755      	b.n	800c216 <_strtod_l+0x7ce>
 800c36a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c36c:	ea13 0f0a 	tst.w	r3, sl
 800c370:	e7e9      	b.n	800c346 <_strtod_l+0x8fe>
 800c372:	f7ff fb4d 	bl	800ba10 <sulp>
 800c376:	4602      	mov	r2, r0
 800c378:	460b      	mov	r3, r1
 800c37a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c37e:	f7f3 ff8b 	bl	8000298 <__aeabi_dsub>
 800c382:	2200      	movs	r2, #0
 800c384:	2300      	movs	r3, #0
 800c386:	4682      	mov	sl, r0
 800c388:	468b      	mov	fp, r1
 800c38a:	f7f4 fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c38e:	2800      	cmp	r0, #0
 800c390:	f47f ae11 	bne.w	800bfb6 <_strtod_l+0x56e>
 800c394:	e73f      	b.n	800c216 <_strtod_l+0x7ce>
 800c396:	4641      	mov	r1, r8
 800c398:	4620      	mov	r0, r4
 800c39a:	f001 ff16 	bl	800e1ca <__ratio>
 800c39e:	ec57 6b10 	vmov	r6, r7, d0
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3a8:	ee10 0a10 	vmov	r0, s0
 800c3ac:	4639      	mov	r1, r7
 800c3ae:	f7f4 fba7 	bl	8000b00 <__aeabi_dcmple>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d077      	beq.n	800c4a6 <_strtod_l+0xa5e>
 800c3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d04a      	beq.n	800c452 <_strtod_l+0xa0a>
 800c3bc:	4b68      	ldr	r3, [pc, #416]	; (800c560 <_strtod_l+0xb18>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c3c4:	4f66      	ldr	r7, [pc, #408]	; (800c560 <_strtod_l+0xb18>)
 800c3c6:	2600      	movs	r6, #0
 800c3c8:	4b62      	ldr	r3, [pc, #392]	; (800c554 <_strtod_l+0xb0c>)
 800c3ca:	402b      	ands	r3, r5
 800c3cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3d0:	4b64      	ldr	r3, [pc, #400]	; (800c564 <_strtod_l+0xb1c>)
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	f040 80ce 	bne.w	800c574 <_strtod_l+0xb2c>
 800c3d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c3dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c3e4:	ec4b ab10 	vmov	d0, sl, fp
 800c3e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c3ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c3f0:	f001 fe26 	bl	800e040 <__ulp>
 800c3f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3f8:	ec53 2b10 	vmov	r2, r3, d0
 800c3fc:	f7f4 f904 	bl	8000608 <__aeabi_dmul>
 800c400:	4652      	mov	r2, sl
 800c402:	465b      	mov	r3, fp
 800c404:	f7f3 ff4a 	bl	800029c <__adddf3>
 800c408:	460b      	mov	r3, r1
 800c40a:	4952      	ldr	r1, [pc, #328]	; (800c554 <_strtod_l+0xb0c>)
 800c40c:	4a56      	ldr	r2, [pc, #344]	; (800c568 <_strtod_l+0xb20>)
 800c40e:	4019      	ands	r1, r3
 800c410:	4291      	cmp	r1, r2
 800c412:	4682      	mov	sl, r0
 800c414:	d95b      	bls.n	800c4ce <_strtod_l+0xa86>
 800c416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c418:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d103      	bne.n	800c428 <_strtod_l+0x9e0>
 800c420:	9b08      	ldr	r3, [sp, #32]
 800c422:	3301      	adds	r3, #1
 800c424:	f43f ad2e 	beq.w	800be84 <_strtod_l+0x43c>
 800c428:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c558 <_strtod_l+0xb10>
 800c42c:	f04f 3aff 	mov.w	sl, #4294967295
 800c430:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c432:	4648      	mov	r0, r9
 800c434:	f001 fb6d 	bl	800db12 <_Bfree>
 800c438:	9905      	ldr	r1, [sp, #20]
 800c43a:	4648      	mov	r0, r9
 800c43c:	f001 fb69 	bl	800db12 <_Bfree>
 800c440:	4641      	mov	r1, r8
 800c442:	4648      	mov	r0, r9
 800c444:	f001 fb65 	bl	800db12 <_Bfree>
 800c448:	4621      	mov	r1, r4
 800c44a:	4648      	mov	r0, r9
 800c44c:	f001 fb61 	bl	800db12 <_Bfree>
 800c450:	e619      	b.n	800c086 <_strtod_l+0x63e>
 800c452:	f1ba 0f00 	cmp.w	sl, #0
 800c456:	d11a      	bne.n	800c48e <_strtod_l+0xa46>
 800c458:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c45c:	b9eb      	cbnz	r3, 800c49a <_strtod_l+0xa52>
 800c45e:	2200      	movs	r2, #0
 800c460:	4b3f      	ldr	r3, [pc, #252]	; (800c560 <_strtod_l+0xb18>)
 800c462:	4630      	mov	r0, r6
 800c464:	4639      	mov	r1, r7
 800c466:	f7f4 fb41 	bl	8000aec <__aeabi_dcmplt>
 800c46a:	b9c8      	cbnz	r0, 800c4a0 <_strtod_l+0xa58>
 800c46c:	4630      	mov	r0, r6
 800c46e:	4639      	mov	r1, r7
 800c470:	2200      	movs	r2, #0
 800c472:	4b3e      	ldr	r3, [pc, #248]	; (800c56c <_strtod_l+0xb24>)
 800c474:	f7f4 f8c8 	bl	8000608 <__aeabi_dmul>
 800c478:	4606      	mov	r6, r0
 800c47a:	460f      	mov	r7, r1
 800c47c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c480:	9618      	str	r6, [sp, #96]	; 0x60
 800c482:	9319      	str	r3, [sp, #100]	; 0x64
 800c484:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c488:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c48c:	e79c      	b.n	800c3c8 <_strtod_l+0x980>
 800c48e:	f1ba 0f01 	cmp.w	sl, #1
 800c492:	d102      	bne.n	800c49a <_strtod_l+0xa52>
 800c494:	2d00      	cmp	r5, #0
 800c496:	f43f ad8e 	beq.w	800bfb6 <_strtod_l+0x56e>
 800c49a:	2200      	movs	r2, #0
 800c49c:	4b34      	ldr	r3, [pc, #208]	; (800c570 <_strtod_l+0xb28>)
 800c49e:	e78f      	b.n	800c3c0 <_strtod_l+0x978>
 800c4a0:	2600      	movs	r6, #0
 800c4a2:	4f32      	ldr	r7, [pc, #200]	; (800c56c <_strtod_l+0xb24>)
 800c4a4:	e7ea      	b.n	800c47c <_strtod_l+0xa34>
 800c4a6:	4b31      	ldr	r3, [pc, #196]	; (800c56c <_strtod_l+0xb24>)
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f7f4 f8ab 	bl	8000608 <__aeabi_dmul>
 800c4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	460f      	mov	r7, r1
 800c4b8:	b933      	cbnz	r3, 800c4c8 <_strtod_l+0xa80>
 800c4ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4be:	9010      	str	r0, [sp, #64]	; 0x40
 800c4c0:	9311      	str	r3, [sp, #68]	; 0x44
 800c4c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4c6:	e7df      	b.n	800c488 <_strtod_l+0xa40>
 800c4c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c4cc:	e7f9      	b.n	800c4c2 <_strtod_l+0xa7a>
 800c4ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c4d2:	9b04      	ldr	r3, [sp, #16]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1ab      	bne.n	800c430 <_strtod_l+0x9e8>
 800c4d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4dc:	0d1b      	lsrs	r3, r3, #20
 800c4de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4e0:	051b      	lsls	r3, r3, #20
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	465d      	mov	r5, fp
 800c4e6:	d1a3      	bne.n	800c430 <_strtod_l+0x9e8>
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7f4 fb3c 	bl	8000b68 <__aeabi_d2iz>
 800c4f0:	f7f4 f820 	bl	8000534 <__aeabi_i2d>
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f7f3 fecc 	bl	8000298 <__aeabi_dsub>
 800c500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c502:	4606      	mov	r6, r0
 800c504:	460f      	mov	r7, r1
 800c506:	b933      	cbnz	r3, 800c516 <_strtod_l+0xace>
 800c508:	f1ba 0f00 	cmp.w	sl, #0
 800c50c:	d103      	bne.n	800c516 <_strtod_l+0xace>
 800c50e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c512:	2d00      	cmp	r5, #0
 800c514:	d06d      	beq.n	800c5f2 <_strtod_l+0xbaa>
 800c516:	a30a      	add	r3, pc, #40	; (adr r3, 800c540 <_strtod_l+0xaf8>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	4630      	mov	r0, r6
 800c51e:	4639      	mov	r1, r7
 800c520:	f7f4 fae4 	bl	8000aec <__aeabi_dcmplt>
 800c524:	2800      	cmp	r0, #0
 800c526:	f47f acb8 	bne.w	800be9a <_strtod_l+0x452>
 800c52a:	a307      	add	r3, pc, #28	; (adr r3, 800c548 <_strtod_l+0xb00>)
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	4630      	mov	r0, r6
 800c532:	4639      	mov	r1, r7
 800c534:	f7f4 faf8 	bl	8000b28 <__aeabi_dcmpgt>
 800c538:	2800      	cmp	r0, #0
 800c53a:	f43f af79 	beq.w	800c430 <_strtod_l+0x9e8>
 800c53e:	e4ac      	b.n	800be9a <_strtod_l+0x452>
 800c540:	94a03595 	.word	0x94a03595
 800c544:	3fdfffff 	.word	0x3fdfffff
 800c548:	35afe535 	.word	0x35afe535
 800c54c:	3fe00000 	.word	0x3fe00000
 800c550:	000fffff 	.word	0x000fffff
 800c554:	7ff00000 	.word	0x7ff00000
 800c558:	7fefffff 	.word	0x7fefffff
 800c55c:	39500000 	.word	0x39500000
 800c560:	3ff00000 	.word	0x3ff00000
 800c564:	7fe00000 	.word	0x7fe00000
 800c568:	7c9fffff 	.word	0x7c9fffff
 800c56c:	3fe00000 	.word	0x3fe00000
 800c570:	bff00000 	.word	0xbff00000
 800c574:	9b04      	ldr	r3, [sp, #16]
 800c576:	b333      	cbz	r3, 800c5c6 <_strtod_l+0xb7e>
 800c578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c57a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c57e:	d822      	bhi.n	800c5c6 <_strtod_l+0xb7e>
 800c580:	a327      	add	r3, pc, #156	; (adr r3, 800c620 <_strtod_l+0xbd8>)
 800c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c586:	4630      	mov	r0, r6
 800c588:	4639      	mov	r1, r7
 800c58a:	f7f4 fab9 	bl	8000b00 <__aeabi_dcmple>
 800c58e:	b1a0      	cbz	r0, 800c5ba <_strtod_l+0xb72>
 800c590:	4639      	mov	r1, r7
 800c592:	4630      	mov	r0, r6
 800c594:	f7f4 fb10 	bl	8000bb8 <__aeabi_d2uiz>
 800c598:	2800      	cmp	r0, #0
 800c59a:	bf08      	it	eq
 800c59c:	2001      	moveq	r0, #1
 800c59e:	f7f3 ffb9 	bl	8000514 <__aeabi_ui2d>
 800c5a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	460f      	mov	r7, r1
 800c5a8:	bb03      	cbnz	r3, 800c5ec <_strtod_l+0xba4>
 800c5aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5ae:	9012      	str	r0, [sp, #72]	; 0x48
 800c5b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c5b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c5b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c5c2:	1a9b      	subs	r3, r3, r2
 800c5c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c5ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c5ce:	f001 fd37 	bl	800e040 <__ulp>
 800c5d2:	4650      	mov	r0, sl
 800c5d4:	ec53 2b10 	vmov	r2, r3, d0
 800c5d8:	4659      	mov	r1, fp
 800c5da:	f7f4 f815 	bl	8000608 <__aeabi_dmul>
 800c5de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c5e2:	f7f3 fe5b 	bl	800029c <__adddf3>
 800c5e6:	4682      	mov	sl, r0
 800c5e8:	468b      	mov	fp, r1
 800c5ea:	e772      	b.n	800c4d2 <_strtod_l+0xa8a>
 800c5ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c5f0:	e7df      	b.n	800c5b2 <_strtod_l+0xb6a>
 800c5f2:	a30d      	add	r3, pc, #52	; (adr r3, 800c628 <_strtod_l+0xbe0>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f7f4 fa78 	bl	8000aec <__aeabi_dcmplt>
 800c5fc:	e79c      	b.n	800c538 <_strtod_l+0xaf0>
 800c5fe:	2300      	movs	r3, #0
 800c600:	930d      	str	r3, [sp, #52]	; 0x34
 800c602:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c604:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	f7ff ba61 	b.w	800bace <_strtod_l+0x86>
 800c60c:	2b65      	cmp	r3, #101	; 0x65
 800c60e:	f04f 0200 	mov.w	r2, #0
 800c612:	f43f ab4e 	beq.w	800bcb2 <_strtod_l+0x26a>
 800c616:	2101      	movs	r1, #1
 800c618:	4614      	mov	r4, r2
 800c61a:	9104      	str	r1, [sp, #16]
 800c61c:	f7ff bacb 	b.w	800bbb6 <_strtod_l+0x16e>
 800c620:	ffc00000 	.word	0xffc00000
 800c624:	41dfffff 	.word	0x41dfffff
 800c628:	94a03595 	.word	0x94a03595
 800c62c:	3fcfffff 	.word	0x3fcfffff

0800c630 <_strtod_r>:
 800c630:	4b05      	ldr	r3, [pc, #20]	; (800c648 <_strtod_r+0x18>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	b410      	push	{r4}
 800c636:	6a1b      	ldr	r3, [r3, #32]
 800c638:	4c04      	ldr	r4, [pc, #16]	; (800c64c <_strtod_r+0x1c>)
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bf08      	it	eq
 800c63e:	4623      	moveq	r3, r4
 800c640:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c644:	f7ff ba00 	b.w	800ba48 <_strtod_l>
 800c648:	200001f0 	.word	0x200001f0
 800c64c:	20000254 	.word	0x20000254

0800c650 <_strtol_l.isra.0>:
 800c650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c654:	4680      	mov	r8, r0
 800c656:	4689      	mov	r9, r1
 800c658:	4692      	mov	sl, r2
 800c65a:	461e      	mov	r6, r3
 800c65c:	460f      	mov	r7, r1
 800c65e:	463d      	mov	r5, r7
 800c660:	9808      	ldr	r0, [sp, #32]
 800c662:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c666:	f001 f9ed 	bl	800da44 <__locale_ctype_ptr_l>
 800c66a:	4420      	add	r0, r4
 800c66c:	7843      	ldrb	r3, [r0, #1]
 800c66e:	f013 0308 	ands.w	r3, r3, #8
 800c672:	d132      	bne.n	800c6da <_strtol_l.isra.0+0x8a>
 800c674:	2c2d      	cmp	r4, #45	; 0x2d
 800c676:	d132      	bne.n	800c6de <_strtol_l.isra.0+0x8e>
 800c678:	787c      	ldrb	r4, [r7, #1]
 800c67a:	1cbd      	adds	r5, r7, #2
 800c67c:	2201      	movs	r2, #1
 800c67e:	2e00      	cmp	r6, #0
 800c680:	d05d      	beq.n	800c73e <_strtol_l.isra.0+0xee>
 800c682:	2e10      	cmp	r6, #16
 800c684:	d109      	bne.n	800c69a <_strtol_l.isra.0+0x4a>
 800c686:	2c30      	cmp	r4, #48	; 0x30
 800c688:	d107      	bne.n	800c69a <_strtol_l.isra.0+0x4a>
 800c68a:	782b      	ldrb	r3, [r5, #0]
 800c68c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c690:	2b58      	cmp	r3, #88	; 0x58
 800c692:	d14f      	bne.n	800c734 <_strtol_l.isra.0+0xe4>
 800c694:	786c      	ldrb	r4, [r5, #1]
 800c696:	2610      	movs	r6, #16
 800c698:	3502      	adds	r5, #2
 800c69a:	2a00      	cmp	r2, #0
 800c69c:	bf14      	ite	ne
 800c69e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c6a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c6a6:	2700      	movs	r7, #0
 800c6a8:	fbb1 fcf6 	udiv	ip, r1, r6
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c6b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c6b6:	2b09      	cmp	r3, #9
 800c6b8:	d817      	bhi.n	800c6ea <_strtol_l.isra.0+0x9a>
 800c6ba:	461c      	mov	r4, r3
 800c6bc:	42a6      	cmp	r6, r4
 800c6be:	dd23      	ble.n	800c708 <_strtol_l.isra.0+0xb8>
 800c6c0:	1c7b      	adds	r3, r7, #1
 800c6c2:	d007      	beq.n	800c6d4 <_strtol_l.isra.0+0x84>
 800c6c4:	4584      	cmp	ip, r0
 800c6c6:	d31c      	bcc.n	800c702 <_strtol_l.isra.0+0xb2>
 800c6c8:	d101      	bne.n	800c6ce <_strtol_l.isra.0+0x7e>
 800c6ca:	45a6      	cmp	lr, r4
 800c6cc:	db19      	blt.n	800c702 <_strtol_l.isra.0+0xb2>
 800c6ce:	fb00 4006 	mla	r0, r0, r6, r4
 800c6d2:	2701      	movs	r7, #1
 800c6d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6d8:	e7eb      	b.n	800c6b2 <_strtol_l.isra.0+0x62>
 800c6da:	462f      	mov	r7, r5
 800c6dc:	e7bf      	b.n	800c65e <_strtol_l.isra.0+0xe>
 800c6de:	2c2b      	cmp	r4, #43	; 0x2b
 800c6e0:	bf04      	itt	eq
 800c6e2:	1cbd      	addeq	r5, r7, #2
 800c6e4:	787c      	ldrbeq	r4, [r7, #1]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	e7c9      	b.n	800c67e <_strtol_l.isra.0+0x2e>
 800c6ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c6ee:	2b19      	cmp	r3, #25
 800c6f0:	d801      	bhi.n	800c6f6 <_strtol_l.isra.0+0xa6>
 800c6f2:	3c37      	subs	r4, #55	; 0x37
 800c6f4:	e7e2      	b.n	800c6bc <_strtol_l.isra.0+0x6c>
 800c6f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c6fa:	2b19      	cmp	r3, #25
 800c6fc:	d804      	bhi.n	800c708 <_strtol_l.isra.0+0xb8>
 800c6fe:	3c57      	subs	r4, #87	; 0x57
 800c700:	e7dc      	b.n	800c6bc <_strtol_l.isra.0+0x6c>
 800c702:	f04f 37ff 	mov.w	r7, #4294967295
 800c706:	e7e5      	b.n	800c6d4 <_strtol_l.isra.0+0x84>
 800c708:	1c7b      	adds	r3, r7, #1
 800c70a:	d108      	bne.n	800c71e <_strtol_l.isra.0+0xce>
 800c70c:	2322      	movs	r3, #34	; 0x22
 800c70e:	f8c8 3000 	str.w	r3, [r8]
 800c712:	4608      	mov	r0, r1
 800c714:	f1ba 0f00 	cmp.w	sl, #0
 800c718:	d107      	bne.n	800c72a <_strtol_l.isra.0+0xda>
 800c71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71e:	b102      	cbz	r2, 800c722 <_strtol_l.isra.0+0xd2>
 800c720:	4240      	negs	r0, r0
 800c722:	f1ba 0f00 	cmp.w	sl, #0
 800c726:	d0f8      	beq.n	800c71a <_strtol_l.isra.0+0xca>
 800c728:	b10f      	cbz	r7, 800c72e <_strtol_l.isra.0+0xde>
 800c72a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c72e:	f8ca 9000 	str.w	r9, [sl]
 800c732:	e7f2      	b.n	800c71a <_strtol_l.isra.0+0xca>
 800c734:	2430      	movs	r4, #48	; 0x30
 800c736:	2e00      	cmp	r6, #0
 800c738:	d1af      	bne.n	800c69a <_strtol_l.isra.0+0x4a>
 800c73a:	2608      	movs	r6, #8
 800c73c:	e7ad      	b.n	800c69a <_strtol_l.isra.0+0x4a>
 800c73e:	2c30      	cmp	r4, #48	; 0x30
 800c740:	d0a3      	beq.n	800c68a <_strtol_l.isra.0+0x3a>
 800c742:	260a      	movs	r6, #10
 800c744:	e7a9      	b.n	800c69a <_strtol_l.isra.0+0x4a>
	...

0800c748 <_strtol_r>:
 800c748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c74a:	4c06      	ldr	r4, [pc, #24]	; (800c764 <_strtol_r+0x1c>)
 800c74c:	4d06      	ldr	r5, [pc, #24]	; (800c768 <_strtol_r+0x20>)
 800c74e:	6824      	ldr	r4, [r4, #0]
 800c750:	6a24      	ldr	r4, [r4, #32]
 800c752:	2c00      	cmp	r4, #0
 800c754:	bf08      	it	eq
 800c756:	462c      	moveq	r4, r5
 800c758:	9400      	str	r4, [sp, #0]
 800c75a:	f7ff ff79 	bl	800c650 <_strtol_l.isra.0>
 800c75e:	b003      	add	sp, #12
 800c760:	bd30      	pop	{r4, r5, pc}
 800c762:	bf00      	nop
 800c764:	200001f0 	.word	0x200001f0
 800c768:	20000254 	.word	0x20000254

0800c76c <quorem>:
 800c76c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c770:	6903      	ldr	r3, [r0, #16]
 800c772:	690c      	ldr	r4, [r1, #16]
 800c774:	42a3      	cmp	r3, r4
 800c776:	4680      	mov	r8, r0
 800c778:	f2c0 8082 	blt.w	800c880 <quorem+0x114>
 800c77c:	3c01      	subs	r4, #1
 800c77e:	f101 0714 	add.w	r7, r1, #20
 800c782:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c786:	f100 0614 	add.w	r6, r0, #20
 800c78a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c78e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c792:	eb06 030c 	add.w	r3, r6, ip
 800c796:	3501      	adds	r5, #1
 800c798:	eb07 090c 	add.w	r9, r7, ip
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	fbb0 f5f5 	udiv	r5, r0, r5
 800c7a2:	b395      	cbz	r5, 800c80a <quorem+0x9e>
 800c7a4:	f04f 0a00 	mov.w	sl, #0
 800c7a8:	4638      	mov	r0, r7
 800c7aa:	46b6      	mov	lr, r6
 800c7ac:	46d3      	mov	fp, sl
 800c7ae:	f850 2b04 	ldr.w	r2, [r0], #4
 800c7b2:	b293      	uxth	r3, r2
 800c7b4:	fb05 a303 	mla	r3, r5, r3, sl
 800c7b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	ebab 0303 	sub.w	r3, fp, r3
 800c7c2:	0c12      	lsrs	r2, r2, #16
 800c7c4:	f8de b000 	ldr.w	fp, [lr]
 800c7c8:	fb05 a202 	mla	r2, r5, r2, sl
 800c7cc:	fa13 f38b 	uxtah	r3, r3, fp
 800c7d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c7d4:	fa1f fb82 	uxth.w	fp, r2
 800c7d8:	f8de 2000 	ldr.w	r2, [lr]
 800c7dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c7e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7ea:	4581      	cmp	r9, r0
 800c7ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c7f0:	f84e 3b04 	str.w	r3, [lr], #4
 800c7f4:	d2db      	bcs.n	800c7ae <quorem+0x42>
 800c7f6:	f856 300c 	ldr.w	r3, [r6, ip]
 800c7fa:	b933      	cbnz	r3, 800c80a <quorem+0x9e>
 800c7fc:	9b01      	ldr	r3, [sp, #4]
 800c7fe:	3b04      	subs	r3, #4
 800c800:	429e      	cmp	r6, r3
 800c802:	461a      	mov	r2, r3
 800c804:	d330      	bcc.n	800c868 <quorem+0xfc>
 800c806:	f8c8 4010 	str.w	r4, [r8, #16]
 800c80a:	4640      	mov	r0, r8
 800c80c:	f001 fba0 	bl	800df50 <__mcmp>
 800c810:	2800      	cmp	r0, #0
 800c812:	db25      	blt.n	800c860 <quorem+0xf4>
 800c814:	3501      	adds	r5, #1
 800c816:	4630      	mov	r0, r6
 800c818:	f04f 0c00 	mov.w	ip, #0
 800c81c:	f857 2b04 	ldr.w	r2, [r7], #4
 800c820:	f8d0 e000 	ldr.w	lr, [r0]
 800c824:	b293      	uxth	r3, r2
 800c826:	ebac 0303 	sub.w	r3, ip, r3
 800c82a:	0c12      	lsrs	r2, r2, #16
 800c82c:	fa13 f38e 	uxtah	r3, r3, lr
 800c830:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c834:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c838:	b29b      	uxth	r3, r3
 800c83a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c83e:	45b9      	cmp	r9, r7
 800c840:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c844:	f840 3b04 	str.w	r3, [r0], #4
 800c848:	d2e8      	bcs.n	800c81c <quorem+0xb0>
 800c84a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c84e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c852:	b92a      	cbnz	r2, 800c860 <quorem+0xf4>
 800c854:	3b04      	subs	r3, #4
 800c856:	429e      	cmp	r6, r3
 800c858:	461a      	mov	r2, r3
 800c85a:	d30b      	bcc.n	800c874 <quorem+0x108>
 800c85c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c860:	4628      	mov	r0, r5
 800c862:	b003      	add	sp, #12
 800c864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c868:	6812      	ldr	r2, [r2, #0]
 800c86a:	3b04      	subs	r3, #4
 800c86c:	2a00      	cmp	r2, #0
 800c86e:	d1ca      	bne.n	800c806 <quorem+0x9a>
 800c870:	3c01      	subs	r4, #1
 800c872:	e7c5      	b.n	800c800 <quorem+0x94>
 800c874:	6812      	ldr	r2, [r2, #0]
 800c876:	3b04      	subs	r3, #4
 800c878:	2a00      	cmp	r2, #0
 800c87a:	d1ef      	bne.n	800c85c <quorem+0xf0>
 800c87c:	3c01      	subs	r4, #1
 800c87e:	e7ea      	b.n	800c856 <quorem+0xea>
 800c880:	2000      	movs	r0, #0
 800c882:	e7ee      	b.n	800c862 <quorem+0xf6>
 800c884:	0000      	movs	r0, r0
	...

0800c888 <_dtoa_r>:
 800c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88c:	ec57 6b10 	vmov	r6, r7, d0
 800c890:	b097      	sub	sp, #92	; 0x5c
 800c892:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c894:	9106      	str	r1, [sp, #24]
 800c896:	4604      	mov	r4, r0
 800c898:	920b      	str	r2, [sp, #44]	; 0x2c
 800c89a:	9312      	str	r3, [sp, #72]	; 0x48
 800c89c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c8a0:	e9cd 6700 	strd	r6, r7, [sp]
 800c8a4:	b93d      	cbnz	r5, 800c8b6 <_dtoa_r+0x2e>
 800c8a6:	2010      	movs	r0, #16
 800c8a8:	f7fe f97e 	bl	800aba8 <malloc>
 800c8ac:	6260      	str	r0, [r4, #36]	; 0x24
 800c8ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8b2:	6005      	str	r5, [r0, #0]
 800c8b4:	60c5      	str	r5, [r0, #12]
 800c8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8b8:	6819      	ldr	r1, [r3, #0]
 800c8ba:	b151      	cbz	r1, 800c8d2 <_dtoa_r+0x4a>
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	604a      	str	r2, [r1, #4]
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	4093      	lsls	r3, r2
 800c8c4:	608b      	str	r3, [r1, #8]
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f001 f923 	bl	800db12 <_Bfree>
 800c8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	1e3b      	subs	r3, r7, #0
 800c8d4:	bfbb      	ittet	lt
 800c8d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c8da:	9301      	strlt	r3, [sp, #4]
 800c8dc:	2300      	movge	r3, #0
 800c8de:	2201      	movlt	r2, #1
 800c8e0:	bfac      	ite	ge
 800c8e2:	f8c8 3000 	strge.w	r3, [r8]
 800c8e6:	f8c8 2000 	strlt.w	r2, [r8]
 800c8ea:	4baf      	ldr	r3, [pc, #700]	; (800cba8 <_dtoa_r+0x320>)
 800c8ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c8f0:	ea33 0308 	bics.w	r3, r3, r8
 800c8f4:	d114      	bne.n	800c920 <_dtoa_r+0x98>
 800c8f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	9b00      	ldr	r3, [sp, #0]
 800c900:	b923      	cbnz	r3, 800c90c <_dtoa_r+0x84>
 800c902:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c906:	2800      	cmp	r0, #0
 800c908:	f000 8542 	beq.w	800d390 <_dtoa_r+0xb08>
 800c90c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c90e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cbbc <_dtoa_r+0x334>
 800c912:	2b00      	cmp	r3, #0
 800c914:	f000 8544 	beq.w	800d3a0 <_dtoa_r+0xb18>
 800c918:	f10b 0303 	add.w	r3, fp, #3
 800c91c:	f000 bd3e 	b.w	800d39c <_dtoa_r+0xb14>
 800c920:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c924:	2200      	movs	r2, #0
 800c926:	2300      	movs	r3, #0
 800c928:	4630      	mov	r0, r6
 800c92a:	4639      	mov	r1, r7
 800c92c:	f7f4 f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 800c930:	4681      	mov	r9, r0
 800c932:	b168      	cbz	r0, 800c950 <_dtoa_r+0xc8>
 800c934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c936:	2301      	movs	r3, #1
 800c938:	6013      	str	r3, [r2, #0]
 800c93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 8524 	beq.w	800d38a <_dtoa_r+0xb02>
 800c942:	4b9a      	ldr	r3, [pc, #616]	; (800cbac <_dtoa_r+0x324>)
 800c944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c946:	f103 3bff 	add.w	fp, r3, #4294967295
 800c94a:	6013      	str	r3, [r2, #0]
 800c94c:	f000 bd28 	b.w	800d3a0 <_dtoa_r+0xb18>
 800c950:	aa14      	add	r2, sp, #80	; 0x50
 800c952:	a915      	add	r1, sp, #84	; 0x54
 800c954:	ec47 6b10 	vmov	d0, r6, r7
 800c958:	4620      	mov	r0, r4
 800c95a:	f001 fbe7 	bl	800e12c <__d2b>
 800c95e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c962:	9004      	str	r0, [sp, #16]
 800c964:	2d00      	cmp	r5, #0
 800c966:	d07c      	beq.n	800ca62 <_dtoa_r+0x1da>
 800c968:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c96c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c970:	46b2      	mov	sl, r6
 800c972:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c976:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c97a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c97e:	2200      	movs	r2, #0
 800c980:	4b8b      	ldr	r3, [pc, #556]	; (800cbb0 <_dtoa_r+0x328>)
 800c982:	4650      	mov	r0, sl
 800c984:	4659      	mov	r1, fp
 800c986:	f7f3 fc87 	bl	8000298 <__aeabi_dsub>
 800c98a:	a381      	add	r3, pc, #516	; (adr r3, 800cb90 <_dtoa_r+0x308>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f7f3 fe3a 	bl	8000608 <__aeabi_dmul>
 800c994:	a380      	add	r3, pc, #512	; (adr r3, 800cb98 <_dtoa_r+0x310>)
 800c996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99a:	f7f3 fc7f 	bl	800029c <__adddf3>
 800c99e:	4606      	mov	r6, r0
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	460f      	mov	r7, r1
 800c9a4:	f7f3 fdc6 	bl	8000534 <__aeabi_i2d>
 800c9a8:	a37d      	add	r3, pc, #500	; (adr r3, 800cba0 <_dtoa_r+0x318>)
 800c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ae:	f7f3 fe2b 	bl	8000608 <__aeabi_dmul>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	f7f3 fc6f 	bl	800029c <__adddf3>
 800c9be:	4606      	mov	r6, r0
 800c9c0:	460f      	mov	r7, r1
 800c9c2:	f7f4 f8d1 	bl	8000b68 <__aeabi_d2iz>
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	4682      	mov	sl, r0
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	4639      	mov	r1, r7
 800c9d0:	f7f4 f88c 	bl	8000aec <__aeabi_dcmplt>
 800c9d4:	b148      	cbz	r0, 800c9ea <_dtoa_r+0x162>
 800c9d6:	4650      	mov	r0, sl
 800c9d8:	f7f3 fdac 	bl	8000534 <__aeabi_i2d>
 800c9dc:	4632      	mov	r2, r6
 800c9de:	463b      	mov	r3, r7
 800c9e0:	f7f4 f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9e4:	b908      	cbnz	r0, 800c9ea <_dtoa_r+0x162>
 800c9e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9ea:	f1ba 0f16 	cmp.w	sl, #22
 800c9ee:	d859      	bhi.n	800caa4 <_dtoa_r+0x21c>
 800c9f0:	4970      	ldr	r1, [pc, #448]	; (800cbb4 <_dtoa_r+0x32c>)
 800c9f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c9f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9fe:	f7f4 f893 	bl	8000b28 <__aeabi_dcmpgt>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d050      	beq.n	800caa8 <_dtoa_r+0x220>
 800ca06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca10:	1b5d      	subs	r5, r3, r5
 800ca12:	f1b5 0801 	subs.w	r8, r5, #1
 800ca16:	bf49      	itett	mi
 800ca18:	f1c5 0301 	rsbmi	r3, r5, #1
 800ca1c:	2300      	movpl	r3, #0
 800ca1e:	9305      	strmi	r3, [sp, #20]
 800ca20:	f04f 0800 	movmi.w	r8, #0
 800ca24:	bf58      	it	pl
 800ca26:	9305      	strpl	r3, [sp, #20]
 800ca28:	f1ba 0f00 	cmp.w	sl, #0
 800ca2c:	db3e      	blt.n	800caac <_dtoa_r+0x224>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	44d0      	add	r8, sl
 800ca32:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ca36:	9307      	str	r3, [sp, #28]
 800ca38:	9b06      	ldr	r3, [sp, #24]
 800ca3a:	2b09      	cmp	r3, #9
 800ca3c:	f200 8090 	bhi.w	800cb60 <_dtoa_r+0x2d8>
 800ca40:	2b05      	cmp	r3, #5
 800ca42:	bfc4      	itt	gt
 800ca44:	3b04      	subgt	r3, #4
 800ca46:	9306      	strgt	r3, [sp, #24]
 800ca48:	9b06      	ldr	r3, [sp, #24]
 800ca4a:	f1a3 0302 	sub.w	r3, r3, #2
 800ca4e:	bfcc      	ite	gt
 800ca50:	2500      	movgt	r5, #0
 800ca52:	2501      	movle	r5, #1
 800ca54:	2b03      	cmp	r3, #3
 800ca56:	f200 808f 	bhi.w	800cb78 <_dtoa_r+0x2f0>
 800ca5a:	e8df f003 	tbb	[pc, r3]
 800ca5e:	7f7d      	.short	0x7f7d
 800ca60:	7131      	.short	0x7131
 800ca62:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ca66:	441d      	add	r5, r3
 800ca68:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ca6c:	2820      	cmp	r0, #32
 800ca6e:	dd13      	ble.n	800ca98 <_dtoa_r+0x210>
 800ca70:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ca74:	9b00      	ldr	r3, [sp, #0]
 800ca76:	fa08 f800 	lsl.w	r8, r8, r0
 800ca7a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ca7e:	fa23 f000 	lsr.w	r0, r3, r0
 800ca82:	ea48 0000 	orr.w	r0, r8, r0
 800ca86:	f7f3 fd45 	bl	8000514 <__aeabi_ui2d>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	4682      	mov	sl, r0
 800ca8e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ca92:	3d01      	subs	r5, #1
 800ca94:	9313      	str	r3, [sp, #76]	; 0x4c
 800ca96:	e772      	b.n	800c97e <_dtoa_r+0xf6>
 800ca98:	9b00      	ldr	r3, [sp, #0]
 800ca9a:	f1c0 0020 	rsb	r0, r0, #32
 800ca9e:	fa03 f000 	lsl.w	r0, r3, r0
 800caa2:	e7f0      	b.n	800ca86 <_dtoa_r+0x1fe>
 800caa4:	2301      	movs	r3, #1
 800caa6:	e7b1      	b.n	800ca0c <_dtoa_r+0x184>
 800caa8:	900f      	str	r0, [sp, #60]	; 0x3c
 800caaa:	e7b0      	b.n	800ca0e <_dtoa_r+0x186>
 800caac:	9b05      	ldr	r3, [sp, #20]
 800caae:	eba3 030a 	sub.w	r3, r3, sl
 800cab2:	9305      	str	r3, [sp, #20]
 800cab4:	f1ca 0300 	rsb	r3, sl, #0
 800cab8:	9307      	str	r3, [sp, #28]
 800caba:	2300      	movs	r3, #0
 800cabc:	930e      	str	r3, [sp, #56]	; 0x38
 800cabe:	e7bb      	b.n	800ca38 <_dtoa_r+0x1b0>
 800cac0:	2301      	movs	r3, #1
 800cac2:	930a      	str	r3, [sp, #40]	; 0x28
 800cac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	dd59      	ble.n	800cb7e <_dtoa_r+0x2f6>
 800caca:	9302      	str	r3, [sp, #8]
 800cacc:	4699      	mov	r9, r3
 800cace:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cad0:	2200      	movs	r2, #0
 800cad2:	6072      	str	r2, [r6, #4]
 800cad4:	2204      	movs	r2, #4
 800cad6:	f102 0014 	add.w	r0, r2, #20
 800cada:	4298      	cmp	r0, r3
 800cadc:	6871      	ldr	r1, [r6, #4]
 800cade:	d953      	bls.n	800cb88 <_dtoa_r+0x300>
 800cae0:	4620      	mov	r0, r4
 800cae2:	f000 ffe2 	bl	800daaa <_Balloc>
 800cae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cae8:	6030      	str	r0, [r6, #0]
 800caea:	f1b9 0f0e 	cmp.w	r9, #14
 800caee:	f8d3 b000 	ldr.w	fp, [r3]
 800caf2:	f200 80e6 	bhi.w	800ccc2 <_dtoa_r+0x43a>
 800caf6:	2d00      	cmp	r5, #0
 800caf8:	f000 80e3 	beq.w	800ccc2 <_dtoa_r+0x43a>
 800cafc:	ed9d 7b00 	vldr	d7, [sp]
 800cb00:	f1ba 0f00 	cmp.w	sl, #0
 800cb04:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cb08:	dd74      	ble.n	800cbf4 <_dtoa_r+0x36c>
 800cb0a:	4a2a      	ldr	r2, [pc, #168]	; (800cbb4 <_dtoa_r+0x32c>)
 800cb0c:	f00a 030f 	and.w	r3, sl, #15
 800cb10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb14:	ed93 7b00 	vldr	d7, [r3]
 800cb18:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cb1c:	06f0      	lsls	r0, r6, #27
 800cb1e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cb22:	d565      	bpl.n	800cbf0 <_dtoa_r+0x368>
 800cb24:	4b24      	ldr	r3, [pc, #144]	; (800cbb8 <_dtoa_r+0x330>)
 800cb26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb2e:	f7f3 fe95 	bl	800085c <__aeabi_ddiv>
 800cb32:	e9cd 0100 	strd	r0, r1, [sp]
 800cb36:	f006 060f 	and.w	r6, r6, #15
 800cb3a:	2503      	movs	r5, #3
 800cb3c:	4f1e      	ldr	r7, [pc, #120]	; (800cbb8 <_dtoa_r+0x330>)
 800cb3e:	e04c      	b.n	800cbda <_dtoa_r+0x352>
 800cb40:	2301      	movs	r3, #1
 800cb42:	930a      	str	r3, [sp, #40]	; 0x28
 800cb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb46:	4453      	add	r3, sl
 800cb48:	f103 0901 	add.w	r9, r3, #1
 800cb4c:	9302      	str	r3, [sp, #8]
 800cb4e:	464b      	mov	r3, r9
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	bfb8      	it	lt
 800cb54:	2301      	movlt	r3, #1
 800cb56:	e7ba      	b.n	800cace <_dtoa_r+0x246>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e7b2      	b.n	800cac2 <_dtoa_r+0x23a>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	e7f0      	b.n	800cb42 <_dtoa_r+0x2ba>
 800cb60:	2501      	movs	r5, #1
 800cb62:	2300      	movs	r3, #0
 800cb64:	9306      	str	r3, [sp, #24]
 800cb66:	950a      	str	r5, [sp, #40]	; 0x28
 800cb68:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6c:	9302      	str	r3, [sp, #8]
 800cb6e:	4699      	mov	r9, r3
 800cb70:	2200      	movs	r2, #0
 800cb72:	2312      	movs	r3, #18
 800cb74:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb76:	e7aa      	b.n	800cace <_dtoa_r+0x246>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	930a      	str	r3, [sp, #40]	; 0x28
 800cb7c:	e7f4      	b.n	800cb68 <_dtoa_r+0x2e0>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	9302      	str	r3, [sp, #8]
 800cb82:	4699      	mov	r9, r3
 800cb84:	461a      	mov	r2, r3
 800cb86:	e7f5      	b.n	800cb74 <_dtoa_r+0x2ec>
 800cb88:	3101      	adds	r1, #1
 800cb8a:	6071      	str	r1, [r6, #4]
 800cb8c:	0052      	lsls	r2, r2, #1
 800cb8e:	e7a2      	b.n	800cad6 <_dtoa_r+0x24e>
 800cb90:	636f4361 	.word	0x636f4361
 800cb94:	3fd287a7 	.word	0x3fd287a7
 800cb98:	8b60c8b3 	.word	0x8b60c8b3
 800cb9c:	3fc68a28 	.word	0x3fc68a28
 800cba0:	509f79fb 	.word	0x509f79fb
 800cba4:	3fd34413 	.word	0x3fd34413
 800cba8:	7ff00000 	.word	0x7ff00000
 800cbac:	0800e999 	.word	0x0800e999
 800cbb0:	3ff80000 	.word	0x3ff80000
 800cbb4:	0800ea58 	.word	0x0800ea58
 800cbb8:	0800ea30 	.word	0x0800ea30
 800cbbc:	0800ea21 	.word	0x0800ea21
 800cbc0:	07f1      	lsls	r1, r6, #31
 800cbc2:	d508      	bpl.n	800cbd6 <_dtoa_r+0x34e>
 800cbc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cbc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbcc:	f7f3 fd1c 	bl	8000608 <__aeabi_dmul>
 800cbd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cbd4:	3501      	adds	r5, #1
 800cbd6:	1076      	asrs	r6, r6, #1
 800cbd8:	3708      	adds	r7, #8
 800cbda:	2e00      	cmp	r6, #0
 800cbdc:	d1f0      	bne.n	800cbc0 <_dtoa_r+0x338>
 800cbde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cbe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbe6:	f7f3 fe39 	bl	800085c <__aeabi_ddiv>
 800cbea:	e9cd 0100 	strd	r0, r1, [sp]
 800cbee:	e01a      	b.n	800cc26 <_dtoa_r+0x39e>
 800cbf0:	2502      	movs	r5, #2
 800cbf2:	e7a3      	b.n	800cb3c <_dtoa_r+0x2b4>
 800cbf4:	f000 80a0 	beq.w	800cd38 <_dtoa_r+0x4b0>
 800cbf8:	f1ca 0600 	rsb	r6, sl, #0
 800cbfc:	4b9f      	ldr	r3, [pc, #636]	; (800ce7c <_dtoa_r+0x5f4>)
 800cbfe:	4fa0      	ldr	r7, [pc, #640]	; (800ce80 <_dtoa_r+0x5f8>)
 800cc00:	f006 020f 	and.w	r2, r6, #15
 800cc04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc10:	f7f3 fcfa 	bl	8000608 <__aeabi_dmul>
 800cc14:	e9cd 0100 	strd	r0, r1, [sp]
 800cc18:	1136      	asrs	r6, r6, #4
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	2502      	movs	r5, #2
 800cc1e:	2e00      	cmp	r6, #0
 800cc20:	d17f      	bne.n	800cd22 <_dtoa_r+0x49a>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1e1      	bne.n	800cbea <_dtoa_r+0x362>
 800cc26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 8087 	beq.w	800cd3c <_dtoa_r+0x4b4>
 800cc2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cc32:	2200      	movs	r2, #0
 800cc34:	4b93      	ldr	r3, [pc, #588]	; (800ce84 <_dtoa_r+0x5fc>)
 800cc36:	4630      	mov	r0, r6
 800cc38:	4639      	mov	r1, r7
 800cc3a:	f7f3 ff57 	bl	8000aec <__aeabi_dcmplt>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d07c      	beq.n	800cd3c <_dtoa_r+0x4b4>
 800cc42:	f1b9 0f00 	cmp.w	r9, #0
 800cc46:	d079      	beq.n	800cd3c <_dtoa_r+0x4b4>
 800cc48:	9b02      	ldr	r3, [sp, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	dd35      	ble.n	800ccba <_dtoa_r+0x432>
 800cc4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cc52:	9308      	str	r3, [sp, #32]
 800cc54:	4639      	mov	r1, r7
 800cc56:	2200      	movs	r2, #0
 800cc58:	4b8b      	ldr	r3, [pc, #556]	; (800ce88 <_dtoa_r+0x600>)
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f7f3 fcd4 	bl	8000608 <__aeabi_dmul>
 800cc60:	e9cd 0100 	strd	r0, r1, [sp]
 800cc64:	9f02      	ldr	r7, [sp, #8]
 800cc66:	3501      	adds	r5, #1
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f7f3 fc63 	bl	8000534 <__aeabi_i2d>
 800cc6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc72:	f7f3 fcc9 	bl	8000608 <__aeabi_dmul>
 800cc76:	2200      	movs	r2, #0
 800cc78:	4b84      	ldr	r3, [pc, #528]	; (800ce8c <_dtoa_r+0x604>)
 800cc7a:	f7f3 fb0f 	bl	800029c <__adddf3>
 800cc7e:	4605      	mov	r5, r0
 800cc80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cc84:	2f00      	cmp	r7, #0
 800cc86:	d15d      	bne.n	800cd44 <_dtoa_r+0x4bc>
 800cc88:	2200      	movs	r2, #0
 800cc8a:	4b81      	ldr	r3, [pc, #516]	; (800ce90 <_dtoa_r+0x608>)
 800cc8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc90:	f7f3 fb02 	bl	8000298 <__aeabi_dsub>
 800cc94:	462a      	mov	r2, r5
 800cc96:	4633      	mov	r3, r6
 800cc98:	e9cd 0100 	strd	r0, r1, [sp]
 800cc9c:	f7f3 ff44 	bl	8000b28 <__aeabi_dcmpgt>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	f040 8288 	bne.w	800d1b6 <_dtoa_r+0x92e>
 800cca6:	462a      	mov	r2, r5
 800cca8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ccac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccb0:	f7f3 ff1c 	bl	8000aec <__aeabi_dcmplt>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	f040 827c 	bne.w	800d1b2 <_dtoa_r+0x92a>
 800ccba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ccbe:	e9cd 2300 	strd	r2, r3, [sp]
 800ccc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f2c0 8150 	blt.w	800cf6a <_dtoa_r+0x6e2>
 800ccca:	f1ba 0f0e 	cmp.w	sl, #14
 800ccce:	f300 814c 	bgt.w	800cf6a <_dtoa_r+0x6e2>
 800ccd2:	4b6a      	ldr	r3, [pc, #424]	; (800ce7c <_dtoa_r+0x5f4>)
 800ccd4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ccd8:	ed93 7b00 	vldr	d7, [r3]
 800ccdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cce4:	f280 80d8 	bge.w	800ce98 <_dtoa_r+0x610>
 800cce8:	f1b9 0f00 	cmp.w	r9, #0
 800ccec:	f300 80d4 	bgt.w	800ce98 <_dtoa_r+0x610>
 800ccf0:	f040 825e 	bne.w	800d1b0 <_dtoa_r+0x928>
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4b66      	ldr	r3, [pc, #408]	; (800ce90 <_dtoa_r+0x608>)
 800ccf8:	ec51 0b17 	vmov	r0, r1, d7
 800ccfc:	f7f3 fc84 	bl	8000608 <__aeabi_dmul>
 800cd00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd04:	f7f3 ff06 	bl	8000b14 <__aeabi_dcmpge>
 800cd08:	464f      	mov	r7, r9
 800cd0a:	464e      	mov	r6, r9
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	f040 8234 	bne.w	800d17a <_dtoa_r+0x8f2>
 800cd12:	2331      	movs	r3, #49	; 0x31
 800cd14:	f10b 0501 	add.w	r5, fp, #1
 800cd18:	f88b 3000 	strb.w	r3, [fp]
 800cd1c:	f10a 0a01 	add.w	sl, sl, #1
 800cd20:	e22f      	b.n	800d182 <_dtoa_r+0x8fa>
 800cd22:	07f2      	lsls	r2, r6, #31
 800cd24:	d505      	bpl.n	800cd32 <_dtoa_r+0x4aa>
 800cd26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd2a:	f7f3 fc6d 	bl	8000608 <__aeabi_dmul>
 800cd2e:	3501      	adds	r5, #1
 800cd30:	2301      	movs	r3, #1
 800cd32:	1076      	asrs	r6, r6, #1
 800cd34:	3708      	adds	r7, #8
 800cd36:	e772      	b.n	800cc1e <_dtoa_r+0x396>
 800cd38:	2502      	movs	r5, #2
 800cd3a:	e774      	b.n	800cc26 <_dtoa_r+0x39e>
 800cd3c:	f8cd a020 	str.w	sl, [sp, #32]
 800cd40:	464f      	mov	r7, r9
 800cd42:	e791      	b.n	800cc68 <_dtoa_r+0x3e0>
 800cd44:	4b4d      	ldr	r3, [pc, #308]	; (800ce7c <_dtoa_r+0x5f4>)
 800cd46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cd4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d047      	beq.n	800cde4 <_dtoa_r+0x55c>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	2000      	movs	r0, #0
 800cd5a:	494e      	ldr	r1, [pc, #312]	; (800ce94 <_dtoa_r+0x60c>)
 800cd5c:	f7f3 fd7e 	bl	800085c <__aeabi_ddiv>
 800cd60:	462a      	mov	r2, r5
 800cd62:	4633      	mov	r3, r6
 800cd64:	f7f3 fa98 	bl	8000298 <__aeabi_dsub>
 800cd68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cd6c:	465d      	mov	r5, fp
 800cd6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd72:	f7f3 fef9 	bl	8000b68 <__aeabi_d2iz>
 800cd76:	4606      	mov	r6, r0
 800cd78:	f7f3 fbdc 	bl	8000534 <__aeabi_i2d>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd84:	f7f3 fa88 	bl	8000298 <__aeabi_dsub>
 800cd88:	3630      	adds	r6, #48	; 0x30
 800cd8a:	f805 6b01 	strb.w	r6, [r5], #1
 800cd8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cd92:	e9cd 0100 	strd	r0, r1, [sp]
 800cd96:	f7f3 fea9 	bl	8000aec <__aeabi_dcmplt>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d163      	bne.n	800ce66 <_dtoa_r+0x5de>
 800cd9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cda2:	2000      	movs	r0, #0
 800cda4:	4937      	ldr	r1, [pc, #220]	; (800ce84 <_dtoa_r+0x5fc>)
 800cda6:	f7f3 fa77 	bl	8000298 <__aeabi_dsub>
 800cdaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cdae:	f7f3 fe9d 	bl	8000aec <__aeabi_dcmplt>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	f040 80b7 	bne.w	800cf26 <_dtoa_r+0x69e>
 800cdb8:	eba5 030b 	sub.w	r3, r5, fp
 800cdbc:	429f      	cmp	r7, r3
 800cdbe:	f77f af7c 	ble.w	800ccba <_dtoa_r+0x432>
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	4b30      	ldr	r3, [pc, #192]	; (800ce88 <_dtoa_r+0x600>)
 800cdc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cdca:	f7f3 fc1d 	bl	8000608 <__aeabi_dmul>
 800cdce:	2200      	movs	r2, #0
 800cdd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cdd4:	4b2c      	ldr	r3, [pc, #176]	; (800ce88 <_dtoa_r+0x600>)
 800cdd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdda:	f7f3 fc15 	bl	8000608 <__aeabi_dmul>
 800cdde:	e9cd 0100 	strd	r0, r1, [sp]
 800cde2:	e7c4      	b.n	800cd6e <_dtoa_r+0x4e6>
 800cde4:	462a      	mov	r2, r5
 800cde6:	4633      	mov	r3, r6
 800cde8:	f7f3 fc0e 	bl	8000608 <__aeabi_dmul>
 800cdec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cdf0:	eb0b 0507 	add.w	r5, fp, r7
 800cdf4:	465e      	mov	r6, fp
 800cdf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdfa:	f7f3 feb5 	bl	8000b68 <__aeabi_d2iz>
 800cdfe:	4607      	mov	r7, r0
 800ce00:	f7f3 fb98 	bl	8000534 <__aeabi_i2d>
 800ce04:	3730      	adds	r7, #48	; 0x30
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce0e:	f7f3 fa43 	bl	8000298 <__aeabi_dsub>
 800ce12:	f806 7b01 	strb.w	r7, [r6], #1
 800ce16:	42ae      	cmp	r6, r5
 800ce18:	e9cd 0100 	strd	r0, r1, [sp]
 800ce1c:	f04f 0200 	mov.w	r2, #0
 800ce20:	d126      	bne.n	800ce70 <_dtoa_r+0x5e8>
 800ce22:	4b1c      	ldr	r3, [pc, #112]	; (800ce94 <_dtoa_r+0x60c>)
 800ce24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ce28:	f7f3 fa38 	bl	800029c <__adddf3>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	460b      	mov	r3, r1
 800ce30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce34:	f7f3 fe78 	bl	8000b28 <__aeabi_dcmpgt>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d174      	bne.n	800cf26 <_dtoa_r+0x69e>
 800ce3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ce40:	2000      	movs	r0, #0
 800ce42:	4914      	ldr	r1, [pc, #80]	; (800ce94 <_dtoa_r+0x60c>)
 800ce44:	f7f3 fa28 	bl	8000298 <__aeabi_dsub>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce50:	f7f3 fe4c 	bl	8000aec <__aeabi_dcmplt>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	f43f af30 	beq.w	800ccba <_dtoa_r+0x432>
 800ce5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ce5e:	2b30      	cmp	r3, #48	; 0x30
 800ce60:	f105 32ff 	add.w	r2, r5, #4294967295
 800ce64:	d002      	beq.n	800ce6c <_dtoa_r+0x5e4>
 800ce66:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ce6a:	e04a      	b.n	800cf02 <_dtoa_r+0x67a>
 800ce6c:	4615      	mov	r5, r2
 800ce6e:	e7f4      	b.n	800ce5a <_dtoa_r+0x5d2>
 800ce70:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <_dtoa_r+0x600>)
 800ce72:	f7f3 fbc9 	bl	8000608 <__aeabi_dmul>
 800ce76:	e9cd 0100 	strd	r0, r1, [sp]
 800ce7a:	e7bc      	b.n	800cdf6 <_dtoa_r+0x56e>
 800ce7c:	0800ea58 	.word	0x0800ea58
 800ce80:	0800ea30 	.word	0x0800ea30
 800ce84:	3ff00000 	.word	0x3ff00000
 800ce88:	40240000 	.word	0x40240000
 800ce8c:	401c0000 	.word	0x401c0000
 800ce90:	40140000 	.word	0x40140000
 800ce94:	3fe00000 	.word	0x3fe00000
 800ce98:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ce9c:	465d      	mov	r5, fp
 800ce9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cea2:	4630      	mov	r0, r6
 800cea4:	4639      	mov	r1, r7
 800cea6:	f7f3 fcd9 	bl	800085c <__aeabi_ddiv>
 800ceaa:	f7f3 fe5d 	bl	8000b68 <__aeabi_d2iz>
 800ceae:	4680      	mov	r8, r0
 800ceb0:	f7f3 fb40 	bl	8000534 <__aeabi_i2d>
 800ceb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ceb8:	f7f3 fba6 	bl	8000608 <__aeabi_dmul>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	4630      	mov	r0, r6
 800cec2:	4639      	mov	r1, r7
 800cec4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cec8:	f7f3 f9e6 	bl	8000298 <__aeabi_dsub>
 800cecc:	f805 6b01 	strb.w	r6, [r5], #1
 800ced0:	eba5 060b 	sub.w	r6, r5, fp
 800ced4:	45b1      	cmp	r9, r6
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	d139      	bne.n	800cf50 <_dtoa_r+0x6c8>
 800cedc:	f7f3 f9de 	bl	800029c <__adddf3>
 800cee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cee4:	4606      	mov	r6, r0
 800cee6:	460f      	mov	r7, r1
 800cee8:	f7f3 fe1e 	bl	8000b28 <__aeabi_dcmpgt>
 800ceec:	b9c8      	cbnz	r0, 800cf22 <_dtoa_r+0x69a>
 800ceee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cef2:	4630      	mov	r0, r6
 800cef4:	4639      	mov	r1, r7
 800cef6:	f7f3 fdef 	bl	8000ad8 <__aeabi_dcmpeq>
 800cefa:	b110      	cbz	r0, 800cf02 <_dtoa_r+0x67a>
 800cefc:	f018 0f01 	tst.w	r8, #1
 800cf00:	d10f      	bne.n	800cf22 <_dtoa_r+0x69a>
 800cf02:	9904      	ldr	r1, [sp, #16]
 800cf04:	4620      	mov	r0, r4
 800cf06:	f000 fe04 	bl	800db12 <_Bfree>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf0e:	702b      	strb	r3, [r5, #0]
 800cf10:	f10a 0301 	add.w	r3, sl, #1
 800cf14:	6013      	str	r3, [r2, #0]
 800cf16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f000 8241 	beq.w	800d3a0 <_dtoa_r+0xb18>
 800cf1e:	601d      	str	r5, [r3, #0]
 800cf20:	e23e      	b.n	800d3a0 <_dtoa_r+0xb18>
 800cf22:	f8cd a020 	str.w	sl, [sp, #32]
 800cf26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf2a:	2a39      	cmp	r2, #57	; 0x39
 800cf2c:	f105 33ff 	add.w	r3, r5, #4294967295
 800cf30:	d108      	bne.n	800cf44 <_dtoa_r+0x6bc>
 800cf32:	459b      	cmp	fp, r3
 800cf34:	d10a      	bne.n	800cf4c <_dtoa_r+0x6c4>
 800cf36:	9b08      	ldr	r3, [sp, #32]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	9308      	str	r3, [sp, #32]
 800cf3c:	2330      	movs	r3, #48	; 0x30
 800cf3e:	f88b 3000 	strb.w	r3, [fp]
 800cf42:	465b      	mov	r3, fp
 800cf44:	781a      	ldrb	r2, [r3, #0]
 800cf46:	3201      	adds	r2, #1
 800cf48:	701a      	strb	r2, [r3, #0]
 800cf4a:	e78c      	b.n	800ce66 <_dtoa_r+0x5de>
 800cf4c:	461d      	mov	r5, r3
 800cf4e:	e7ea      	b.n	800cf26 <_dtoa_r+0x69e>
 800cf50:	2200      	movs	r2, #0
 800cf52:	4b9b      	ldr	r3, [pc, #620]	; (800d1c0 <_dtoa_r+0x938>)
 800cf54:	f7f3 fb58 	bl	8000608 <__aeabi_dmul>
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	460f      	mov	r7, r1
 800cf60:	f7f3 fdba 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d09a      	beq.n	800ce9e <_dtoa_r+0x616>
 800cf68:	e7cb      	b.n	800cf02 <_dtoa_r+0x67a>
 800cf6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf6c:	2a00      	cmp	r2, #0
 800cf6e:	f000 808b 	beq.w	800d088 <_dtoa_r+0x800>
 800cf72:	9a06      	ldr	r2, [sp, #24]
 800cf74:	2a01      	cmp	r2, #1
 800cf76:	dc6e      	bgt.n	800d056 <_dtoa_r+0x7ce>
 800cf78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cf7a:	2a00      	cmp	r2, #0
 800cf7c:	d067      	beq.n	800d04e <_dtoa_r+0x7c6>
 800cf7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf82:	9f07      	ldr	r7, [sp, #28]
 800cf84:	9d05      	ldr	r5, [sp, #20]
 800cf86:	9a05      	ldr	r2, [sp, #20]
 800cf88:	2101      	movs	r1, #1
 800cf8a:	441a      	add	r2, r3
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	9205      	str	r2, [sp, #20]
 800cf90:	4498      	add	r8, r3
 800cf92:	f000 fe9c 	bl	800dcce <__i2b>
 800cf96:	4606      	mov	r6, r0
 800cf98:	2d00      	cmp	r5, #0
 800cf9a:	dd0c      	ble.n	800cfb6 <_dtoa_r+0x72e>
 800cf9c:	f1b8 0f00 	cmp.w	r8, #0
 800cfa0:	dd09      	ble.n	800cfb6 <_dtoa_r+0x72e>
 800cfa2:	4545      	cmp	r5, r8
 800cfa4:	9a05      	ldr	r2, [sp, #20]
 800cfa6:	462b      	mov	r3, r5
 800cfa8:	bfa8      	it	ge
 800cfaa:	4643      	movge	r3, r8
 800cfac:	1ad2      	subs	r2, r2, r3
 800cfae:	9205      	str	r2, [sp, #20]
 800cfb0:	1aed      	subs	r5, r5, r3
 800cfb2:	eba8 0803 	sub.w	r8, r8, r3
 800cfb6:	9b07      	ldr	r3, [sp, #28]
 800cfb8:	b1eb      	cbz	r3, 800cff6 <_dtoa_r+0x76e>
 800cfba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d067      	beq.n	800d090 <_dtoa_r+0x808>
 800cfc0:	b18f      	cbz	r7, 800cfe6 <_dtoa_r+0x75e>
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	463a      	mov	r2, r7
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 ff20 	bl	800de0c <__pow5mult>
 800cfcc:	9a04      	ldr	r2, [sp, #16]
 800cfce:	4601      	mov	r1, r0
 800cfd0:	4606      	mov	r6, r0
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f000 fe84 	bl	800dce0 <__multiply>
 800cfd8:	9904      	ldr	r1, [sp, #16]
 800cfda:	9008      	str	r0, [sp, #32]
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f000 fd98 	bl	800db12 <_Bfree>
 800cfe2:	9b08      	ldr	r3, [sp, #32]
 800cfe4:	9304      	str	r3, [sp, #16]
 800cfe6:	9b07      	ldr	r3, [sp, #28]
 800cfe8:	1bda      	subs	r2, r3, r7
 800cfea:	d004      	beq.n	800cff6 <_dtoa_r+0x76e>
 800cfec:	9904      	ldr	r1, [sp, #16]
 800cfee:	4620      	mov	r0, r4
 800cff0:	f000 ff0c 	bl	800de0c <__pow5mult>
 800cff4:	9004      	str	r0, [sp, #16]
 800cff6:	2101      	movs	r1, #1
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fe68 	bl	800dcce <__i2b>
 800cffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d000:	4607      	mov	r7, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 81d0 	beq.w	800d3a8 <_dtoa_r+0xb20>
 800d008:	461a      	mov	r2, r3
 800d00a:	4601      	mov	r1, r0
 800d00c:	4620      	mov	r0, r4
 800d00e:	f000 fefd 	bl	800de0c <__pow5mult>
 800d012:	9b06      	ldr	r3, [sp, #24]
 800d014:	2b01      	cmp	r3, #1
 800d016:	4607      	mov	r7, r0
 800d018:	dc40      	bgt.n	800d09c <_dtoa_r+0x814>
 800d01a:	9b00      	ldr	r3, [sp, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d139      	bne.n	800d094 <_dtoa_r+0x80c>
 800d020:	9b01      	ldr	r3, [sp, #4]
 800d022:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d026:	2b00      	cmp	r3, #0
 800d028:	d136      	bne.n	800d098 <_dtoa_r+0x810>
 800d02a:	9b01      	ldr	r3, [sp, #4]
 800d02c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d030:	0d1b      	lsrs	r3, r3, #20
 800d032:	051b      	lsls	r3, r3, #20
 800d034:	b12b      	cbz	r3, 800d042 <_dtoa_r+0x7ba>
 800d036:	9b05      	ldr	r3, [sp, #20]
 800d038:	3301      	adds	r3, #1
 800d03a:	9305      	str	r3, [sp, #20]
 800d03c:	f108 0801 	add.w	r8, r8, #1
 800d040:	2301      	movs	r3, #1
 800d042:	9307      	str	r3, [sp, #28]
 800d044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d046:	2b00      	cmp	r3, #0
 800d048:	d12a      	bne.n	800d0a0 <_dtoa_r+0x818>
 800d04a:	2001      	movs	r0, #1
 800d04c:	e030      	b.n	800d0b0 <_dtoa_r+0x828>
 800d04e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d050:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d054:	e795      	b.n	800cf82 <_dtoa_r+0x6fa>
 800d056:	9b07      	ldr	r3, [sp, #28]
 800d058:	f109 37ff 	add.w	r7, r9, #4294967295
 800d05c:	42bb      	cmp	r3, r7
 800d05e:	bfbf      	itttt	lt
 800d060:	9b07      	ldrlt	r3, [sp, #28]
 800d062:	9707      	strlt	r7, [sp, #28]
 800d064:	1afa      	sublt	r2, r7, r3
 800d066:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d068:	bfbb      	ittet	lt
 800d06a:	189b      	addlt	r3, r3, r2
 800d06c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d06e:	1bdf      	subge	r7, r3, r7
 800d070:	2700      	movlt	r7, #0
 800d072:	f1b9 0f00 	cmp.w	r9, #0
 800d076:	bfb5      	itete	lt
 800d078:	9b05      	ldrlt	r3, [sp, #20]
 800d07a:	9d05      	ldrge	r5, [sp, #20]
 800d07c:	eba3 0509 	sublt.w	r5, r3, r9
 800d080:	464b      	movge	r3, r9
 800d082:	bfb8      	it	lt
 800d084:	2300      	movlt	r3, #0
 800d086:	e77e      	b.n	800cf86 <_dtoa_r+0x6fe>
 800d088:	9f07      	ldr	r7, [sp, #28]
 800d08a:	9d05      	ldr	r5, [sp, #20]
 800d08c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d08e:	e783      	b.n	800cf98 <_dtoa_r+0x710>
 800d090:	9a07      	ldr	r2, [sp, #28]
 800d092:	e7ab      	b.n	800cfec <_dtoa_r+0x764>
 800d094:	2300      	movs	r3, #0
 800d096:	e7d4      	b.n	800d042 <_dtoa_r+0x7ba>
 800d098:	9b00      	ldr	r3, [sp, #0]
 800d09a:	e7d2      	b.n	800d042 <_dtoa_r+0x7ba>
 800d09c:	2300      	movs	r3, #0
 800d09e:	9307      	str	r3, [sp, #28]
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d0a6:	6918      	ldr	r0, [r3, #16]
 800d0a8:	f000 fdc3 	bl	800dc32 <__hi0bits>
 800d0ac:	f1c0 0020 	rsb	r0, r0, #32
 800d0b0:	4440      	add	r0, r8
 800d0b2:	f010 001f 	ands.w	r0, r0, #31
 800d0b6:	d047      	beq.n	800d148 <_dtoa_r+0x8c0>
 800d0b8:	f1c0 0320 	rsb	r3, r0, #32
 800d0bc:	2b04      	cmp	r3, #4
 800d0be:	dd3b      	ble.n	800d138 <_dtoa_r+0x8b0>
 800d0c0:	9b05      	ldr	r3, [sp, #20]
 800d0c2:	f1c0 001c 	rsb	r0, r0, #28
 800d0c6:	4403      	add	r3, r0
 800d0c8:	9305      	str	r3, [sp, #20]
 800d0ca:	4405      	add	r5, r0
 800d0cc:	4480      	add	r8, r0
 800d0ce:	9b05      	ldr	r3, [sp, #20]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	dd05      	ble.n	800d0e0 <_dtoa_r+0x858>
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	9904      	ldr	r1, [sp, #16]
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f000 fee5 	bl	800dea8 <__lshift>
 800d0de:	9004      	str	r0, [sp, #16]
 800d0e0:	f1b8 0f00 	cmp.w	r8, #0
 800d0e4:	dd05      	ble.n	800d0f2 <_dtoa_r+0x86a>
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	4642      	mov	r2, r8
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f000 fedc 	bl	800dea8 <__lshift>
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0f4:	b353      	cbz	r3, 800d14c <_dtoa_r+0x8c4>
 800d0f6:	4639      	mov	r1, r7
 800d0f8:	9804      	ldr	r0, [sp, #16]
 800d0fa:	f000 ff29 	bl	800df50 <__mcmp>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	da24      	bge.n	800d14c <_dtoa_r+0x8c4>
 800d102:	2300      	movs	r3, #0
 800d104:	220a      	movs	r2, #10
 800d106:	9904      	ldr	r1, [sp, #16]
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 fd19 	bl	800db40 <__multadd>
 800d10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d110:	9004      	str	r0, [sp, #16]
 800d112:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 814d 	beq.w	800d3b6 <_dtoa_r+0xb2e>
 800d11c:	2300      	movs	r3, #0
 800d11e:	4631      	mov	r1, r6
 800d120:	220a      	movs	r2, #10
 800d122:	4620      	mov	r0, r4
 800d124:	f000 fd0c 	bl	800db40 <__multadd>
 800d128:	9b02      	ldr	r3, [sp, #8]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	4606      	mov	r6, r0
 800d12e:	dc4f      	bgt.n	800d1d0 <_dtoa_r+0x948>
 800d130:	9b06      	ldr	r3, [sp, #24]
 800d132:	2b02      	cmp	r3, #2
 800d134:	dd4c      	ble.n	800d1d0 <_dtoa_r+0x948>
 800d136:	e011      	b.n	800d15c <_dtoa_r+0x8d4>
 800d138:	d0c9      	beq.n	800d0ce <_dtoa_r+0x846>
 800d13a:	9a05      	ldr	r2, [sp, #20]
 800d13c:	331c      	adds	r3, #28
 800d13e:	441a      	add	r2, r3
 800d140:	9205      	str	r2, [sp, #20]
 800d142:	441d      	add	r5, r3
 800d144:	4498      	add	r8, r3
 800d146:	e7c2      	b.n	800d0ce <_dtoa_r+0x846>
 800d148:	4603      	mov	r3, r0
 800d14a:	e7f6      	b.n	800d13a <_dtoa_r+0x8b2>
 800d14c:	f1b9 0f00 	cmp.w	r9, #0
 800d150:	dc38      	bgt.n	800d1c4 <_dtoa_r+0x93c>
 800d152:	9b06      	ldr	r3, [sp, #24]
 800d154:	2b02      	cmp	r3, #2
 800d156:	dd35      	ble.n	800d1c4 <_dtoa_r+0x93c>
 800d158:	f8cd 9008 	str.w	r9, [sp, #8]
 800d15c:	9b02      	ldr	r3, [sp, #8]
 800d15e:	b963      	cbnz	r3, 800d17a <_dtoa_r+0x8f2>
 800d160:	4639      	mov	r1, r7
 800d162:	2205      	movs	r2, #5
 800d164:	4620      	mov	r0, r4
 800d166:	f000 fceb 	bl	800db40 <__multadd>
 800d16a:	4601      	mov	r1, r0
 800d16c:	4607      	mov	r7, r0
 800d16e:	9804      	ldr	r0, [sp, #16]
 800d170:	f000 feee 	bl	800df50 <__mcmp>
 800d174:	2800      	cmp	r0, #0
 800d176:	f73f adcc 	bgt.w	800cd12 <_dtoa_r+0x48a>
 800d17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d17c:	465d      	mov	r5, fp
 800d17e:	ea6f 0a03 	mvn.w	sl, r3
 800d182:	f04f 0900 	mov.w	r9, #0
 800d186:	4639      	mov	r1, r7
 800d188:	4620      	mov	r0, r4
 800d18a:	f000 fcc2 	bl	800db12 <_Bfree>
 800d18e:	2e00      	cmp	r6, #0
 800d190:	f43f aeb7 	beq.w	800cf02 <_dtoa_r+0x67a>
 800d194:	f1b9 0f00 	cmp.w	r9, #0
 800d198:	d005      	beq.n	800d1a6 <_dtoa_r+0x91e>
 800d19a:	45b1      	cmp	r9, r6
 800d19c:	d003      	beq.n	800d1a6 <_dtoa_r+0x91e>
 800d19e:	4649      	mov	r1, r9
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f000 fcb6 	bl	800db12 <_Bfree>
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f000 fcb2 	bl	800db12 <_Bfree>
 800d1ae:	e6a8      	b.n	800cf02 <_dtoa_r+0x67a>
 800d1b0:	2700      	movs	r7, #0
 800d1b2:	463e      	mov	r6, r7
 800d1b4:	e7e1      	b.n	800d17a <_dtoa_r+0x8f2>
 800d1b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d1ba:	463e      	mov	r6, r7
 800d1bc:	e5a9      	b.n	800cd12 <_dtoa_r+0x48a>
 800d1be:	bf00      	nop
 800d1c0:	40240000 	.word	0x40240000
 800d1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f000 80fa 	beq.w	800d3c4 <_dtoa_r+0xb3c>
 800d1d0:	2d00      	cmp	r5, #0
 800d1d2:	dd05      	ble.n	800d1e0 <_dtoa_r+0x958>
 800d1d4:	4631      	mov	r1, r6
 800d1d6:	462a      	mov	r2, r5
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f000 fe65 	bl	800dea8 <__lshift>
 800d1de:	4606      	mov	r6, r0
 800d1e0:	9b07      	ldr	r3, [sp, #28]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d04c      	beq.n	800d280 <_dtoa_r+0x9f8>
 800d1e6:	6871      	ldr	r1, [r6, #4]
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f000 fc5e 	bl	800daaa <_Balloc>
 800d1ee:	6932      	ldr	r2, [r6, #16]
 800d1f0:	3202      	adds	r2, #2
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	0092      	lsls	r2, r2, #2
 800d1f6:	f106 010c 	add.w	r1, r6, #12
 800d1fa:	300c      	adds	r0, #12
 800d1fc:	f000 fc48 	bl	800da90 <memcpy>
 800d200:	2201      	movs	r2, #1
 800d202:	4629      	mov	r1, r5
 800d204:	4620      	mov	r0, r4
 800d206:	f000 fe4f 	bl	800dea8 <__lshift>
 800d20a:	9b00      	ldr	r3, [sp, #0]
 800d20c:	f8cd b014 	str.w	fp, [sp, #20]
 800d210:	f003 0301 	and.w	r3, r3, #1
 800d214:	46b1      	mov	r9, r6
 800d216:	9307      	str	r3, [sp, #28]
 800d218:	4606      	mov	r6, r0
 800d21a:	4639      	mov	r1, r7
 800d21c:	9804      	ldr	r0, [sp, #16]
 800d21e:	f7ff faa5 	bl	800c76c <quorem>
 800d222:	4649      	mov	r1, r9
 800d224:	4605      	mov	r5, r0
 800d226:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d22a:	9804      	ldr	r0, [sp, #16]
 800d22c:	f000 fe90 	bl	800df50 <__mcmp>
 800d230:	4632      	mov	r2, r6
 800d232:	9000      	str	r0, [sp, #0]
 800d234:	4639      	mov	r1, r7
 800d236:	4620      	mov	r0, r4
 800d238:	f000 fea4 	bl	800df84 <__mdiff>
 800d23c:	68c3      	ldr	r3, [r0, #12]
 800d23e:	4602      	mov	r2, r0
 800d240:	bb03      	cbnz	r3, 800d284 <_dtoa_r+0x9fc>
 800d242:	4601      	mov	r1, r0
 800d244:	9008      	str	r0, [sp, #32]
 800d246:	9804      	ldr	r0, [sp, #16]
 800d248:	f000 fe82 	bl	800df50 <__mcmp>
 800d24c:	9a08      	ldr	r2, [sp, #32]
 800d24e:	4603      	mov	r3, r0
 800d250:	4611      	mov	r1, r2
 800d252:	4620      	mov	r0, r4
 800d254:	9308      	str	r3, [sp, #32]
 800d256:	f000 fc5c 	bl	800db12 <_Bfree>
 800d25a:	9b08      	ldr	r3, [sp, #32]
 800d25c:	b9a3      	cbnz	r3, 800d288 <_dtoa_r+0xa00>
 800d25e:	9a06      	ldr	r2, [sp, #24]
 800d260:	b992      	cbnz	r2, 800d288 <_dtoa_r+0xa00>
 800d262:	9a07      	ldr	r2, [sp, #28]
 800d264:	b982      	cbnz	r2, 800d288 <_dtoa_r+0xa00>
 800d266:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d26a:	d029      	beq.n	800d2c0 <_dtoa_r+0xa38>
 800d26c:	9b00      	ldr	r3, [sp, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	dd01      	ble.n	800d276 <_dtoa_r+0x9ee>
 800d272:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d276:	9b05      	ldr	r3, [sp, #20]
 800d278:	1c5d      	adds	r5, r3, #1
 800d27a:	f883 8000 	strb.w	r8, [r3]
 800d27e:	e782      	b.n	800d186 <_dtoa_r+0x8fe>
 800d280:	4630      	mov	r0, r6
 800d282:	e7c2      	b.n	800d20a <_dtoa_r+0x982>
 800d284:	2301      	movs	r3, #1
 800d286:	e7e3      	b.n	800d250 <_dtoa_r+0x9c8>
 800d288:	9a00      	ldr	r2, [sp, #0]
 800d28a:	2a00      	cmp	r2, #0
 800d28c:	db04      	blt.n	800d298 <_dtoa_r+0xa10>
 800d28e:	d125      	bne.n	800d2dc <_dtoa_r+0xa54>
 800d290:	9a06      	ldr	r2, [sp, #24]
 800d292:	bb1a      	cbnz	r2, 800d2dc <_dtoa_r+0xa54>
 800d294:	9a07      	ldr	r2, [sp, #28]
 800d296:	bb0a      	cbnz	r2, 800d2dc <_dtoa_r+0xa54>
 800d298:	2b00      	cmp	r3, #0
 800d29a:	ddec      	ble.n	800d276 <_dtoa_r+0x9ee>
 800d29c:	2201      	movs	r2, #1
 800d29e:	9904      	ldr	r1, [sp, #16]
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f000 fe01 	bl	800dea8 <__lshift>
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	9004      	str	r0, [sp, #16]
 800d2aa:	f000 fe51 	bl	800df50 <__mcmp>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	dc03      	bgt.n	800d2ba <_dtoa_r+0xa32>
 800d2b2:	d1e0      	bne.n	800d276 <_dtoa_r+0x9ee>
 800d2b4:	f018 0f01 	tst.w	r8, #1
 800d2b8:	d0dd      	beq.n	800d276 <_dtoa_r+0x9ee>
 800d2ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d2be:	d1d8      	bne.n	800d272 <_dtoa_r+0x9ea>
 800d2c0:	9b05      	ldr	r3, [sp, #20]
 800d2c2:	9a05      	ldr	r2, [sp, #20]
 800d2c4:	1c5d      	adds	r5, r3, #1
 800d2c6:	2339      	movs	r3, #57	; 0x39
 800d2c8:	7013      	strb	r3, [r2, #0]
 800d2ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d2ce:	2b39      	cmp	r3, #57	; 0x39
 800d2d0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d2d4:	d04f      	beq.n	800d376 <_dtoa_r+0xaee>
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	7013      	strb	r3, [r2, #0]
 800d2da:	e754      	b.n	800d186 <_dtoa_r+0x8fe>
 800d2dc:	9a05      	ldr	r2, [sp, #20]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f102 0501 	add.w	r5, r2, #1
 800d2e4:	dd06      	ble.n	800d2f4 <_dtoa_r+0xa6c>
 800d2e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d2ea:	d0e9      	beq.n	800d2c0 <_dtoa_r+0xa38>
 800d2ec:	f108 0801 	add.w	r8, r8, #1
 800d2f0:	9b05      	ldr	r3, [sp, #20]
 800d2f2:	e7c2      	b.n	800d27a <_dtoa_r+0x9f2>
 800d2f4:	9a02      	ldr	r2, [sp, #8]
 800d2f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d2fa:	eba5 030b 	sub.w	r3, r5, fp
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d021      	beq.n	800d346 <_dtoa_r+0xabe>
 800d302:	2300      	movs	r3, #0
 800d304:	220a      	movs	r2, #10
 800d306:	9904      	ldr	r1, [sp, #16]
 800d308:	4620      	mov	r0, r4
 800d30a:	f000 fc19 	bl	800db40 <__multadd>
 800d30e:	45b1      	cmp	r9, r6
 800d310:	9004      	str	r0, [sp, #16]
 800d312:	f04f 0300 	mov.w	r3, #0
 800d316:	f04f 020a 	mov.w	r2, #10
 800d31a:	4649      	mov	r1, r9
 800d31c:	4620      	mov	r0, r4
 800d31e:	d105      	bne.n	800d32c <_dtoa_r+0xaa4>
 800d320:	f000 fc0e 	bl	800db40 <__multadd>
 800d324:	4681      	mov	r9, r0
 800d326:	4606      	mov	r6, r0
 800d328:	9505      	str	r5, [sp, #20]
 800d32a:	e776      	b.n	800d21a <_dtoa_r+0x992>
 800d32c:	f000 fc08 	bl	800db40 <__multadd>
 800d330:	4631      	mov	r1, r6
 800d332:	4681      	mov	r9, r0
 800d334:	2300      	movs	r3, #0
 800d336:	220a      	movs	r2, #10
 800d338:	4620      	mov	r0, r4
 800d33a:	f000 fc01 	bl	800db40 <__multadd>
 800d33e:	4606      	mov	r6, r0
 800d340:	e7f2      	b.n	800d328 <_dtoa_r+0xaa0>
 800d342:	f04f 0900 	mov.w	r9, #0
 800d346:	2201      	movs	r2, #1
 800d348:	9904      	ldr	r1, [sp, #16]
 800d34a:	4620      	mov	r0, r4
 800d34c:	f000 fdac 	bl	800dea8 <__lshift>
 800d350:	4639      	mov	r1, r7
 800d352:	9004      	str	r0, [sp, #16]
 800d354:	f000 fdfc 	bl	800df50 <__mcmp>
 800d358:	2800      	cmp	r0, #0
 800d35a:	dcb6      	bgt.n	800d2ca <_dtoa_r+0xa42>
 800d35c:	d102      	bne.n	800d364 <_dtoa_r+0xadc>
 800d35e:	f018 0f01 	tst.w	r8, #1
 800d362:	d1b2      	bne.n	800d2ca <_dtoa_r+0xa42>
 800d364:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d368:	2b30      	cmp	r3, #48	; 0x30
 800d36a:	f105 32ff 	add.w	r2, r5, #4294967295
 800d36e:	f47f af0a 	bne.w	800d186 <_dtoa_r+0x8fe>
 800d372:	4615      	mov	r5, r2
 800d374:	e7f6      	b.n	800d364 <_dtoa_r+0xadc>
 800d376:	4593      	cmp	fp, r2
 800d378:	d105      	bne.n	800d386 <_dtoa_r+0xafe>
 800d37a:	2331      	movs	r3, #49	; 0x31
 800d37c:	f10a 0a01 	add.w	sl, sl, #1
 800d380:	f88b 3000 	strb.w	r3, [fp]
 800d384:	e6ff      	b.n	800d186 <_dtoa_r+0x8fe>
 800d386:	4615      	mov	r5, r2
 800d388:	e79f      	b.n	800d2ca <_dtoa_r+0xa42>
 800d38a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d3f0 <_dtoa_r+0xb68>
 800d38e:	e007      	b.n	800d3a0 <_dtoa_r+0xb18>
 800d390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d392:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d3f4 <_dtoa_r+0xb6c>
 800d396:	b11b      	cbz	r3, 800d3a0 <_dtoa_r+0xb18>
 800d398:	f10b 0308 	add.w	r3, fp, #8
 800d39c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d39e:	6013      	str	r3, [r2, #0]
 800d3a0:	4658      	mov	r0, fp
 800d3a2:	b017      	add	sp, #92	; 0x5c
 800d3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a8:	9b06      	ldr	r3, [sp, #24]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	f77f ae35 	ble.w	800d01a <_dtoa_r+0x792>
 800d3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3b2:	9307      	str	r3, [sp, #28]
 800d3b4:	e649      	b.n	800d04a <_dtoa_r+0x7c2>
 800d3b6:	9b02      	ldr	r3, [sp, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	dc03      	bgt.n	800d3c4 <_dtoa_r+0xb3c>
 800d3bc:	9b06      	ldr	r3, [sp, #24]
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	f73f aecc 	bgt.w	800d15c <_dtoa_r+0x8d4>
 800d3c4:	465d      	mov	r5, fp
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	9804      	ldr	r0, [sp, #16]
 800d3ca:	f7ff f9cf 	bl	800c76c <quorem>
 800d3ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d3d2:	f805 8b01 	strb.w	r8, [r5], #1
 800d3d6:	9a02      	ldr	r2, [sp, #8]
 800d3d8:	eba5 030b 	sub.w	r3, r5, fp
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	ddb0      	ble.n	800d342 <_dtoa_r+0xaba>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	220a      	movs	r2, #10
 800d3e4:	9904      	ldr	r1, [sp, #16]
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f000 fbaa 	bl	800db40 <__multadd>
 800d3ec:	9004      	str	r0, [sp, #16]
 800d3ee:	e7ea      	b.n	800d3c6 <_dtoa_r+0xb3e>
 800d3f0:	0800e998 	.word	0x0800e998
 800d3f4:	0800ea18 	.word	0x0800ea18

0800d3f8 <rshift>:
 800d3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3fa:	6906      	ldr	r6, [r0, #16]
 800d3fc:	114b      	asrs	r3, r1, #5
 800d3fe:	429e      	cmp	r6, r3
 800d400:	f100 0414 	add.w	r4, r0, #20
 800d404:	dd30      	ble.n	800d468 <rshift+0x70>
 800d406:	f011 011f 	ands.w	r1, r1, #31
 800d40a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d40e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d412:	d108      	bne.n	800d426 <rshift+0x2e>
 800d414:	4621      	mov	r1, r4
 800d416:	42b2      	cmp	r2, r6
 800d418:	460b      	mov	r3, r1
 800d41a:	d211      	bcs.n	800d440 <rshift+0x48>
 800d41c:	f852 3b04 	ldr.w	r3, [r2], #4
 800d420:	f841 3b04 	str.w	r3, [r1], #4
 800d424:	e7f7      	b.n	800d416 <rshift+0x1e>
 800d426:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d42a:	f1c1 0c20 	rsb	ip, r1, #32
 800d42e:	40cd      	lsrs	r5, r1
 800d430:	3204      	adds	r2, #4
 800d432:	4623      	mov	r3, r4
 800d434:	42b2      	cmp	r2, r6
 800d436:	4617      	mov	r7, r2
 800d438:	d30c      	bcc.n	800d454 <rshift+0x5c>
 800d43a:	601d      	str	r5, [r3, #0]
 800d43c:	b105      	cbz	r5, 800d440 <rshift+0x48>
 800d43e:	3304      	adds	r3, #4
 800d440:	1b1a      	subs	r2, r3, r4
 800d442:	42a3      	cmp	r3, r4
 800d444:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d448:	bf08      	it	eq
 800d44a:	2300      	moveq	r3, #0
 800d44c:	6102      	str	r2, [r0, #16]
 800d44e:	bf08      	it	eq
 800d450:	6143      	streq	r3, [r0, #20]
 800d452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d454:	683f      	ldr	r7, [r7, #0]
 800d456:	fa07 f70c 	lsl.w	r7, r7, ip
 800d45a:	433d      	orrs	r5, r7
 800d45c:	f843 5b04 	str.w	r5, [r3], #4
 800d460:	f852 5b04 	ldr.w	r5, [r2], #4
 800d464:	40cd      	lsrs	r5, r1
 800d466:	e7e5      	b.n	800d434 <rshift+0x3c>
 800d468:	4623      	mov	r3, r4
 800d46a:	e7e9      	b.n	800d440 <rshift+0x48>

0800d46c <__hexdig_fun>:
 800d46c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d470:	2b09      	cmp	r3, #9
 800d472:	d802      	bhi.n	800d47a <__hexdig_fun+0xe>
 800d474:	3820      	subs	r0, #32
 800d476:	b2c0      	uxtb	r0, r0
 800d478:	4770      	bx	lr
 800d47a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d47e:	2b05      	cmp	r3, #5
 800d480:	d801      	bhi.n	800d486 <__hexdig_fun+0x1a>
 800d482:	3847      	subs	r0, #71	; 0x47
 800d484:	e7f7      	b.n	800d476 <__hexdig_fun+0xa>
 800d486:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d48a:	2b05      	cmp	r3, #5
 800d48c:	d801      	bhi.n	800d492 <__hexdig_fun+0x26>
 800d48e:	3827      	subs	r0, #39	; 0x27
 800d490:	e7f1      	b.n	800d476 <__hexdig_fun+0xa>
 800d492:	2000      	movs	r0, #0
 800d494:	4770      	bx	lr

0800d496 <__gethex>:
 800d496:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49a:	b08b      	sub	sp, #44	; 0x2c
 800d49c:	468a      	mov	sl, r1
 800d49e:	9002      	str	r0, [sp, #8]
 800d4a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d4a2:	9306      	str	r3, [sp, #24]
 800d4a4:	4690      	mov	r8, r2
 800d4a6:	f000 fad0 	bl	800da4a <__localeconv_l>
 800d4aa:	6803      	ldr	r3, [r0, #0]
 800d4ac:	9303      	str	r3, [sp, #12]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7f2 fe96 	bl	80001e0 <strlen>
 800d4b4:	9b03      	ldr	r3, [sp, #12]
 800d4b6:	9001      	str	r0, [sp, #4]
 800d4b8:	4403      	add	r3, r0
 800d4ba:	f04f 0b00 	mov.w	fp, #0
 800d4be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d4c2:	9307      	str	r3, [sp, #28]
 800d4c4:	f8da 3000 	ldr.w	r3, [sl]
 800d4c8:	3302      	adds	r3, #2
 800d4ca:	461f      	mov	r7, r3
 800d4cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d4d0:	2830      	cmp	r0, #48	; 0x30
 800d4d2:	d06c      	beq.n	800d5ae <__gethex+0x118>
 800d4d4:	f7ff ffca 	bl	800d46c <__hexdig_fun>
 800d4d8:	4604      	mov	r4, r0
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d16a      	bne.n	800d5b4 <__gethex+0x11e>
 800d4de:	9a01      	ldr	r2, [sp, #4]
 800d4e0:	9903      	ldr	r1, [sp, #12]
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	f001 f840 	bl	800e568 <strncmp>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d166      	bne.n	800d5ba <__gethex+0x124>
 800d4ec:	9b01      	ldr	r3, [sp, #4]
 800d4ee:	5cf8      	ldrb	r0, [r7, r3]
 800d4f0:	18fe      	adds	r6, r7, r3
 800d4f2:	f7ff ffbb 	bl	800d46c <__hexdig_fun>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d062      	beq.n	800d5c0 <__gethex+0x12a>
 800d4fa:	4633      	mov	r3, r6
 800d4fc:	7818      	ldrb	r0, [r3, #0]
 800d4fe:	2830      	cmp	r0, #48	; 0x30
 800d500:	461f      	mov	r7, r3
 800d502:	f103 0301 	add.w	r3, r3, #1
 800d506:	d0f9      	beq.n	800d4fc <__gethex+0x66>
 800d508:	f7ff ffb0 	bl	800d46c <__hexdig_fun>
 800d50c:	fab0 f580 	clz	r5, r0
 800d510:	096d      	lsrs	r5, r5, #5
 800d512:	4634      	mov	r4, r6
 800d514:	f04f 0b01 	mov.w	fp, #1
 800d518:	463a      	mov	r2, r7
 800d51a:	4616      	mov	r6, r2
 800d51c:	3201      	adds	r2, #1
 800d51e:	7830      	ldrb	r0, [r6, #0]
 800d520:	f7ff ffa4 	bl	800d46c <__hexdig_fun>
 800d524:	2800      	cmp	r0, #0
 800d526:	d1f8      	bne.n	800d51a <__gethex+0x84>
 800d528:	9a01      	ldr	r2, [sp, #4]
 800d52a:	9903      	ldr	r1, [sp, #12]
 800d52c:	4630      	mov	r0, r6
 800d52e:	f001 f81b 	bl	800e568 <strncmp>
 800d532:	b950      	cbnz	r0, 800d54a <__gethex+0xb4>
 800d534:	b954      	cbnz	r4, 800d54c <__gethex+0xb6>
 800d536:	9b01      	ldr	r3, [sp, #4]
 800d538:	18f4      	adds	r4, r6, r3
 800d53a:	4622      	mov	r2, r4
 800d53c:	4616      	mov	r6, r2
 800d53e:	3201      	adds	r2, #1
 800d540:	7830      	ldrb	r0, [r6, #0]
 800d542:	f7ff ff93 	bl	800d46c <__hexdig_fun>
 800d546:	2800      	cmp	r0, #0
 800d548:	d1f8      	bne.n	800d53c <__gethex+0xa6>
 800d54a:	b10c      	cbz	r4, 800d550 <__gethex+0xba>
 800d54c:	1ba4      	subs	r4, r4, r6
 800d54e:	00a4      	lsls	r4, r4, #2
 800d550:	7833      	ldrb	r3, [r6, #0]
 800d552:	2b50      	cmp	r3, #80	; 0x50
 800d554:	d001      	beq.n	800d55a <__gethex+0xc4>
 800d556:	2b70      	cmp	r3, #112	; 0x70
 800d558:	d140      	bne.n	800d5dc <__gethex+0x146>
 800d55a:	7873      	ldrb	r3, [r6, #1]
 800d55c:	2b2b      	cmp	r3, #43	; 0x2b
 800d55e:	d031      	beq.n	800d5c4 <__gethex+0x12e>
 800d560:	2b2d      	cmp	r3, #45	; 0x2d
 800d562:	d033      	beq.n	800d5cc <__gethex+0x136>
 800d564:	1c71      	adds	r1, r6, #1
 800d566:	f04f 0900 	mov.w	r9, #0
 800d56a:	7808      	ldrb	r0, [r1, #0]
 800d56c:	f7ff ff7e 	bl	800d46c <__hexdig_fun>
 800d570:	1e43      	subs	r3, r0, #1
 800d572:	b2db      	uxtb	r3, r3
 800d574:	2b18      	cmp	r3, #24
 800d576:	d831      	bhi.n	800d5dc <__gethex+0x146>
 800d578:	f1a0 0210 	sub.w	r2, r0, #16
 800d57c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d580:	f7ff ff74 	bl	800d46c <__hexdig_fun>
 800d584:	1e43      	subs	r3, r0, #1
 800d586:	b2db      	uxtb	r3, r3
 800d588:	2b18      	cmp	r3, #24
 800d58a:	d922      	bls.n	800d5d2 <__gethex+0x13c>
 800d58c:	f1b9 0f00 	cmp.w	r9, #0
 800d590:	d000      	beq.n	800d594 <__gethex+0xfe>
 800d592:	4252      	negs	r2, r2
 800d594:	4414      	add	r4, r2
 800d596:	f8ca 1000 	str.w	r1, [sl]
 800d59a:	b30d      	cbz	r5, 800d5e0 <__gethex+0x14a>
 800d59c:	f1bb 0f00 	cmp.w	fp, #0
 800d5a0:	bf0c      	ite	eq
 800d5a2:	2706      	moveq	r7, #6
 800d5a4:	2700      	movne	r7, #0
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	b00b      	add	sp, #44	; 0x2c
 800d5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ae:	f10b 0b01 	add.w	fp, fp, #1
 800d5b2:	e78a      	b.n	800d4ca <__gethex+0x34>
 800d5b4:	2500      	movs	r5, #0
 800d5b6:	462c      	mov	r4, r5
 800d5b8:	e7ae      	b.n	800d518 <__gethex+0x82>
 800d5ba:	463e      	mov	r6, r7
 800d5bc:	2501      	movs	r5, #1
 800d5be:	e7c7      	b.n	800d550 <__gethex+0xba>
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	e7fb      	b.n	800d5bc <__gethex+0x126>
 800d5c4:	f04f 0900 	mov.w	r9, #0
 800d5c8:	1cb1      	adds	r1, r6, #2
 800d5ca:	e7ce      	b.n	800d56a <__gethex+0xd4>
 800d5cc:	f04f 0901 	mov.w	r9, #1
 800d5d0:	e7fa      	b.n	800d5c8 <__gethex+0x132>
 800d5d2:	230a      	movs	r3, #10
 800d5d4:	fb03 0202 	mla	r2, r3, r2, r0
 800d5d8:	3a10      	subs	r2, #16
 800d5da:	e7cf      	b.n	800d57c <__gethex+0xe6>
 800d5dc:	4631      	mov	r1, r6
 800d5de:	e7da      	b.n	800d596 <__gethex+0x100>
 800d5e0:	1bf3      	subs	r3, r6, r7
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	2b07      	cmp	r3, #7
 800d5e8:	dc49      	bgt.n	800d67e <__gethex+0x1e8>
 800d5ea:	9802      	ldr	r0, [sp, #8]
 800d5ec:	f000 fa5d 	bl	800daaa <_Balloc>
 800d5f0:	9b01      	ldr	r3, [sp, #4]
 800d5f2:	f100 0914 	add.w	r9, r0, #20
 800d5f6:	f04f 0b00 	mov.w	fp, #0
 800d5fa:	f1c3 0301 	rsb	r3, r3, #1
 800d5fe:	4605      	mov	r5, r0
 800d600:	f8cd 9010 	str.w	r9, [sp, #16]
 800d604:	46da      	mov	sl, fp
 800d606:	9308      	str	r3, [sp, #32]
 800d608:	42b7      	cmp	r7, r6
 800d60a:	d33b      	bcc.n	800d684 <__gethex+0x1ee>
 800d60c:	9804      	ldr	r0, [sp, #16]
 800d60e:	f840 ab04 	str.w	sl, [r0], #4
 800d612:	eba0 0009 	sub.w	r0, r0, r9
 800d616:	1080      	asrs	r0, r0, #2
 800d618:	6128      	str	r0, [r5, #16]
 800d61a:	0147      	lsls	r7, r0, #5
 800d61c:	4650      	mov	r0, sl
 800d61e:	f000 fb08 	bl	800dc32 <__hi0bits>
 800d622:	f8d8 6000 	ldr.w	r6, [r8]
 800d626:	1a3f      	subs	r7, r7, r0
 800d628:	42b7      	cmp	r7, r6
 800d62a:	dd64      	ble.n	800d6f6 <__gethex+0x260>
 800d62c:	1bbf      	subs	r7, r7, r6
 800d62e:	4639      	mov	r1, r7
 800d630:	4628      	mov	r0, r5
 800d632:	f000 fe17 	bl	800e264 <__any_on>
 800d636:	4682      	mov	sl, r0
 800d638:	b178      	cbz	r0, 800d65a <__gethex+0x1c4>
 800d63a:	1e7b      	subs	r3, r7, #1
 800d63c:	1159      	asrs	r1, r3, #5
 800d63e:	f003 021f 	and.w	r2, r3, #31
 800d642:	f04f 0a01 	mov.w	sl, #1
 800d646:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d64a:	fa0a f202 	lsl.w	r2, sl, r2
 800d64e:	420a      	tst	r2, r1
 800d650:	d003      	beq.n	800d65a <__gethex+0x1c4>
 800d652:	4553      	cmp	r3, sl
 800d654:	dc46      	bgt.n	800d6e4 <__gethex+0x24e>
 800d656:	f04f 0a02 	mov.w	sl, #2
 800d65a:	4639      	mov	r1, r7
 800d65c:	4628      	mov	r0, r5
 800d65e:	f7ff fecb 	bl	800d3f8 <rshift>
 800d662:	443c      	add	r4, r7
 800d664:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d668:	42a3      	cmp	r3, r4
 800d66a:	da52      	bge.n	800d712 <__gethex+0x27c>
 800d66c:	4629      	mov	r1, r5
 800d66e:	9802      	ldr	r0, [sp, #8]
 800d670:	f000 fa4f 	bl	800db12 <_Bfree>
 800d674:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d676:	2300      	movs	r3, #0
 800d678:	6013      	str	r3, [r2, #0]
 800d67a:	27a3      	movs	r7, #163	; 0xa3
 800d67c:	e793      	b.n	800d5a6 <__gethex+0x110>
 800d67e:	3101      	adds	r1, #1
 800d680:	105b      	asrs	r3, r3, #1
 800d682:	e7b0      	b.n	800d5e6 <__gethex+0x150>
 800d684:	1e73      	subs	r3, r6, #1
 800d686:	9305      	str	r3, [sp, #20]
 800d688:	9a07      	ldr	r2, [sp, #28]
 800d68a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d68e:	4293      	cmp	r3, r2
 800d690:	d018      	beq.n	800d6c4 <__gethex+0x22e>
 800d692:	f1bb 0f20 	cmp.w	fp, #32
 800d696:	d107      	bne.n	800d6a8 <__gethex+0x212>
 800d698:	9b04      	ldr	r3, [sp, #16]
 800d69a:	f8c3 a000 	str.w	sl, [r3]
 800d69e:	3304      	adds	r3, #4
 800d6a0:	f04f 0a00 	mov.w	sl, #0
 800d6a4:	9304      	str	r3, [sp, #16]
 800d6a6:	46d3      	mov	fp, sl
 800d6a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d6ac:	f7ff fede 	bl	800d46c <__hexdig_fun>
 800d6b0:	f000 000f 	and.w	r0, r0, #15
 800d6b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800d6b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d6bc:	f10b 0b04 	add.w	fp, fp, #4
 800d6c0:	9b05      	ldr	r3, [sp, #20]
 800d6c2:	e00d      	b.n	800d6e0 <__gethex+0x24a>
 800d6c4:	9b05      	ldr	r3, [sp, #20]
 800d6c6:	9a08      	ldr	r2, [sp, #32]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	42bb      	cmp	r3, r7
 800d6cc:	d3e1      	bcc.n	800d692 <__gethex+0x1fc>
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	9a01      	ldr	r2, [sp, #4]
 800d6d2:	9903      	ldr	r1, [sp, #12]
 800d6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d6:	f000 ff47 	bl	800e568 <strncmp>
 800d6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d1d8      	bne.n	800d692 <__gethex+0x1fc>
 800d6e0:	461e      	mov	r6, r3
 800d6e2:	e791      	b.n	800d608 <__gethex+0x172>
 800d6e4:	1eb9      	subs	r1, r7, #2
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	f000 fdbc 	bl	800e264 <__any_on>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d0b2      	beq.n	800d656 <__gethex+0x1c0>
 800d6f0:	f04f 0a03 	mov.w	sl, #3
 800d6f4:	e7b1      	b.n	800d65a <__gethex+0x1c4>
 800d6f6:	da09      	bge.n	800d70c <__gethex+0x276>
 800d6f8:	1bf7      	subs	r7, r6, r7
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	463a      	mov	r2, r7
 800d6fe:	9802      	ldr	r0, [sp, #8]
 800d700:	f000 fbd2 	bl	800dea8 <__lshift>
 800d704:	1be4      	subs	r4, r4, r7
 800d706:	4605      	mov	r5, r0
 800d708:	f100 0914 	add.w	r9, r0, #20
 800d70c:	f04f 0a00 	mov.w	sl, #0
 800d710:	e7a8      	b.n	800d664 <__gethex+0x1ce>
 800d712:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d716:	42a0      	cmp	r0, r4
 800d718:	dd6a      	ble.n	800d7f0 <__gethex+0x35a>
 800d71a:	1b04      	subs	r4, r0, r4
 800d71c:	42a6      	cmp	r6, r4
 800d71e:	dc2e      	bgt.n	800d77e <__gethex+0x2e8>
 800d720:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d724:	2b02      	cmp	r3, #2
 800d726:	d022      	beq.n	800d76e <__gethex+0x2d8>
 800d728:	2b03      	cmp	r3, #3
 800d72a:	d024      	beq.n	800d776 <__gethex+0x2e0>
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d115      	bne.n	800d75c <__gethex+0x2c6>
 800d730:	42a6      	cmp	r6, r4
 800d732:	d113      	bne.n	800d75c <__gethex+0x2c6>
 800d734:	2e01      	cmp	r6, #1
 800d736:	dc0b      	bgt.n	800d750 <__gethex+0x2ba>
 800d738:	9a06      	ldr	r2, [sp, #24]
 800d73a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d73e:	6013      	str	r3, [r2, #0]
 800d740:	2301      	movs	r3, #1
 800d742:	612b      	str	r3, [r5, #16]
 800d744:	f8c9 3000 	str.w	r3, [r9]
 800d748:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d74a:	2762      	movs	r7, #98	; 0x62
 800d74c:	601d      	str	r5, [r3, #0]
 800d74e:	e72a      	b.n	800d5a6 <__gethex+0x110>
 800d750:	1e71      	subs	r1, r6, #1
 800d752:	4628      	mov	r0, r5
 800d754:	f000 fd86 	bl	800e264 <__any_on>
 800d758:	2800      	cmp	r0, #0
 800d75a:	d1ed      	bne.n	800d738 <__gethex+0x2a2>
 800d75c:	4629      	mov	r1, r5
 800d75e:	9802      	ldr	r0, [sp, #8]
 800d760:	f000 f9d7 	bl	800db12 <_Bfree>
 800d764:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d766:	2300      	movs	r3, #0
 800d768:	6013      	str	r3, [r2, #0]
 800d76a:	2750      	movs	r7, #80	; 0x50
 800d76c:	e71b      	b.n	800d5a6 <__gethex+0x110>
 800d76e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d770:	2b00      	cmp	r3, #0
 800d772:	d0e1      	beq.n	800d738 <__gethex+0x2a2>
 800d774:	e7f2      	b.n	800d75c <__gethex+0x2c6>
 800d776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1dd      	bne.n	800d738 <__gethex+0x2a2>
 800d77c:	e7ee      	b.n	800d75c <__gethex+0x2c6>
 800d77e:	1e67      	subs	r7, r4, #1
 800d780:	f1ba 0f00 	cmp.w	sl, #0
 800d784:	d131      	bne.n	800d7ea <__gethex+0x354>
 800d786:	b127      	cbz	r7, 800d792 <__gethex+0x2fc>
 800d788:	4639      	mov	r1, r7
 800d78a:	4628      	mov	r0, r5
 800d78c:	f000 fd6a 	bl	800e264 <__any_on>
 800d790:	4682      	mov	sl, r0
 800d792:	117a      	asrs	r2, r7, #5
 800d794:	2301      	movs	r3, #1
 800d796:	f007 071f 	and.w	r7, r7, #31
 800d79a:	fa03 f707 	lsl.w	r7, r3, r7
 800d79e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	421f      	tst	r7, r3
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	bf18      	it	ne
 800d7aa:	f04a 0a02 	orrne.w	sl, sl, #2
 800d7ae:	1b36      	subs	r6, r6, r4
 800d7b0:	f7ff fe22 	bl	800d3f8 <rshift>
 800d7b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d7b8:	2702      	movs	r7, #2
 800d7ba:	f1ba 0f00 	cmp.w	sl, #0
 800d7be:	d048      	beq.n	800d852 <__gethex+0x3bc>
 800d7c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d015      	beq.n	800d7f4 <__gethex+0x35e>
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	d017      	beq.n	800d7fc <__gethex+0x366>
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d109      	bne.n	800d7e4 <__gethex+0x34e>
 800d7d0:	f01a 0f02 	tst.w	sl, #2
 800d7d4:	d006      	beq.n	800d7e4 <__gethex+0x34e>
 800d7d6:	f8d9 3000 	ldr.w	r3, [r9]
 800d7da:	ea4a 0a03 	orr.w	sl, sl, r3
 800d7de:	f01a 0f01 	tst.w	sl, #1
 800d7e2:	d10e      	bne.n	800d802 <__gethex+0x36c>
 800d7e4:	f047 0710 	orr.w	r7, r7, #16
 800d7e8:	e033      	b.n	800d852 <__gethex+0x3bc>
 800d7ea:	f04f 0a01 	mov.w	sl, #1
 800d7ee:	e7d0      	b.n	800d792 <__gethex+0x2fc>
 800d7f0:	2701      	movs	r7, #1
 800d7f2:	e7e2      	b.n	800d7ba <__gethex+0x324>
 800d7f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7f6:	f1c3 0301 	rsb	r3, r3, #1
 800d7fa:	9315      	str	r3, [sp, #84]	; 0x54
 800d7fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0f0      	beq.n	800d7e4 <__gethex+0x34e>
 800d802:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d806:	f105 0314 	add.w	r3, r5, #20
 800d80a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d80e:	eb03 010a 	add.w	r1, r3, sl
 800d812:	f04f 0c00 	mov.w	ip, #0
 800d816:	4618      	mov	r0, r3
 800d818:	f853 2b04 	ldr.w	r2, [r3], #4
 800d81c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d820:	d01c      	beq.n	800d85c <__gethex+0x3c6>
 800d822:	3201      	adds	r2, #1
 800d824:	6002      	str	r2, [r0, #0]
 800d826:	2f02      	cmp	r7, #2
 800d828:	f105 0314 	add.w	r3, r5, #20
 800d82c:	d138      	bne.n	800d8a0 <__gethex+0x40a>
 800d82e:	f8d8 2000 	ldr.w	r2, [r8]
 800d832:	3a01      	subs	r2, #1
 800d834:	42b2      	cmp	r2, r6
 800d836:	d10a      	bne.n	800d84e <__gethex+0x3b8>
 800d838:	1171      	asrs	r1, r6, #5
 800d83a:	2201      	movs	r2, #1
 800d83c:	f006 061f 	and.w	r6, r6, #31
 800d840:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d844:	fa02 f606 	lsl.w	r6, r2, r6
 800d848:	421e      	tst	r6, r3
 800d84a:	bf18      	it	ne
 800d84c:	4617      	movne	r7, r2
 800d84e:	f047 0720 	orr.w	r7, r7, #32
 800d852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d854:	601d      	str	r5, [r3, #0]
 800d856:	9b06      	ldr	r3, [sp, #24]
 800d858:	601c      	str	r4, [r3, #0]
 800d85a:	e6a4      	b.n	800d5a6 <__gethex+0x110>
 800d85c:	4299      	cmp	r1, r3
 800d85e:	f843 cc04 	str.w	ip, [r3, #-4]
 800d862:	d8d8      	bhi.n	800d816 <__gethex+0x380>
 800d864:	68ab      	ldr	r3, [r5, #8]
 800d866:	4599      	cmp	r9, r3
 800d868:	db12      	blt.n	800d890 <__gethex+0x3fa>
 800d86a:	6869      	ldr	r1, [r5, #4]
 800d86c:	9802      	ldr	r0, [sp, #8]
 800d86e:	3101      	adds	r1, #1
 800d870:	f000 f91b 	bl	800daaa <_Balloc>
 800d874:	692a      	ldr	r2, [r5, #16]
 800d876:	3202      	adds	r2, #2
 800d878:	f105 010c 	add.w	r1, r5, #12
 800d87c:	4683      	mov	fp, r0
 800d87e:	0092      	lsls	r2, r2, #2
 800d880:	300c      	adds	r0, #12
 800d882:	f000 f905 	bl	800da90 <memcpy>
 800d886:	4629      	mov	r1, r5
 800d888:	9802      	ldr	r0, [sp, #8]
 800d88a:	f000 f942 	bl	800db12 <_Bfree>
 800d88e:	465d      	mov	r5, fp
 800d890:	692b      	ldr	r3, [r5, #16]
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d898:	612a      	str	r2, [r5, #16]
 800d89a:	2201      	movs	r2, #1
 800d89c:	615a      	str	r2, [r3, #20]
 800d89e:	e7c2      	b.n	800d826 <__gethex+0x390>
 800d8a0:	692a      	ldr	r2, [r5, #16]
 800d8a2:	454a      	cmp	r2, r9
 800d8a4:	dd0b      	ble.n	800d8be <__gethex+0x428>
 800d8a6:	2101      	movs	r1, #1
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	f7ff fda5 	bl	800d3f8 <rshift>
 800d8ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8b2:	3401      	adds	r4, #1
 800d8b4:	42a3      	cmp	r3, r4
 800d8b6:	f6ff aed9 	blt.w	800d66c <__gethex+0x1d6>
 800d8ba:	2701      	movs	r7, #1
 800d8bc:	e7c7      	b.n	800d84e <__gethex+0x3b8>
 800d8be:	f016 061f 	ands.w	r6, r6, #31
 800d8c2:	d0fa      	beq.n	800d8ba <__gethex+0x424>
 800d8c4:	449a      	add	sl, r3
 800d8c6:	f1c6 0620 	rsb	r6, r6, #32
 800d8ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d8ce:	f000 f9b0 	bl	800dc32 <__hi0bits>
 800d8d2:	42b0      	cmp	r0, r6
 800d8d4:	dbe7      	blt.n	800d8a6 <__gethex+0x410>
 800d8d6:	e7f0      	b.n	800d8ba <__gethex+0x424>

0800d8d8 <L_shift>:
 800d8d8:	f1c2 0208 	rsb	r2, r2, #8
 800d8dc:	0092      	lsls	r2, r2, #2
 800d8de:	b570      	push	{r4, r5, r6, lr}
 800d8e0:	f1c2 0620 	rsb	r6, r2, #32
 800d8e4:	6843      	ldr	r3, [r0, #4]
 800d8e6:	6804      	ldr	r4, [r0, #0]
 800d8e8:	fa03 f506 	lsl.w	r5, r3, r6
 800d8ec:	432c      	orrs	r4, r5
 800d8ee:	40d3      	lsrs	r3, r2
 800d8f0:	6004      	str	r4, [r0, #0]
 800d8f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d8f6:	4288      	cmp	r0, r1
 800d8f8:	d3f4      	bcc.n	800d8e4 <L_shift+0xc>
 800d8fa:	bd70      	pop	{r4, r5, r6, pc}

0800d8fc <__match>:
 800d8fc:	b530      	push	{r4, r5, lr}
 800d8fe:	6803      	ldr	r3, [r0, #0]
 800d900:	3301      	adds	r3, #1
 800d902:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d906:	b914      	cbnz	r4, 800d90e <__match+0x12>
 800d908:	6003      	str	r3, [r0, #0]
 800d90a:	2001      	movs	r0, #1
 800d90c:	bd30      	pop	{r4, r5, pc}
 800d90e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d912:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d916:	2d19      	cmp	r5, #25
 800d918:	bf98      	it	ls
 800d91a:	3220      	addls	r2, #32
 800d91c:	42a2      	cmp	r2, r4
 800d91e:	d0f0      	beq.n	800d902 <__match+0x6>
 800d920:	2000      	movs	r0, #0
 800d922:	e7f3      	b.n	800d90c <__match+0x10>

0800d924 <__hexnan>:
 800d924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d928:	680b      	ldr	r3, [r1, #0]
 800d92a:	6801      	ldr	r1, [r0, #0]
 800d92c:	115f      	asrs	r7, r3, #5
 800d92e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d932:	f013 031f 	ands.w	r3, r3, #31
 800d936:	b087      	sub	sp, #28
 800d938:	bf18      	it	ne
 800d93a:	3704      	addne	r7, #4
 800d93c:	2500      	movs	r5, #0
 800d93e:	1f3e      	subs	r6, r7, #4
 800d940:	4682      	mov	sl, r0
 800d942:	4690      	mov	r8, r2
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	f847 5c04 	str.w	r5, [r7, #-4]
 800d94a:	46b1      	mov	r9, r6
 800d94c:	4634      	mov	r4, r6
 800d94e:	9502      	str	r5, [sp, #8]
 800d950:	46ab      	mov	fp, r5
 800d952:	784a      	ldrb	r2, [r1, #1]
 800d954:	1c4b      	adds	r3, r1, #1
 800d956:	9303      	str	r3, [sp, #12]
 800d958:	b342      	cbz	r2, 800d9ac <__hexnan+0x88>
 800d95a:	4610      	mov	r0, r2
 800d95c:	9105      	str	r1, [sp, #20]
 800d95e:	9204      	str	r2, [sp, #16]
 800d960:	f7ff fd84 	bl	800d46c <__hexdig_fun>
 800d964:	2800      	cmp	r0, #0
 800d966:	d143      	bne.n	800d9f0 <__hexnan+0xcc>
 800d968:	9a04      	ldr	r2, [sp, #16]
 800d96a:	9905      	ldr	r1, [sp, #20]
 800d96c:	2a20      	cmp	r2, #32
 800d96e:	d818      	bhi.n	800d9a2 <__hexnan+0x7e>
 800d970:	9b02      	ldr	r3, [sp, #8]
 800d972:	459b      	cmp	fp, r3
 800d974:	dd13      	ble.n	800d99e <__hexnan+0x7a>
 800d976:	454c      	cmp	r4, r9
 800d978:	d206      	bcs.n	800d988 <__hexnan+0x64>
 800d97a:	2d07      	cmp	r5, #7
 800d97c:	dc04      	bgt.n	800d988 <__hexnan+0x64>
 800d97e:	462a      	mov	r2, r5
 800d980:	4649      	mov	r1, r9
 800d982:	4620      	mov	r0, r4
 800d984:	f7ff ffa8 	bl	800d8d8 <L_shift>
 800d988:	4544      	cmp	r4, r8
 800d98a:	d944      	bls.n	800da16 <__hexnan+0xf2>
 800d98c:	2300      	movs	r3, #0
 800d98e:	f1a4 0904 	sub.w	r9, r4, #4
 800d992:	f844 3c04 	str.w	r3, [r4, #-4]
 800d996:	f8cd b008 	str.w	fp, [sp, #8]
 800d99a:	464c      	mov	r4, r9
 800d99c:	461d      	mov	r5, r3
 800d99e:	9903      	ldr	r1, [sp, #12]
 800d9a0:	e7d7      	b.n	800d952 <__hexnan+0x2e>
 800d9a2:	2a29      	cmp	r2, #41	; 0x29
 800d9a4:	d14a      	bne.n	800da3c <__hexnan+0x118>
 800d9a6:	3102      	adds	r1, #2
 800d9a8:	f8ca 1000 	str.w	r1, [sl]
 800d9ac:	f1bb 0f00 	cmp.w	fp, #0
 800d9b0:	d044      	beq.n	800da3c <__hexnan+0x118>
 800d9b2:	454c      	cmp	r4, r9
 800d9b4:	d206      	bcs.n	800d9c4 <__hexnan+0xa0>
 800d9b6:	2d07      	cmp	r5, #7
 800d9b8:	dc04      	bgt.n	800d9c4 <__hexnan+0xa0>
 800d9ba:	462a      	mov	r2, r5
 800d9bc:	4649      	mov	r1, r9
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f7ff ff8a 	bl	800d8d8 <L_shift>
 800d9c4:	4544      	cmp	r4, r8
 800d9c6:	d928      	bls.n	800da1a <__hexnan+0xf6>
 800d9c8:	4643      	mov	r3, r8
 800d9ca:	f854 2b04 	ldr.w	r2, [r4], #4
 800d9ce:	f843 2b04 	str.w	r2, [r3], #4
 800d9d2:	42a6      	cmp	r6, r4
 800d9d4:	d2f9      	bcs.n	800d9ca <__hexnan+0xa6>
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f843 2b04 	str.w	r2, [r3], #4
 800d9dc:	429e      	cmp	r6, r3
 800d9de:	d2fb      	bcs.n	800d9d8 <__hexnan+0xb4>
 800d9e0:	6833      	ldr	r3, [r6, #0]
 800d9e2:	b91b      	cbnz	r3, 800d9ec <__hexnan+0xc8>
 800d9e4:	4546      	cmp	r6, r8
 800d9e6:	d127      	bne.n	800da38 <__hexnan+0x114>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	6033      	str	r3, [r6, #0]
 800d9ec:	2005      	movs	r0, #5
 800d9ee:	e026      	b.n	800da3e <__hexnan+0x11a>
 800d9f0:	3501      	adds	r5, #1
 800d9f2:	2d08      	cmp	r5, #8
 800d9f4:	f10b 0b01 	add.w	fp, fp, #1
 800d9f8:	dd06      	ble.n	800da08 <__hexnan+0xe4>
 800d9fa:	4544      	cmp	r4, r8
 800d9fc:	d9cf      	bls.n	800d99e <__hexnan+0x7a>
 800d9fe:	2300      	movs	r3, #0
 800da00:	f844 3c04 	str.w	r3, [r4, #-4]
 800da04:	2501      	movs	r5, #1
 800da06:	3c04      	subs	r4, #4
 800da08:	6822      	ldr	r2, [r4, #0]
 800da0a:	f000 000f 	and.w	r0, r0, #15
 800da0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800da12:	6020      	str	r0, [r4, #0]
 800da14:	e7c3      	b.n	800d99e <__hexnan+0x7a>
 800da16:	2508      	movs	r5, #8
 800da18:	e7c1      	b.n	800d99e <__hexnan+0x7a>
 800da1a:	9b01      	ldr	r3, [sp, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d0df      	beq.n	800d9e0 <__hexnan+0xbc>
 800da20:	f04f 32ff 	mov.w	r2, #4294967295
 800da24:	f1c3 0320 	rsb	r3, r3, #32
 800da28:	fa22 f303 	lsr.w	r3, r2, r3
 800da2c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800da30:	401a      	ands	r2, r3
 800da32:	f847 2c04 	str.w	r2, [r7, #-4]
 800da36:	e7d3      	b.n	800d9e0 <__hexnan+0xbc>
 800da38:	3e04      	subs	r6, #4
 800da3a:	e7d1      	b.n	800d9e0 <__hexnan+0xbc>
 800da3c:	2004      	movs	r0, #4
 800da3e:	b007      	add	sp, #28
 800da40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da44 <__locale_ctype_ptr_l>:
 800da44:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800da48:	4770      	bx	lr

0800da4a <__localeconv_l>:
 800da4a:	30f0      	adds	r0, #240	; 0xf0
 800da4c:	4770      	bx	lr
	...

0800da50 <_localeconv_r>:
 800da50:	4b04      	ldr	r3, [pc, #16]	; (800da64 <_localeconv_r+0x14>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	6a18      	ldr	r0, [r3, #32]
 800da56:	4b04      	ldr	r3, [pc, #16]	; (800da68 <_localeconv_r+0x18>)
 800da58:	2800      	cmp	r0, #0
 800da5a:	bf08      	it	eq
 800da5c:	4618      	moveq	r0, r3
 800da5e:	30f0      	adds	r0, #240	; 0xf0
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	200001f0 	.word	0x200001f0
 800da68:	20000254 	.word	0x20000254

0800da6c <__ascii_mbtowc>:
 800da6c:	b082      	sub	sp, #8
 800da6e:	b901      	cbnz	r1, 800da72 <__ascii_mbtowc+0x6>
 800da70:	a901      	add	r1, sp, #4
 800da72:	b142      	cbz	r2, 800da86 <__ascii_mbtowc+0x1a>
 800da74:	b14b      	cbz	r3, 800da8a <__ascii_mbtowc+0x1e>
 800da76:	7813      	ldrb	r3, [r2, #0]
 800da78:	600b      	str	r3, [r1, #0]
 800da7a:	7812      	ldrb	r2, [r2, #0]
 800da7c:	1c10      	adds	r0, r2, #0
 800da7e:	bf18      	it	ne
 800da80:	2001      	movne	r0, #1
 800da82:	b002      	add	sp, #8
 800da84:	4770      	bx	lr
 800da86:	4610      	mov	r0, r2
 800da88:	e7fb      	b.n	800da82 <__ascii_mbtowc+0x16>
 800da8a:	f06f 0001 	mvn.w	r0, #1
 800da8e:	e7f8      	b.n	800da82 <__ascii_mbtowc+0x16>

0800da90 <memcpy>:
 800da90:	b510      	push	{r4, lr}
 800da92:	1e43      	subs	r3, r0, #1
 800da94:	440a      	add	r2, r1
 800da96:	4291      	cmp	r1, r2
 800da98:	d100      	bne.n	800da9c <memcpy+0xc>
 800da9a:	bd10      	pop	{r4, pc}
 800da9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daa4:	e7f7      	b.n	800da96 <memcpy+0x6>

0800daa6 <__malloc_lock>:
 800daa6:	4770      	bx	lr

0800daa8 <__malloc_unlock>:
 800daa8:	4770      	bx	lr

0800daaa <_Balloc>:
 800daaa:	b570      	push	{r4, r5, r6, lr}
 800daac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800daae:	4604      	mov	r4, r0
 800dab0:	460e      	mov	r6, r1
 800dab2:	b93d      	cbnz	r5, 800dac4 <_Balloc+0x1a>
 800dab4:	2010      	movs	r0, #16
 800dab6:	f7fd f877 	bl	800aba8 <malloc>
 800daba:	6260      	str	r0, [r4, #36]	; 0x24
 800dabc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dac0:	6005      	str	r5, [r0, #0]
 800dac2:	60c5      	str	r5, [r0, #12]
 800dac4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dac6:	68eb      	ldr	r3, [r5, #12]
 800dac8:	b183      	cbz	r3, 800daec <_Balloc+0x42>
 800daca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dad2:	b9b8      	cbnz	r0, 800db04 <_Balloc+0x5a>
 800dad4:	2101      	movs	r1, #1
 800dad6:	fa01 f506 	lsl.w	r5, r1, r6
 800dada:	1d6a      	adds	r2, r5, #5
 800dadc:	0092      	lsls	r2, r2, #2
 800dade:	4620      	mov	r0, r4
 800dae0:	f000 fbe1 	bl	800e2a6 <_calloc_r>
 800dae4:	b160      	cbz	r0, 800db00 <_Balloc+0x56>
 800dae6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800daea:	e00e      	b.n	800db0a <_Balloc+0x60>
 800daec:	2221      	movs	r2, #33	; 0x21
 800daee:	2104      	movs	r1, #4
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 fbd8 	bl	800e2a6 <_calloc_r>
 800daf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daf8:	60e8      	str	r0, [r5, #12]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1e4      	bne.n	800daca <_Balloc+0x20>
 800db00:	2000      	movs	r0, #0
 800db02:	bd70      	pop	{r4, r5, r6, pc}
 800db04:	6802      	ldr	r2, [r0, #0]
 800db06:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800db0a:	2300      	movs	r3, #0
 800db0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db10:	e7f7      	b.n	800db02 <_Balloc+0x58>

0800db12 <_Bfree>:
 800db12:	b570      	push	{r4, r5, r6, lr}
 800db14:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800db16:	4606      	mov	r6, r0
 800db18:	460d      	mov	r5, r1
 800db1a:	b93c      	cbnz	r4, 800db2c <_Bfree+0x1a>
 800db1c:	2010      	movs	r0, #16
 800db1e:	f7fd f843 	bl	800aba8 <malloc>
 800db22:	6270      	str	r0, [r6, #36]	; 0x24
 800db24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db28:	6004      	str	r4, [r0, #0]
 800db2a:	60c4      	str	r4, [r0, #12]
 800db2c:	b13d      	cbz	r5, 800db3e <_Bfree+0x2c>
 800db2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db30:	686a      	ldr	r2, [r5, #4]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db38:	6029      	str	r1, [r5, #0]
 800db3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800db3e:	bd70      	pop	{r4, r5, r6, pc}

0800db40 <__multadd>:
 800db40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db44:	690d      	ldr	r5, [r1, #16]
 800db46:	461f      	mov	r7, r3
 800db48:	4606      	mov	r6, r0
 800db4a:	460c      	mov	r4, r1
 800db4c:	f101 0c14 	add.w	ip, r1, #20
 800db50:	2300      	movs	r3, #0
 800db52:	f8dc 0000 	ldr.w	r0, [ip]
 800db56:	b281      	uxth	r1, r0
 800db58:	fb02 7101 	mla	r1, r2, r1, r7
 800db5c:	0c0f      	lsrs	r7, r1, #16
 800db5e:	0c00      	lsrs	r0, r0, #16
 800db60:	fb02 7000 	mla	r0, r2, r0, r7
 800db64:	b289      	uxth	r1, r1
 800db66:	3301      	adds	r3, #1
 800db68:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800db6c:	429d      	cmp	r5, r3
 800db6e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800db72:	f84c 1b04 	str.w	r1, [ip], #4
 800db76:	dcec      	bgt.n	800db52 <__multadd+0x12>
 800db78:	b1d7      	cbz	r7, 800dbb0 <__multadd+0x70>
 800db7a:	68a3      	ldr	r3, [r4, #8]
 800db7c:	42ab      	cmp	r3, r5
 800db7e:	dc12      	bgt.n	800dba6 <__multadd+0x66>
 800db80:	6861      	ldr	r1, [r4, #4]
 800db82:	4630      	mov	r0, r6
 800db84:	3101      	adds	r1, #1
 800db86:	f7ff ff90 	bl	800daaa <_Balloc>
 800db8a:	6922      	ldr	r2, [r4, #16]
 800db8c:	3202      	adds	r2, #2
 800db8e:	f104 010c 	add.w	r1, r4, #12
 800db92:	4680      	mov	r8, r0
 800db94:	0092      	lsls	r2, r2, #2
 800db96:	300c      	adds	r0, #12
 800db98:	f7ff ff7a 	bl	800da90 <memcpy>
 800db9c:	4621      	mov	r1, r4
 800db9e:	4630      	mov	r0, r6
 800dba0:	f7ff ffb7 	bl	800db12 <_Bfree>
 800dba4:	4644      	mov	r4, r8
 800dba6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbaa:	3501      	adds	r5, #1
 800dbac:	615f      	str	r7, [r3, #20]
 800dbae:	6125      	str	r5, [r4, #16]
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbb6 <__s2b>:
 800dbb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbba:	460c      	mov	r4, r1
 800dbbc:	4615      	mov	r5, r2
 800dbbe:	461f      	mov	r7, r3
 800dbc0:	2209      	movs	r2, #9
 800dbc2:	3308      	adds	r3, #8
 800dbc4:	4606      	mov	r6, r0
 800dbc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbca:	2100      	movs	r1, #0
 800dbcc:	2201      	movs	r2, #1
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	db20      	blt.n	800dc14 <__s2b+0x5e>
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f7ff ff69 	bl	800daaa <_Balloc>
 800dbd8:	9b08      	ldr	r3, [sp, #32]
 800dbda:	6143      	str	r3, [r0, #20]
 800dbdc:	2d09      	cmp	r5, #9
 800dbde:	f04f 0301 	mov.w	r3, #1
 800dbe2:	6103      	str	r3, [r0, #16]
 800dbe4:	dd19      	ble.n	800dc1a <__s2b+0x64>
 800dbe6:	f104 0809 	add.w	r8, r4, #9
 800dbea:	46c1      	mov	r9, r8
 800dbec:	442c      	add	r4, r5
 800dbee:	f819 3b01 	ldrb.w	r3, [r9], #1
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	3b30      	subs	r3, #48	; 0x30
 800dbf6:	220a      	movs	r2, #10
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f7ff ffa1 	bl	800db40 <__multadd>
 800dbfe:	45a1      	cmp	r9, r4
 800dc00:	d1f5      	bne.n	800dbee <__s2b+0x38>
 800dc02:	eb08 0405 	add.w	r4, r8, r5
 800dc06:	3c08      	subs	r4, #8
 800dc08:	1b2d      	subs	r5, r5, r4
 800dc0a:	1963      	adds	r3, r4, r5
 800dc0c:	42bb      	cmp	r3, r7
 800dc0e:	db07      	blt.n	800dc20 <__s2b+0x6a>
 800dc10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc14:	0052      	lsls	r2, r2, #1
 800dc16:	3101      	adds	r1, #1
 800dc18:	e7d9      	b.n	800dbce <__s2b+0x18>
 800dc1a:	340a      	adds	r4, #10
 800dc1c:	2509      	movs	r5, #9
 800dc1e:	e7f3      	b.n	800dc08 <__s2b+0x52>
 800dc20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc24:	4601      	mov	r1, r0
 800dc26:	3b30      	subs	r3, #48	; 0x30
 800dc28:	220a      	movs	r2, #10
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f7ff ff88 	bl	800db40 <__multadd>
 800dc30:	e7eb      	b.n	800dc0a <__s2b+0x54>

0800dc32 <__hi0bits>:
 800dc32:	0c02      	lsrs	r2, r0, #16
 800dc34:	0412      	lsls	r2, r2, #16
 800dc36:	4603      	mov	r3, r0
 800dc38:	b9b2      	cbnz	r2, 800dc68 <__hi0bits+0x36>
 800dc3a:	0403      	lsls	r3, r0, #16
 800dc3c:	2010      	movs	r0, #16
 800dc3e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dc42:	bf04      	itt	eq
 800dc44:	021b      	lsleq	r3, r3, #8
 800dc46:	3008      	addeq	r0, #8
 800dc48:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dc4c:	bf04      	itt	eq
 800dc4e:	011b      	lsleq	r3, r3, #4
 800dc50:	3004      	addeq	r0, #4
 800dc52:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dc56:	bf04      	itt	eq
 800dc58:	009b      	lsleq	r3, r3, #2
 800dc5a:	3002      	addeq	r0, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	db06      	blt.n	800dc6e <__hi0bits+0x3c>
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	d503      	bpl.n	800dc6c <__hi0bits+0x3a>
 800dc64:	3001      	adds	r0, #1
 800dc66:	4770      	bx	lr
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e7e8      	b.n	800dc3e <__hi0bits+0xc>
 800dc6c:	2020      	movs	r0, #32
 800dc6e:	4770      	bx	lr

0800dc70 <__lo0bits>:
 800dc70:	6803      	ldr	r3, [r0, #0]
 800dc72:	f013 0207 	ands.w	r2, r3, #7
 800dc76:	4601      	mov	r1, r0
 800dc78:	d00b      	beq.n	800dc92 <__lo0bits+0x22>
 800dc7a:	07da      	lsls	r2, r3, #31
 800dc7c:	d423      	bmi.n	800dcc6 <__lo0bits+0x56>
 800dc7e:	0798      	lsls	r0, r3, #30
 800dc80:	bf49      	itett	mi
 800dc82:	085b      	lsrmi	r3, r3, #1
 800dc84:	089b      	lsrpl	r3, r3, #2
 800dc86:	2001      	movmi	r0, #1
 800dc88:	600b      	strmi	r3, [r1, #0]
 800dc8a:	bf5c      	itt	pl
 800dc8c:	600b      	strpl	r3, [r1, #0]
 800dc8e:	2002      	movpl	r0, #2
 800dc90:	4770      	bx	lr
 800dc92:	b298      	uxth	r0, r3
 800dc94:	b9a8      	cbnz	r0, 800dcc2 <__lo0bits+0x52>
 800dc96:	0c1b      	lsrs	r3, r3, #16
 800dc98:	2010      	movs	r0, #16
 800dc9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dc9e:	bf04      	itt	eq
 800dca0:	0a1b      	lsreq	r3, r3, #8
 800dca2:	3008      	addeq	r0, #8
 800dca4:	071a      	lsls	r2, r3, #28
 800dca6:	bf04      	itt	eq
 800dca8:	091b      	lsreq	r3, r3, #4
 800dcaa:	3004      	addeq	r0, #4
 800dcac:	079a      	lsls	r2, r3, #30
 800dcae:	bf04      	itt	eq
 800dcb0:	089b      	lsreq	r3, r3, #2
 800dcb2:	3002      	addeq	r0, #2
 800dcb4:	07da      	lsls	r2, r3, #31
 800dcb6:	d402      	bmi.n	800dcbe <__lo0bits+0x4e>
 800dcb8:	085b      	lsrs	r3, r3, #1
 800dcba:	d006      	beq.n	800dcca <__lo0bits+0x5a>
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	600b      	str	r3, [r1, #0]
 800dcc0:	4770      	bx	lr
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	e7e9      	b.n	800dc9a <__lo0bits+0x2a>
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	4770      	bx	lr
 800dcca:	2020      	movs	r0, #32
 800dccc:	4770      	bx	lr

0800dcce <__i2b>:
 800dcce:	b510      	push	{r4, lr}
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	2101      	movs	r1, #1
 800dcd4:	f7ff fee9 	bl	800daaa <_Balloc>
 800dcd8:	2201      	movs	r2, #1
 800dcda:	6144      	str	r4, [r0, #20]
 800dcdc:	6102      	str	r2, [r0, #16]
 800dcde:	bd10      	pop	{r4, pc}

0800dce0 <__multiply>:
 800dce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	4614      	mov	r4, r2
 800dce6:	690a      	ldr	r2, [r1, #16]
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	bfb8      	it	lt
 800dcee:	460b      	movlt	r3, r1
 800dcf0:	4688      	mov	r8, r1
 800dcf2:	bfbc      	itt	lt
 800dcf4:	46a0      	movlt	r8, r4
 800dcf6:	461c      	movlt	r4, r3
 800dcf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dcfc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dd00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd08:	eb07 0609 	add.w	r6, r7, r9
 800dd0c:	42b3      	cmp	r3, r6
 800dd0e:	bfb8      	it	lt
 800dd10:	3101      	addlt	r1, #1
 800dd12:	f7ff feca 	bl	800daaa <_Balloc>
 800dd16:	f100 0514 	add.w	r5, r0, #20
 800dd1a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dd1e:	462b      	mov	r3, r5
 800dd20:	2200      	movs	r2, #0
 800dd22:	4573      	cmp	r3, lr
 800dd24:	d316      	bcc.n	800dd54 <__multiply+0x74>
 800dd26:	f104 0214 	add.w	r2, r4, #20
 800dd2a:	f108 0114 	add.w	r1, r8, #20
 800dd2e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dd32:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	9b00      	ldr	r3, [sp, #0]
 800dd3a:	9201      	str	r2, [sp, #4]
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d80c      	bhi.n	800dd5a <__multiply+0x7a>
 800dd40:	2e00      	cmp	r6, #0
 800dd42:	dd03      	ble.n	800dd4c <__multiply+0x6c>
 800dd44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d05d      	beq.n	800de08 <__multiply+0x128>
 800dd4c:	6106      	str	r6, [r0, #16]
 800dd4e:	b003      	add	sp, #12
 800dd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd54:	f843 2b04 	str.w	r2, [r3], #4
 800dd58:	e7e3      	b.n	800dd22 <__multiply+0x42>
 800dd5a:	f8b2 b000 	ldrh.w	fp, [r2]
 800dd5e:	f1bb 0f00 	cmp.w	fp, #0
 800dd62:	d023      	beq.n	800ddac <__multiply+0xcc>
 800dd64:	4689      	mov	r9, r1
 800dd66:	46ac      	mov	ip, r5
 800dd68:	f04f 0800 	mov.w	r8, #0
 800dd6c:	f859 4b04 	ldr.w	r4, [r9], #4
 800dd70:	f8dc a000 	ldr.w	sl, [ip]
 800dd74:	b2a3      	uxth	r3, r4
 800dd76:	fa1f fa8a 	uxth.w	sl, sl
 800dd7a:	fb0b a303 	mla	r3, fp, r3, sl
 800dd7e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dd82:	f8dc 4000 	ldr.w	r4, [ip]
 800dd86:	4443      	add	r3, r8
 800dd88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dd8c:	fb0b 840a 	mla	r4, fp, sl, r8
 800dd90:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800dd94:	46e2      	mov	sl, ip
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dd9c:	454f      	cmp	r7, r9
 800dd9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dda2:	f84a 3b04 	str.w	r3, [sl], #4
 800dda6:	d82b      	bhi.n	800de00 <__multiply+0x120>
 800dda8:	f8cc 8004 	str.w	r8, [ip, #4]
 800ddac:	9b01      	ldr	r3, [sp, #4]
 800ddae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ddb2:	3204      	adds	r2, #4
 800ddb4:	f1ba 0f00 	cmp.w	sl, #0
 800ddb8:	d020      	beq.n	800ddfc <__multiply+0x11c>
 800ddba:	682b      	ldr	r3, [r5, #0]
 800ddbc:	4689      	mov	r9, r1
 800ddbe:	46a8      	mov	r8, r5
 800ddc0:	f04f 0b00 	mov.w	fp, #0
 800ddc4:	f8b9 c000 	ldrh.w	ip, [r9]
 800ddc8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ddcc:	fb0a 440c 	mla	r4, sl, ip, r4
 800ddd0:	445c      	add	r4, fp
 800ddd2:	46c4      	mov	ip, r8
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ddda:	f84c 3b04 	str.w	r3, [ip], #4
 800ddde:	f859 3b04 	ldr.w	r3, [r9], #4
 800dde2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dde6:	0c1b      	lsrs	r3, r3, #16
 800dde8:	fb0a b303 	mla	r3, sl, r3, fp
 800ddec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ddf0:	454f      	cmp	r7, r9
 800ddf2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ddf6:	d805      	bhi.n	800de04 <__multiply+0x124>
 800ddf8:	f8c8 3004 	str.w	r3, [r8, #4]
 800ddfc:	3504      	adds	r5, #4
 800ddfe:	e79b      	b.n	800dd38 <__multiply+0x58>
 800de00:	46d4      	mov	ip, sl
 800de02:	e7b3      	b.n	800dd6c <__multiply+0x8c>
 800de04:	46e0      	mov	r8, ip
 800de06:	e7dd      	b.n	800ddc4 <__multiply+0xe4>
 800de08:	3e01      	subs	r6, #1
 800de0a:	e799      	b.n	800dd40 <__multiply+0x60>

0800de0c <__pow5mult>:
 800de0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de10:	4615      	mov	r5, r2
 800de12:	f012 0203 	ands.w	r2, r2, #3
 800de16:	4606      	mov	r6, r0
 800de18:	460f      	mov	r7, r1
 800de1a:	d007      	beq.n	800de2c <__pow5mult+0x20>
 800de1c:	3a01      	subs	r2, #1
 800de1e:	4c21      	ldr	r4, [pc, #132]	; (800dea4 <__pow5mult+0x98>)
 800de20:	2300      	movs	r3, #0
 800de22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de26:	f7ff fe8b 	bl	800db40 <__multadd>
 800de2a:	4607      	mov	r7, r0
 800de2c:	10ad      	asrs	r5, r5, #2
 800de2e:	d035      	beq.n	800de9c <__pow5mult+0x90>
 800de30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800de32:	b93c      	cbnz	r4, 800de44 <__pow5mult+0x38>
 800de34:	2010      	movs	r0, #16
 800de36:	f7fc feb7 	bl	800aba8 <malloc>
 800de3a:	6270      	str	r0, [r6, #36]	; 0x24
 800de3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de40:	6004      	str	r4, [r0, #0]
 800de42:	60c4      	str	r4, [r0, #12]
 800de44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de4c:	b94c      	cbnz	r4, 800de62 <__pow5mult+0x56>
 800de4e:	f240 2171 	movw	r1, #625	; 0x271
 800de52:	4630      	mov	r0, r6
 800de54:	f7ff ff3b 	bl	800dcce <__i2b>
 800de58:	2300      	movs	r3, #0
 800de5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800de5e:	4604      	mov	r4, r0
 800de60:	6003      	str	r3, [r0, #0]
 800de62:	f04f 0800 	mov.w	r8, #0
 800de66:	07eb      	lsls	r3, r5, #31
 800de68:	d50a      	bpl.n	800de80 <__pow5mult+0x74>
 800de6a:	4639      	mov	r1, r7
 800de6c:	4622      	mov	r2, r4
 800de6e:	4630      	mov	r0, r6
 800de70:	f7ff ff36 	bl	800dce0 <__multiply>
 800de74:	4639      	mov	r1, r7
 800de76:	4681      	mov	r9, r0
 800de78:	4630      	mov	r0, r6
 800de7a:	f7ff fe4a 	bl	800db12 <_Bfree>
 800de7e:	464f      	mov	r7, r9
 800de80:	106d      	asrs	r5, r5, #1
 800de82:	d00b      	beq.n	800de9c <__pow5mult+0x90>
 800de84:	6820      	ldr	r0, [r4, #0]
 800de86:	b938      	cbnz	r0, 800de98 <__pow5mult+0x8c>
 800de88:	4622      	mov	r2, r4
 800de8a:	4621      	mov	r1, r4
 800de8c:	4630      	mov	r0, r6
 800de8e:	f7ff ff27 	bl	800dce0 <__multiply>
 800de92:	6020      	str	r0, [r4, #0]
 800de94:	f8c0 8000 	str.w	r8, [r0]
 800de98:	4604      	mov	r4, r0
 800de9a:	e7e4      	b.n	800de66 <__pow5mult+0x5a>
 800de9c:	4638      	mov	r0, r7
 800de9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dea2:	bf00      	nop
 800dea4:	0800eb20 	.word	0x0800eb20

0800dea8 <__lshift>:
 800dea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deac:	460c      	mov	r4, r1
 800deae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800deb2:	6923      	ldr	r3, [r4, #16]
 800deb4:	6849      	ldr	r1, [r1, #4]
 800deb6:	eb0a 0903 	add.w	r9, sl, r3
 800deba:	68a3      	ldr	r3, [r4, #8]
 800debc:	4607      	mov	r7, r0
 800debe:	4616      	mov	r6, r2
 800dec0:	f109 0501 	add.w	r5, r9, #1
 800dec4:	42ab      	cmp	r3, r5
 800dec6:	db32      	blt.n	800df2e <__lshift+0x86>
 800dec8:	4638      	mov	r0, r7
 800deca:	f7ff fdee 	bl	800daaa <_Balloc>
 800dece:	2300      	movs	r3, #0
 800ded0:	4680      	mov	r8, r0
 800ded2:	f100 0114 	add.w	r1, r0, #20
 800ded6:	461a      	mov	r2, r3
 800ded8:	4553      	cmp	r3, sl
 800deda:	db2b      	blt.n	800df34 <__lshift+0x8c>
 800dedc:	6920      	ldr	r0, [r4, #16]
 800dede:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dee2:	f104 0314 	add.w	r3, r4, #20
 800dee6:	f016 021f 	ands.w	r2, r6, #31
 800deea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800deee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800def2:	d025      	beq.n	800df40 <__lshift+0x98>
 800def4:	f1c2 0e20 	rsb	lr, r2, #32
 800def8:	2000      	movs	r0, #0
 800defa:	681e      	ldr	r6, [r3, #0]
 800defc:	468a      	mov	sl, r1
 800defe:	4096      	lsls	r6, r2
 800df00:	4330      	orrs	r0, r6
 800df02:	f84a 0b04 	str.w	r0, [sl], #4
 800df06:	f853 0b04 	ldr.w	r0, [r3], #4
 800df0a:	459c      	cmp	ip, r3
 800df0c:	fa20 f00e 	lsr.w	r0, r0, lr
 800df10:	d814      	bhi.n	800df3c <__lshift+0x94>
 800df12:	6048      	str	r0, [r1, #4]
 800df14:	b108      	cbz	r0, 800df1a <__lshift+0x72>
 800df16:	f109 0502 	add.w	r5, r9, #2
 800df1a:	3d01      	subs	r5, #1
 800df1c:	4638      	mov	r0, r7
 800df1e:	f8c8 5010 	str.w	r5, [r8, #16]
 800df22:	4621      	mov	r1, r4
 800df24:	f7ff fdf5 	bl	800db12 <_Bfree>
 800df28:	4640      	mov	r0, r8
 800df2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2e:	3101      	adds	r1, #1
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	e7c7      	b.n	800dec4 <__lshift+0x1c>
 800df34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800df38:	3301      	adds	r3, #1
 800df3a:	e7cd      	b.n	800ded8 <__lshift+0x30>
 800df3c:	4651      	mov	r1, sl
 800df3e:	e7dc      	b.n	800defa <__lshift+0x52>
 800df40:	3904      	subs	r1, #4
 800df42:	f853 2b04 	ldr.w	r2, [r3], #4
 800df46:	f841 2f04 	str.w	r2, [r1, #4]!
 800df4a:	459c      	cmp	ip, r3
 800df4c:	d8f9      	bhi.n	800df42 <__lshift+0x9a>
 800df4e:	e7e4      	b.n	800df1a <__lshift+0x72>

0800df50 <__mcmp>:
 800df50:	6903      	ldr	r3, [r0, #16]
 800df52:	690a      	ldr	r2, [r1, #16]
 800df54:	1a9b      	subs	r3, r3, r2
 800df56:	b530      	push	{r4, r5, lr}
 800df58:	d10c      	bne.n	800df74 <__mcmp+0x24>
 800df5a:	0092      	lsls	r2, r2, #2
 800df5c:	3014      	adds	r0, #20
 800df5e:	3114      	adds	r1, #20
 800df60:	1884      	adds	r4, r0, r2
 800df62:	4411      	add	r1, r2
 800df64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df6c:	4295      	cmp	r5, r2
 800df6e:	d003      	beq.n	800df78 <__mcmp+0x28>
 800df70:	d305      	bcc.n	800df7e <__mcmp+0x2e>
 800df72:	2301      	movs	r3, #1
 800df74:	4618      	mov	r0, r3
 800df76:	bd30      	pop	{r4, r5, pc}
 800df78:	42a0      	cmp	r0, r4
 800df7a:	d3f3      	bcc.n	800df64 <__mcmp+0x14>
 800df7c:	e7fa      	b.n	800df74 <__mcmp+0x24>
 800df7e:	f04f 33ff 	mov.w	r3, #4294967295
 800df82:	e7f7      	b.n	800df74 <__mcmp+0x24>

0800df84 <__mdiff>:
 800df84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df88:	460d      	mov	r5, r1
 800df8a:	4607      	mov	r7, r0
 800df8c:	4611      	mov	r1, r2
 800df8e:	4628      	mov	r0, r5
 800df90:	4614      	mov	r4, r2
 800df92:	f7ff ffdd 	bl	800df50 <__mcmp>
 800df96:	1e06      	subs	r6, r0, #0
 800df98:	d108      	bne.n	800dfac <__mdiff+0x28>
 800df9a:	4631      	mov	r1, r6
 800df9c:	4638      	mov	r0, r7
 800df9e:	f7ff fd84 	bl	800daaa <_Balloc>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800dfa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfac:	bfa4      	itt	ge
 800dfae:	4623      	movge	r3, r4
 800dfb0:	462c      	movge	r4, r5
 800dfb2:	4638      	mov	r0, r7
 800dfb4:	6861      	ldr	r1, [r4, #4]
 800dfb6:	bfa6      	itte	ge
 800dfb8:	461d      	movge	r5, r3
 800dfba:	2600      	movge	r6, #0
 800dfbc:	2601      	movlt	r6, #1
 800dfbe:	f7ff fd74 	bl	800daaa <_Balloc>
 800dfc2:	692b      	ldr	r3, [r5, #16]
 800dfc4:	60c6      	str	r6, [r0, #12]
 800dfc6:	6926      	ldr	r6, [r4, #16]
 800dfc8:	f105 0914 	add.w	r9, r5, #20
 800dfcc:	f104 0214 	add.w	r2, r4, #20
 800dfd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800dfd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800dfd8:	f100 0514 	add.w	r5, r0, #20
 800dfdc:	f04f 0e00 	mov.w	lr, #0
 800dfe0:	f852 ab04 	ldr.w	sl, [r2], #4
 800dfe4:	f859 4b04 	ldr.w	r4, [r9], #4
 800dfe8:	fa1e f18a 	uxtah	r1, lr, sl
 800dfec:	b2a3      	uxth	r3, r4
 800dfee:	1ac9      	subs	r1, r1, r3
 800dff0:	0c23      	lsrs	r3, r4, #16
 800dff2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800dff6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dffa:	b289      	uxth	r1, r1
 800dffc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e000:	45c8      	cmp	r8, r9
 800e002:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e006:	4694      	mov	ip, r2
 800e008:	f845 3b04 	str.w	r3, [r5], #4
 800e00c:	d8e8      	bhi.n	800dfe0 <__mdiff+0x5c>
 800e00e:	45bc      	cmp	ip, r7
 800e010:	d304      	bcc.n	800e01c <__mdiff+0x98>
 800e012:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e016:	b183      	cbz	r3, 800e03a <__mdiff+0xb6>
 800e018:	6106      	str	r6, [r0, #16]
 800e01a:	e7c5      	b.n	800dfa8 <__mdiff+0x24>
 800e01c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e020:	fa1e f381 	uxtah	r3, lr, r1
 800e024:	141a      	asrs	r2, r3, #16
 800e026:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e030:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e034:	f845 3b04 	str.w	r3, [r5], #4
 800e038:	e7e9      	b.n	800e00e <__mdiff+0x8a>
 800e03a:	3e01      	subs	r6, #1
 800e03c:	e7e9      	b.n	800e012 <__mdiff+0x8e>
	...

0800e040 <__ulp>:
 800e040:	4b12      	ldr	r3, [pc, #72]	; (800e08c <__ulp+0x4c>)
 800e042:	ee10 2a90 	vmov	r2, s1
 800e046:	401a      	ands	r2, r3
 800e048:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	dd04      	ble.n	800e05a <__ulp+0x1a>
 800e050:	2000      	movs	r0, #0
 800e052:	4619      	mov	r1, r3
 800e054:	ec41 0b10 	vmov	d0, r0, r1
 800e058:	4770      	bx	lr
 800e05a:	425b      	negs	r3, r3
 800e05c:	151b      	asrs	r3, r3, #20
 800e05e:	2b13      	cmp	r3, #19
 800e060:	f04f 0000 	mov.w	r0, #0
 800e064:	f04f 0100 	mov.w	r1, #0
 800e068:	dc04      	bgt.n	800e074 <__ulp+0x34>
 800e06a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e06e:	fa42 f103 	asr.w	r1, r2, r3
 800e072:	e7ef      	b.n	800e054 <__ulp+0x14>
 800e074:	3b14      	subs	r3, #20
 800e076:	2b1e      	cmp	r3, #30
 800e078:	f04f 0201 	mov.w	r2, #1
 800e07c:	bfda      	itte	le
 800e07e:	f1c3 031f 	rsble	r3, r3, #31
 800e082:	fa02 f303 	lslle.w	r3, r2, r3
 800e086:	4613      	movgt	r3, r2
 800e088:	4618      	mov	r0, r3
 800e08a:	e7e3      	b.n	800e054 <__ulp+0x14>
 800e08c:	7ff00000 	.word	0x7ff00000

0800e090 <__b2d>:
 800e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e092:	6905      	ldr	r5, [r0, #16]
 800e094:	f100 0714 	add.w	r7, r0, #20
 800e098:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e09c:	1f2e      	subs	r6, r5, #4
 800e09e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7ff fdc5 	bl	800dc32 <__hi0bits>
 800e0a8:	f1c0 0320 	rsb	r3, r0, #32
 800e0ac:	280a      	cmp	r0, #10
 800e0ae:	600b      	str	r3, [r1, #0]
 800e0b0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e128 <__b2d+0x98>
 800e0b4:	dc14      	bgt.n	800e0e0 <__b2d+0x50>
 800e0b6:	f1c0 0e0b 	rsb	lr, r0, #11
 800e0ba:	fa24 f10e 	lsr.w	r1, r4, lr
 800e0be:	42b7      	cmp	r7, r6
 800e0c0:	ea41 030c 	orr.w	r3, r1, ip
 800e0c4:	bf34      	ite	cc
 800e0c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e0ca:	2100      	movcs	r1, #0
 800e0cc:	3015      	adds	r0, #21
 800e0ce:	fa04 f000 	lsl.w	r0, r4, r0
 800e0d2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e0d6:	ea40 0201 	orr.w	r2, r0, r1
 800e0da:	ec43 2b10 	vmov	d0, r2, r3
 800e0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0e0:	42b7      	cmp	r7, r6
 800e0e2:	bf3a      	itte	cc
 800e0e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800e0e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e0ec:	2100      	movcs	r1, #0
 800e0ee:	380b      	subs	r0, #11
 800e0f0:	d015      	beq.n	800e11e <__b2d+0x8e>
 800e0f2:	4084      	lsls	r4, r0
 800e0f4:	f1c0 0520 	rsb	r5, r0, #32
 800e0f8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e0fc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e100:	42be      	cmp	r6, r7
 800e102:	fa21 fc05 	lsr.w	ip, r1, r5
 800e106:	ea44 030c 	orr.w	r3, r4, ip
 800e10a:	bf8c      	ite	hi
 800e10c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e110:	2400      	movls	r4, #0
 800e112:	fa01 f000 	lsl.w	r0, r1, r0
 800e116:	40ec      	lsrs	r4, r5
 800e118:	ea40 0204 	orr.w	r2, r0, r4
 800e11c:	e7dd      	b.n	800e0da <__b2d+0x4a>
 800e11e:	ea44 030c 	orr.w	r3, r4, ip
 800e122:	460a      	mov	r2, r1
 800e124:	e7d9      	b.n	800e0da <__b2d+0x4a>
 800e126:	bf00      	nop
 800e128:	3ff00000 	.word	0x3ff00000

0800e12c <__d2b>:
 800e12c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e130:	460e      	mov	r6, r1
 800e132:	2101      	movs	r1, #1
 800e134:	ec59 8b10 	vmov	r8, r9, d0
 800e138:	4615      	mov	r5, r2
 800e13a:	f7ff fcb6 	bl	800daaa <_Balloc>
 800e13e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e142:	4607      	mov	r7, r0
 800e144:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e148:	bb34      	cbnz	r4, 800e198 <__d2b+0x6c>
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	f1b8 0300 	subs.w	r3, r8, #0
 800e150:	d027      	beq.n	800e1a2 <__d2b+0x76>
 800e152:	a802      	add	r0, sp, #8
 800e154:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e158:	f7ff fd8a 	bl	800dc70 <__lo0bits>
 800e15c:	9900      	ldr	r1, [sp, #0]
 800e15e:	b1f0      	cbz	r0, 800e19e <__d2b+0x72>
 800e160:	9a01      	ldr	r2, [sp, #4]
 800e162:	f1c0 0320 	rsb	r3, r0, #32
 800e166:	fa02 f303 	lsl.w	r3, r2, r3
 800e16a:	430b      	orrs	r3, r1
 800e16c:	40c2      	lsrs	r2, r0
 800e16e:	617b      	str	r3, [r7, #20]
 800e170:	9201      	str	r2, [sp, #4]
 800e172:	9b01      	ldr	r3, [sp, #4]
 800e174:	61bb      	str	r3, [r7, #24]
 800e176:	2b00      	cmp	r3, #0
 800e178:	bf14      	ite	ne
 800e17a:	2102      	movne	r1, #2
 800e17c:	2101      	moveq	r1, #1
 800e17e:	6139      	str	r1, [r7, #16]
 800e180:	b1c4      	cbz	r4, 800e1b4 <__d2b+0x88>
 800e182:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e186:	4404      	add	r4, r0
 800e188:	6034      	str	r4, [r6, #0]
 800e18a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e18e:	6028      	str	r0, [r5, #0]
 800e190:	4638      	mov	r0, r7
 800e192:	b003      	add	sp, #12
 800e194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e19c:	e7d5      	b.n	800e14a <__d2b+0x1e>
 800e19e:	6179      	str	r1, [r7, #20]
 800e1a0:	e7e7      	b.n	800e172 <__d2b+0x46>
 800e1a2:	a801      	add	r0, sp, #4
 800e1a4:	f7ff fd64 	bl	800dc70 <__lo0bits>
 800e1a8:	9b01      	ldr	r3, [sp, #4]
 800e1aa:	617b      	str	r3, [r7, #20]
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	6139      	str	r1, [r7, #16]
 800e1b0:	3020      	adds	r0, #32
 800e1b2:	e7e5      	b.n	800e180 <__d2b+0x54>
 800e1b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e1b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e1bc:	6030      	str	r0, [r6, #0]
 800e1be:	6918      	ldr	r0, [r3, #16]
 800e1c0:	f7ff fd37 	bl	800dc32 <__hi0bits>
 800e1c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e1c8:	e7e1      	b.n	800e18e <__d2b+0x62>

0800e1ca <__ratio>:
 800e1ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ce:	4688      	mov	r8, r1
 800e1d0:	4669      	mov	r1, sp
 800e1d2:	4681      	mov	r9, r0
 800e1d4:	f7ff ff5c 	bl	800e090 <__b2d>
 800e1d8:	a901      	add	r1, sp, #4
 800e1da:	4640      	mov	r0, r8
 800e1dc:	ec57 6b10 	vmov	r6, r7, d0
 800e1e0:	f7ff ff56 	bl	800e090 <__b2d>
 800e1e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e1ec:	eba3 0c02 	sub.w	ip, r3, r2
 800e1f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e1f4:	1a9b      	subs	r3, r3, r2
 800e1f6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e1fa:	ec5b ab10 	vmov	sl, fp, d0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	bfce      	itee	gt
 800e202:	463a      	movgt	r2, r7
 800e204:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e208:	465a      	movle	r2, fp
 800e20a:	4659      	mov	r1, fp
 800e20c:	463d      	mov	r5, r7
 800e20e:	bfd4      	ite	le
 800e210:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e214:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e218:	4630      	mov	r0, r6
 800e21a:	ee10 2a10 	vmov	r2, s0
 800e21e:	460b      	mov	r3, r1
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 fb1b 	bl	800085c <__aeabi_ddiv>
 800e226:	ec41 0b10 	vmov	d0, r0, r1
 800e22a:	b003      	add	sp, #12
 800e22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e230 <__copybits>:
 800e230:	3901      	subs	r1, #1
 800e232:	b510      	push	{r4, lr}
 800e234:	1149      	asrs	r1, r1, #5
 800e236:	6914      	ldr	r4, [r2, #16]
 800e238:	3101      	adds	r1, #1
 800e23a:	f102 0314 	add.w	r3, r2, #20
 800e23e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e242:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e246:	42a3      	cmp	r3, r4
 800e248:	4602      	mov	r2, r0
 800e24a:	d303      	bcc.n	800e254 <__copybits+0x24>
 800e24c:	2300      	movs	r3, #0
 800e24e:	428a      	cmp	r2, r1
 800e250:	d305      	bcc.n	800e25e <__copybits+0x2e>
 800e252:	bd10      	pop	{r4, pc}
 800e254:	f853 2b04 	ldr.w	r2, [r3], #4
 800e258:	f840 2b04 	str.w	r2, [r0], #4
 800e25c:	e7f3      	b.n	800e246 <__copybits+0x16>
 800e25e:	f842 3b04 	str.w	r3, [r2], #4
 800e262:	e7f4      	b.n	800e24e <__copybits+0x1e>

0800e264 <__any_on>:
 800e264:	f100 0214 	add.w	r2, r0, #20
 800e268:	6900      	ldr	r0, [r0, #16]
 800e26a:	114b      	asrs	r3, r1, #5
 800e26c:	4298      	cmp	r0, r3
 800e26e:	b510      	push	{r4, lr}
 800e270:	db11      	blt.n	800e296 <__any_on+0x32>
 800e272:	dd0a      	ble.n	800e28a <__any_on+0x26>
 800e274:	f011 011f 	ands.w	r1, r1, #31
 800e278:	d007      	beq.n	800e28a <__any_on+0x26>
 800e27a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e27e:	fa24 f001 	lsr.w	r0, r4, r1
 800e282:	fa00 f101 	lsl.w	r1, r0, r1
 800e286:	428c      	cmp	r4, r1
 800e288:	d10b      	bne.n	800e2a2 <__any_on+0x3e>
 800e28a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e28e:	4293      	cmp	r3, r2
 800e290:	d803      	bhi.n	800e29a <__any_on+0x36>
 800e292:	2000      	movs	r0, #0
 800e294:	bd10      	pop	{r4, pc}
 800e296:	4603      	mov	r3, r0
 800e298:	e7f7      	b.n	800e28a <__any_on+0x26>
 800e29a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e29e:	2900      	cmp	r1, #0
 800e2a0:	d0f5      	beq.n	800e28e <__any_on+0x2a>
 800e2a2:	2001      	movs	r0, #1
 800e2a4:	e7f6      	b.n	800e294 <__any_on+0x30>

0800e2a6 <_calloc_r>:
 800e2a6:	b538      	push	{r3, r4, r5, lr}
 800e2a8:	fb02 f401 	mul.w	r4, r2, r1
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	f7fc fce1 	bl	800ac74 <_malloc_r>
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	b118      	cbz	r0, 800e2be <_calloc_r+0x18>
 800e2b6:	4622      	mov	r2, r4
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	f7fc fc85 	bl	800abc8 <memset>
 800e2be:	4628      	mov	r0, r5
 800e2c0:	bd38      	pop	{r3, r4, r5, pc}

0800e2c2 <__ssputs_r>:
 800e2c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c6:	688e      	ldr	r6, [r1, #8]
 800e2c8:	429e      	cmp	r6, r3
 800e2ca:	4682      	mov	sl, r0
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	4690      	mov	r8, r2
 800e2d0:	4699      	mov	r9, r3
 800e2d2:	d837      	bhi.n	800e344 <__ssputs_r+0x82>
 800e2d4:	898a      	ldrh	r2, [r1, #12]
 800e2d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2da:	d031      	beq.n	800e340 <__ssputs_r+0x7e>
 800e2dc:	6825      	ldr	r5, [r4, #0]
 800e2de:	6909      	ldr	r1, [r1, #16]
 800e2e0:	1a6f      	subs	r7, r5, r1
 800e2e2:	6965      	ldr	r5, [r4, #20]
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2ea:	fb95 f5f3 	sdiv	r5, r5, r3
 800e2ee:	f109 0301 	add.w	r3, r9, #1
 800e2f2:	443b      	add	r3, r7
 800e2f4:	429d      	cmp	r5, r3
 800e2f6:	bf38      	it	cc
 800e2f8:	461d      	movcc	r5, r3
 800e2fa:	0553      	lsls	r3, r2, #21
 800e2fc:	d530      	bpl.n	800e360 <__ssputs_r+0x9e>
 800e2fe:	4629      	mov	r1, r5
 800e300:	f7fc fcb8 	bl	800ac74 <_malloc_r>
 800e304:	4606      	mov	r6, r0
 800e306:	b950      	cbnz	r0, 800e31e <__ssputs_r+0x5c>
 800e308:	230c      	movs	r3, #12
 800e30a:	f8ca 3000 	str.w	r3, [sl]
 800e30e:	89a3      	ldrh	r3, [r4, #12]
 800e310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e314:	81a3      	strh	r3, [r4, #12]
 800e316:	f04f 30ff 	mov.w	r0, #4294967295
 800e31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e31e:	463a      	mov	r2, r7
 800e320:	6921      	ldr	r1, [r4, #16]
 800e322:	f7ff fbb5 	bl	800da90 <memcpy>
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e330:	81a3      	strh	r3, [r4, #12]
 800e332:	6126      	str	r6, [r4, #16]
 800e334:	6165      	str	r5, [r4, #20]
 800e336:	443e      	add	r6, r7
 800e338:	1bed      	subs	r5, r5, r7
 800e33a:	6026      	str	r6, [r4, #0]
 800e33c:	60a5      	str	r5, [r4, #8]
 800e33e:	464e      	mov	r6, r9
 800e340:	454e      	cmp	r6, r9
 800e342:	d900      	bls.n	800e346 <__ssputs_r+0x84>
 800e344:	464e      	mov	r6, r9
 800e346:	4632      	mov	r2, r6
 800e348:	4641      	mov	r1, r8
 800e34a:	6820      	ldr	r0, [r4, #0]
 800e34c:	f000 f92b 	bl	800e5a6 <memmove>
 800e350:	68a3      	ldr	r3, [r4, #8]
 800e352:	1b9b      	subs	r3, r3, r6
 800e354:	60a3      	str	r3, [r4, #8]
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	441e      	add	r6, r3
 800e35a:	6026      	str	r6, [r4, #0]
 800e35c:	2000      	movs	r0, #0
 800e35e:	e7dc      	b.n	800e31a <__ssputs_r+0x58>
 800e360:	462a      	mov	r2, r5
 800e362:	f000 f939 	bl	800e5d8 <_realloc_r>
 800e366:	4606      	mov	r6, r0
 800e368:	2800      	cmp	r0, #0
 800e36a:	d1e2      	bne.n	800e332 <__ssputs_r+0x70>
 800e36c:	6921      	ldr	r1, [r4, #16]
 800e36e:	4650      	mov	r0, sl
 800e370:	f7fc fc32 	bl	800abd8 <_free_r>
 800e374:	e7c8      	b.n	800e308 <__ssputs_r+0x46>
	...

0800e378 <_svfiprintf_r>:
 800e378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e37c:	461d      	mov	r5, r3
 800e37e:	898b      	ldrh	r3, [r1, #12]
 800e380:	061f      	lsls	r7, r3, #24
 800e382:	b09d      	sub	sp, #116	; 0x74
 800e384:	4680      	mov	r8, r0
 800e386:	460c      	mov	r4, r1
 800e388:	4616      	mov	r6, r2
 800e38a:	d50f      	bpl.n	800e3ac <_svfiprintf_r+0x34>
 800e38c:	690b      	ldr	r3, [r1, #16]
 800e38e:	b96b      	cbnz	r3, 800e3ac <_svfiprintf_r+0x34>
 800e390:	2140      	movs	r1, #64	; 0x40
 800e392:	f7fc fc6f 	bl	800ac74 <_malloc_r>
 800e396:	6020      	str	r0, [r4, #0]
 800e398:	6120      	str	r0, [r4, #16]
 800e39a:	b928      	cbnz	r0, 800e3a8 <_svfiprintf_r+0x30>
 800e39c:	230c      	movs	r3, #12
 800e39e:	f8c8 3000 	str.w	r3, [r8]
 800e3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a6:	e0c8      	b.n	800e53a <_svfiprintf_r+0x1c2>
 800e3a8:	2340      	movs	r3, #64	; 0x40
 800e3aa:	6163      	str	r3, [r4, #20]
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b0:	2320      	movs	r3, #32
 800e3b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3b6:	2330      	movs	r3, #48	; 0x30
 800e3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3bc:	9503      	str	r5, [sp, #12]
 800e3be:	f04f 0b01 	mov.w	fp, #1
 800e3c2:	4637      	mov	r7, r6
 800e3c4:	463d      	mov	r5, r7
 800e3c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e3ca:	b10b      	cbz	r3, 800e3d0 <_svfiprintf_r+0x58>
 800e3cc:	2b25      	cmp	r3, #37	; 0x25
 800e3ce:	d13e      	bne.n	800e44e <_svfiprintf_r+0xd6>
 800e3d0:	ebb7 0a06 	subs.w	sl, r7, r6
 800e3d4:	d00b      	beq.n	800e3ee <_svfiprintf_r+0x76>
 800e3d6:	4653      	mov	r3, sl
 800e3d8:	4632      	mov	r2, r6
 800e3da:	4621      	mov	r1, r4
 800e3dc:	4640      	mov	r0, r8
 800e3de:	f7ff ff70 	bl	800e2c2 <__ssputs_r>
 800e3e2:	3001      	adds	r0, #1
 800e3e4:	f000 80a4 	beq.w	800e530 <_svfiprintf_r+0x1b8>
 800e3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ea:	4453      	add	r3, sl
 800e3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ee:	783b      	ldrb	r3, [r7, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	f000 809d 	beq.w	800e530 <_svfiprintf_r+0x1b8>
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e400:	9304      	str	r3, [sp, #16]
 800e402:	9307      	str	r3, [sp, #28]
 800e404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e408:	931a      	str	r3, [sp, #104]	; 0x68
 800e40a:	462f      	mov	r7, r5
 800e40c:	2205      	movs	r2, #5
 800e40e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e412:	4850      	ldr	r0, [pc, #320]	; (800e554 <_svfiprintf_r+0x1dc>)
 800e414:	f7f1 feec 	bl	80001f0 <memchr>
 800e418:	9b04      	ldr	r3, [sp, #16]
 800e41a:	b9d0      	cbnz	r0, 800e452 <_svfiprintf_r+0xda>
 800e41c:	06d9      	lsls	r1, r3, #27
 800e41e:	bf44      	itt	mi
 800e420:	2220      	movmi	r2, #32
 800e422:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e426:	071a      	lsls	r2, r3, #28
 800e428:	bf44      	itt	mi
 800e42a:	222b      	movmi	r2, #43	; 0x2b
 800e42c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e430:	782a      	ldrb	r2, [r5, #0]
 800e432:	2a2a      	cmp	r2, #42	; 0x2a
 800e434:	d015      	beq.n	800e462 <_svfiprintf_r+0xea>
 800e436:	9a07      	ldr	r2, [sp, #28]
 800e438:	462f      	mov	r7, r5
 800e43a:	2000      	movs	r0, #0
 800e43c:	250a      	movs	r5, #10
 800e43e:	4639      	mov	r1, r7
 800e440:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e444:	3b30      	subs	r3, #48	; 0x30
 800e446:	2b09      	cmp	r3, #9
 800e448:	d94d      	bls.n	800e4e6 <_svfiprintf_r+0x16e>
 800e44a:	b1b8      	cbz	r0, 800e47c <_svfiprintf_r+0x104>
 800e44c:	e00f      	b.n	800e46e <_svfiprintf_r+0xf6>
 800e44e:	462f      	mov	r7, r5
 800e450:	e7b8      	b.n	800e3c4 <_svfiprintf_r+0x4c>
 800e452:	4a40      	ldr	r2, [pc, #256]	; (800e554 <_svfiprintf_r+0x1dc>)
 800e454:	1a80      	subs	r0, r0, r2
 800e456:	fa0b f000 	lsl.w	r0, fp, r0
 800e45a:	4318      	orrs	r0, r3
 800e45c:	9004      	str	r0, [sp, #16]
 800e45e:	463d      	mov	r5, r7
 800e460:	e7d3      	b.n	800e40a <_svfiprintf_r+0x92>
 800e462:	9a03      	ldr	r2, [sp, #12]
 800e464:	1d11      	adds	r1, r2, #4
 800e466:	6812      	ldr	r2, [r2, #0]
 800e468:	9103      	str	r1, [sp, #12]
 800e46a:	2a00      	cmp	r2, #0
 800e46c:	db01      	blt.n	800e472 <_svfiprintf_r+0xfa>
 800e46e:	9207      	str	r2, [sp, #28]
 800e470:	e004      	b.n	800e47c <_svfiprintf_r+0x104>
 800e472:	4252      	negs	r2, r2
 800e474:	f043 0302 	orr.w	r3, r3, #2
 800e478:	9207      	str	r2, [sp, #28]
 800e47a:	9304      	str	r3, [sp, #16]
 800e47c:	783b      	ldrb	r3, [r7, #0]
 800e47e:	2b2e      	cmp	r3, #46	; 0x2e
 800e480:	d10c      	bne.n	800e49c <_svfiprintf_r+0x124>
 800e482:	787b      	ldrb	r3, [r7, #1]
 800e484:	2b2a      	cmp	r3, #42	; 0x2a
 800e486:	d133      	bne.n	800e4f0 <_svfiprintf_r+0x178>
 800e488:	9b03      	ldr	r3, [sp, #12]
 800e48a:	1d1a      	adds	r2, r3, #4
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	9203      	str	r2, [sp, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	bfb8      	it	lt
 800e494:	f04f 33ff 	movlt.w	r3, #4294967295
 800e498:	3702      	adds	r7, #2
 800e49a:	9305      	str	r3, [sp, #20]
 800e49c:	4d2e      	ldr	r5, [pc, #184]	; (800e558 <_svfiprintf_r+0x1e0>)
 800e49e:	7839      	ldrb	r1, [r7, #0]
 800e4a0:	2203      	movs	r2, #3
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	f7f1 fea4 	bl	80001f0 <memchr>
 800e4a8:	b138      	cbz	r0, 800e4ba <_svfiprintf_r+0x142>
 800e4aa:	2340      	movs	r3, #64	; 0x40
 800e4ac:	1b40      	subs	r0, r0, r5
 800e4ae:	fa03 f000 	lsl.w	r0, r3, r0
 800e4b2:	9b04      	ldr	r3, [sp, #16]
 800e4b4:	4303      	orrs	r3, r0
 800e4b6:	3701      	adds	r7, #1
 800e4b8:	9304      	str	r3, [sp, #16]
 800e4ba:	7839      	ldrb	r1, [r7, #0]
 800e4bc:	4827      	ldr	r0, [pc, #156]	; (800e55c <_svfiprintf_r+0x1e4>)
 800e4be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4c2:	2206      	movs	r2, #6
 800e4c4:	1c7e      	adds	r6, r7, #1
 800e4c6:	f7f1 fe93 	bl	80001f0 <memchr>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	d038      	beq.n	800e540 <_svfiprintf_r+0x1c8>
 800e4ce:	4b24      	ldr	r3, [pc, #144]	; (800e560 <_svfiprintf_r+0x1e8>)
 800e4d0:	bb13      	cbnz	r3, 800e518 <_svfiprintf_r+0x1a0>
 800e4d2:	9b03      	ldr	r3, [sp, #12]
 800e4d4:	3307      	adds	r3, #7
 800e4d6:	f023 0307 	bic.w	r3, r3, #7
 800e4da:	3308      	adds	r3, #8
 800e4dc:	9303      	str	r3, [sp, #12]
 800e4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4e0:	444b      	add	r3, r9
 800e4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4e4:	e76d      	b.n	800e3c2 <_svfiprintf_r+0x4a>
 800e4e6:	fb05 3202 	mla	r2, r5, r2, r3
 800e4ea:	2001      	movs	r0, #1
 800e4ec:	460f      	mov	r7, r1
 800e4ee:	e7a6      	b.n	800e43e <_svfiprintf_r+0xc6>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	3701      	adds	r7, #1
 800e4f4:	9305      	str	r3, [sp, #20]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	250a      	movs	r5, #10
 800e4fa:	4638      	mov	r0, r7
 800e4fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e500:	3a30      	subs	r2, #48	; 0x30
 800e502:	2a09      	cmp	r2, #9
 800e504:	d903      	bls.n	800e50e <_svfiprintf_r+0x196>
 800e506:	2b00      	cmp	r3, #0
 800e508:	d0c8      	beq.n	800e49c <_svfiprintf_r+0x124>
 800e50a:	9105      	str	r1, [sp, #20]
 800e50c:	e7c6      	b.n	800e49c <_svfiprintf_r+0x124>
 800e50e:	fb05 2101 	mla	r1, r5, r1, r2
 800e512:	2301      	movs	r3, #1
 800e514:	4607      	mov	r7, r0
 800e516:	e7f0      	b.n	800e4fa <_svfiprintf_r+0x182>
 800e518:	ab03      	add	r3, sp, #12
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	4622      	mov	r2, r4
 800e51e:	4b11      	ldr	r3, [pc, #68]	; (800e564 <_svfiprintf_r+0x1ec>)
 800e520:	a904      	add	r1, sp, #16
 800e522:	4640      	mov	r0, r8
 800e524:	f7fc fc94 	bl	800ae50 <_printf_float>
 800e528:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e52c:	4681      	mov	r9, r0
 800e52e:	d1d6      	bne.n	800e4de <_svfiprintf_r+0x166>
 800e530:	89a3      	ldrh	r3, [r4, #12]
 800e532:	065b      	lsls	r3, r3, #25
 800e534:	f53f af35 	bmi.w	800e3a2 <_svfiprintf_r+0x2a>
 800e538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e53a:	b01d      	add	sp, #116	; 0x74
 800e53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e540:	ab03      	add	r3, sp, #12
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	4622      	mov	r2, r4
 800e546:	4b07      	ldr	r3, [pc, #28]	; (800e564 <_svfiprintf_r+0x1ec>)
 800e548:	a904      	add	r1, sp, #16
 800e54a:	4640      	mov	r0, r8
 800e54c:	f7fc ff36 	bl	800b3bc <_printf_i>
 800e550:	e7ea      	b.n	800e528 <_svfiprintf_r+0x1b0>
 800e552:	bf00      	nop
 800e554:	0800eb2c 	.word	0x0800eb2c
 800e558:	0800eb32 	.word	0x0800eb32
 800e55c:	0800eb36 	.word	0x0800eb36
 800e560:	0800ae51 	.word	0x0800ae51
 800e564:	0800e2c3 	.word	0x0800e2c3

0800e568 <strncmp>:
 800e568:	b510      	push	{r4, lr}
 800e56a:	b16a      	cbz	r2, 800e588 <strncmp+0x20>
 800e56c:	3901      	subs	r1, #1
 800e56e:	1884      	adds	r4, r0, r2
 800e570:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e574:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e578:	4293      	cmp	r3, r2
 800e57a:	d103      	bne.n	800e584 <strncmp+0x1c>
 800e57c:	42a0      	cmp	r0, r4
 800e57e:	d001      	beq.n	800e584 <strncmp+0x1c>
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1f5      	bne.n	800e570 <strncmp+0x8>
 800e584:	1a98      	subs	r0, r3, r2
 800e586:	bd10      	pop	{r4, pc}
 800e588:	4610      	mov	r0, r2
 800e58a:	e7fc      	b.n	800e586 <strncmp+0x1e>

0800e58c <__ascii_wctomb>:
 800e58c:	b149      	cbz	r1, 800e5a2 <__ascii_wctomb+0x16>
 800e58e:	2aff      	cmp	r2, #255	; 0xff
 800e590:	bf85      	ittet	hi
 800e592:	238a      	movhi	r3, #138	; 0x8a
 800e594:	6003      	strhi	r3, [r0, #0]
 800e596:	700a      	strbls	r2, [r1, #0]
 800e598:	f04f 30ff 	movhi.w	r0, #4294967295
 800e59c:	bf98      	it	ls
 800e59e:	2001      	movls	r0, #1
 800e5a0:	4770      	bx	lr
 800e5a2:	4608      	mov	r0, r1
 800e5a4:	4770      	bx	lr

0800e5a6 <memmove>:
 800e5a6:	4288      	cmp	r0, r1
 800e5a8:	b510      	push	{r4, lr}
 800e5aa:	eb01 0302 	add.w	r3, r1, r2
 800e5ae:	d807      	bhi.n	800e5c0 <memmove+0x1a>
 800e5b0:	1e42      	subs	r2, r0, #1
 800e5b2:	4299      	cmp	r1, r3
 800e5b4:	d00a      	beq.n	800e5cc <memmove+0x26>
 800e5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e5be:	e7f8      	b.n	800e5b2 <memmove+0xc>
 800e5c0:	4283      	cmp	r3, r0
 800e5c2:	d9f5      	bls.n	800e5b0 <memmove+0xa>
 800e5c4:	1881      	adds	r1, r0, r2
 800e5c6:	1ad2      	subs	r2, r2, r3
 800e5c8:	42d3      	cmn	r3, r2
 800e5ca:	d100      	bne.n	800e5ce <memmove+0x28>
 800e5cc:	bd10      	pop	{r4, pc}
 800e5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e5d6:	e7f7      	b.n	800e5c8 <memmove+0x22>

0800e5d8 <_realloc_r>:
 800e5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5da:	4607      	mov	r7, r0
 800e5dc:	4614      	mov	r4, r2
 800e5de:	460e      	mov	r6, r1
 800e5e0:	b921      	cbnz	r1, 800e5ec <_realloc_r+0x14>
 800e5e2:	4611      	mov	r1, r2
 800e5e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e5e8:	f7fc bb44 	b.w	800ac74 <_malloc_r>
 800e5ec:	b922      	cbnz	r2, 800e5f8 <_realloc_r+0x20>
 800e5ee:	f7fc faf3 	bl	800abd8 <_free_r>
 800e5f2:	4625      	mov	r5, r4
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5f8:	f000 f814 	bl	800e624 <_malloc_usable_size_r>
 800e5fc:	42a0      	cmp	r0, r4
 800e5fe:	d20f      	bcs.n	800e620 <_realloc_r+0x48>
 800e600:	4621      	mov	r1, r4
 800e602:	4638      	mov	r0, r7
 800e604:	f7fc fb36 	bl	800ac74 <_malloc_r>
 800e608:	4605      	mov	r5, r0
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d0f2      	beq.n	800e5f4 <_realloc_r+0x1c>
 800e60e:	4631      	mov	r1, r6
 800e610:	4622      	mov	r2, r4
 800e612:	f7ff fa3d 	bl	800da90 <memcpy>
 800e616:	4631      	mov	r1, r6
 800e618:	4638      	mov	r0, r7
 800e61a:	f7fc fadd 	bl	800abd8 <_free_r>
 800e61e:	e7e9      	b.n	800e5f4 <_realloc_r+0x1c>
 800e620:	4635      	mov	r5, r6
 800e622:	e7e7      	b.n	800e5f4 <_realloc_r+0x1c>

0800e624 <_malloc_usable_size_r>:
 800e624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e628:	1f18      	subs	r0, r3, #4
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	bfbc      	itt	lt
 800e62e:	580b      	ldrlt	r3, [r1, r0]
 800e630:	18c0      	addlt	r0, r0, r3
 800e632:	4770      	bx	lr

0800e634 <sqrt>:
 800e634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e638:	ed2d 8b02 	vpush	{d8}
 800e63c:	b08b      	sub	sp, #44	; 0x2c
 800e63e:	ec55 4b10 	vmov	r4, r5, d0
 800e642:	f000 f851 	bl	800e6e8 <__ieee754_sqrt>
 800e646:	4b26      	ldr	r3, [pc, #152]	; (800e6e0 <sqrt+0xac>)
 800e648:	eeb0 8a40 	vmov.f32	s16, s0
 800e64c:	eef0 8a60 	vmov.f32	s17, s1
 800e650:	f993 6000 	ldrsb.w	r6, [r3]
 800e654:	1c73      	adds	r3, r6, #1
 800e656:	d02a      	beq.n	800e6ae <sqrt+0x7a>
 800e658:	4622      	mov	r2, r4
 800e65a:	462b      	mov	r3, r5
 800e65c:	4620      	mov	r0, r4
 800e65e:	4629      	mov	r1, r5
 800e660:	f7f2 fa6c 	bl	8000b3c <__aeabi_dcmpun>
 800e664:	4607      	mov	r7, r0
 800e666:	bb10      	cbnz	r0, 800e6ae <sqrt+0x7a>
 800e668:	f04f 0800 	mov.w	r8, #0
 800e66c:	f04f 0900 	mov.w	r9, #0
 800e670:	4642      	mov	r2, r8
 800e672:	464b      	mov	r3, r9
 800e674:	4620      	mov	r0, r4
 800e676:	4629      	mov	r1, r5
 800e678:	f7f2 fa38 	bl	8000aec <__aeabi_dcmplt>
 800e67c:	b1b8      	cbz	r0, 800e6ae <sqrt+0x7a>
 800e67e:	2301      	movs	r3, #1
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	4b18      	ldr	r3, [pc, #96]	; (800e6e4 <sqrt+0xb0>)
 800e684:	9301      	str	r3, [sp, #4]
 800e686:	9708      	str	r7, [sp, #32]
 800e688:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800e68c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e690:	b9b6      	cbnz	r6, 800e6c0 <sqrt+0x8c>
 800e692:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e696:	4668      	mov	r0, sp
 800e698:	f000 f8d6 	bl	800e848 <matherr>
 800e69c:	b1d0      	cbz	r0, 800e6d4 <sqrt+0xa0>
 800e69e:	9b08      	ldr	r3, [sp, #32]
 800e6a0:	b11b      	cbz	r3, 800e6aa <sqrt+0x76>
 800e6a2:	f7fc fa57 	bl	800ab54 <__errno>
 800e6a6:	9b08      	ldr	r3, [sp, #32]
 800e6a8:	6003      	str	r3, [r0, #0]
 800e6aa:	ed9d 8b06 	vldr	d8, [sp, #24]
 800e6ae:	eeb0 0a48 	vmov.f32	s0, s16
 800e6b2:	eef0 0a68 	vmov.f32	s1, s17
 800e6b6:	b00b      	add	sp, #44	; 0x2c
 800e6b8:	ecbd 8b02 	vpop	{d8}
 800e6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6c0:	4642      	mov	r2, r8
 800e6c2:	464b      	mov	r3, r9
 800e6c4:	4640      	mov	r0, r8
 800e6c6:	4649      	mov	r1, r9
 800e6c8:	f7f2 f8c8 	bl	800085c <__aeabi_ddiv>
 800e6cc:	2e02      	cmp	r6, #2
 800e6ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e6d2:	d1e0      	bne.n	800e696 <sqrt+0x62>
 800e6d4:	f7fc fa3e 	bl	800ab54 <__errno>
 800e6d8:	2321      	movs	r3, #33	; 0x21
 800e6da:	6003      	str	r3, [r0, #0]
 800e6dc:	e7df      	b.n	800e69e <sqrt+0x6a>
 800e6de:	bf00      	nop
 800e6e0:	200003c0 	.word	0x200003c0
 800e6e4:	0800ec3e 	.word	0x0800ec3e

0800e6e8 <__ieee754_sqrt>:
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	4955      	ldr	r1, [pc, #340]	; (800e844 <__ieee754_sqrt+0x15c>)
 800e6ee:	ec55 4b10 	vmov	r4, r5, d0
 800e6f2:	43a9      	bics	r1, r5
 800e6f4:	462b      	mov	r3, r5
 800e6f6:	462a      	mov	r2, r5
 800e6f8:	d112      	bne.n	800e720 <__ieee754_sqrt+0x38>
 800e6fa:	ee10 2a10 	vmov	r2, s0
 800e6fe:	ee10 0a10 	vmov	r0, s0
 800e702:	4629      	mov	r1, r5
 800e704:	f7f1 ff80 	bl	8000608 <__aeabi_dmul>
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	4620      	mov	r0, r4
 800e70e:	4629      	mov	r1, r5
 800e710:	f7f1 fdc4 	bl	800029c <__adddf3>
 800e714:	4604      	mov	r4, r0
 800e716:	460d      	mov	r5, r1
 800e718:	ec45 4b10 	vmov	d0, r4, r5
 800e71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e720:	2d00      	cmp	r5, #0
 800e722:	ee10 0a10 	vmov	r0, s0
 800e726:	4621      	mov	r1, r4
 800e728:	dc0f      	bgt.n	800e74a <__ieee754_sqrt+0x62>
 800e72a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e72e:	4330      	orrs	r0, r6
 800e730:	d0f2      	beq.n	800e718 <__ieee754_sqrt+0x30>
 800e732:	b155      	cbz	r5, 800e74a <__ieee754_sqrt+0x62>
 800e734:	ee10 2a10 	vmov	r2, s0
 800e738:	4620      	mov	r0, r4
 800e73a:	4629      	mov	r1, r5
 800e73c:	f7f1 fdac 	bl	8000298 <__aeabi_dsub>
 800e740:	4602      	mov	r2, r0
 800e742:	460b      	mov	r3, r1
 800e744:	f7f2 f88a 	bl	800085c <__aeabi_ddiv>
 800e748:	e7e4      	b.n	800e714 <__ieee754_sqrt+0x2c>
 800e74a:	151b      	asrs	r3, r3, #20
 800e74c:	d073      	beq.n	800e836 <__ieee754_sqrt+0x14e>
 800e74e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e752:	07dd      	lsls	r5, r3, #31
 800e754:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e758:	bf48      	it	mi
 800e75a:	0fc8      	lsrmi	r0, r1, #31
 800e75c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e760:	bf44      	itt	mi
 800e762:	0049      	lslmi	r1, r1, #1
 800e764:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800e768:	2500      	movs	r5, #0
 800e76a:	1058      	asrs	r0, r3, #1
 800e76c:	0fcb      	lsrs	r3, r1, #31
 800e76e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800e772:	0049      	lsls	r1, r1, #1
 800e774:	2316      	movs	r3, #22
 800e776:	462c      	mov	r4, r5
 800e778:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800e77c:	19a7      	adds	r7, r4, r6
 800e77e:	4297      	cmp	r7, r2
 800e780:	bfde      	ittt	le
 800e782:	19bc      	addle	r4, r7, r6
 800e784:	1bd2      	suble	r2, r2, r7
 800e786:	19ad      	addle	r5, r5, r6
 800e788:	0fcf      	lsrs	r7, r1, #31
 800e78a:	3b01      	subs	r3, #1
 800e78c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800e790:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e794:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e798:	d1f0      	bne.n	800e77c <__ieee754_sqrt+0x94>
 800e79a:	f04f 0c20 	mov.w	ip, #32
 800e79e:	469e      	mov	lr, r3
 800e7a0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e7a4:	42a2      	cmp	r2, r4
 800e7a6:	eb06 070e 	add.w	r7, r6, lr
 800e7aa:	dc02      	bgt.n	800e7b2 <__ieee754_sqrt+0xca>
 800e7ac:	d112      	bne.n	800e7d4 <__ieee754_sqrt+0xec>
 800e7ae:	428f      	cmp	r7, r1
 800e7b0:	d810      	bhi.n	800e7d4 <__ieee754_sqrt+0xec>
 800e7b2:	2f00      	cmp	r7, #0
 800e7b4:	eb07 0e06 	add.w	lr, r7, r6
 800e7b8:	da42      	bge.n	800e840 <__ieee754_sqrt+0x158>
 800e7ba:	f1be 0f00 	cmp.w	lr, #0
 800e7be:	db3f      	blt.n	800e840 <__ieee754_sqrt+0x158>
 800e7c0:	f104 0801 	add.w	r8, r4, #1
 800e7c4:	1b12      	subs	r2, r2, r4
 800e7c6:	428f      	cmp	r7, r1
 800e7c8:	bf88      	it	hi
 800e7ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e7ce:	1bc9      	subs	r1, r1, r7
 800e7d0:	4433      	add	r3, r6
 800e7d2:	4644      	mov	r4, r8
 800e7d4:	0052      	lsls	r2, r2, #1
 800e7d6:	f1bc 0c01 	subs.w	ip, ip, #1
 800e7da:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800e7de:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e7e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e7e6:	d1dd      	bne.n	800e7a4 <__ieee754_sqrt+0xbc>
 800e7e8:	430a      	orrs	r2, r1
 800e7ea:	d006      	beq.n	800e7fa <__ieee754_sqrt+0x112>
 800e7ec:	1c5c      	adds	r4, r3, #1
 800e7ee:	bf13      	iteet	ne
 800e7f0:	3301      	addne	r3, #1
 800e7f2:	3501      	addeq	r5, #1
 800e7f4:	4663      	moveq	r3, ip
 800e7f6:	f023 0301 	bicne.w	r3, r3, #1
 800e7fa:	106a      	asrs	r2, r5, #1
 800e7fc:	085b      	lsrs	r3, r3, #1
 800e7fe:	07e9      	lsls	r1, r5, #31
 800e800:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e804:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e808:	bf48      	it	mi
 800e80a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e80e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800e812:	461c      	mov	r4, r3
 800e814:	e780      	b.n	800e718 <__ieee754_sqrt+0x30>
 800e816:	0aca      	lsrs	r2, r1, #11
 800e818:	3815      	subs	r0, #21
 800e81a:	0549      	lsls	r1, r1, #21
 800e81c:	2a00      	cmp	r2, #0
 800e81e:	d0fa      	beq.n	800e816 <__ieee754_sqrt+0x12e>
 800e820:	02d6      	lsls	r6, r2, #11
 800e822:	d50a      	bpl.n	800e83a <__ieee754_sqrt+0x152>
 800e824:	f1c3 0420 	rsb	r4, r3, #32
 800e828:	fa21 f404 	lsr.w	r4, r1, r4
 800e82c:	1e5d      	subs	r5, r3, #1
 800e82e:	4099      	lsls	r1, r3
 800e830:	4322      	orrs	r2, r4
 800e832:	1b43      	subs	r3, r0, r5
 800e834:	e78b      	b.n	800e74e <__ieee754_sqrt+0x66>
 800e836:	4618      	mov	r0, r3
 800e838:	e7f0      	b.n	800e81c <__ieee754_sqrt+0x134>
 800e83a:	0052      	lsls	r2, r2, #1
 800e83c:	3301      	adds	r3, #1
 800e83e:	e7ef      	b.n	800e820 <__ieee754_sqrt+0x138>
 800e840:	46a0      	mov	r8, r4
 800e842:	e7bf      	b.n	800e7c4 <__ieee754_sqrt+0xdc>
 800e844:	7ff00000 	.word	0x7ff00000

0800e848 <matherr>:
 800e848:	2000      	movs	r0, #0
 800e84a:	4770      	bx	lr

0800e84c <_init>:
 800e84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e84e:	bf00      	nop
 800e850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e852:	bc08      	pop	{r3}
 800e854:	469e      	mov	lr, r3
 800e856:	4770      	bx	lr

0800e858 <_fini>:
 800e858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85a:	bf00      	nop
 800e85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e85e:	bc08      	pop	{r3}
 800e860:	469e      	mov	lr, r3
 800e862:	4770      	bx	lr
